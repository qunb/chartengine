(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define(factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/**
	ChartEngine
	@module ChartEngine
	@exports ChartEngine
	@version 0.1
	@namespace ChartEngine
	*/

	// Import d3 home extended
	__webpack_require__(5);

	// Import style
	__webpack_require__(11);

	// Import infographies and charts
	__webpack_require__(6);
	__webpack_require__(3);
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);

	var ChartEngine = {};

	/**
	Creates a new chart
	@memberof ChartEngine
	@arg {object} params - An object containing an anchor DOM id, a chart type, a width and a height
	@return the created chart object
	ChartEngine.create({anchorId: "#myChartContainer", chartType: "PieBarChart", width: 950, height: 400})
	*/
	ChartEngine.create = function(params) {
		return d3
			.select(params.anchorId)
			.append('svg')
			.classed(params.chartType, true)
			.chart(params.chartType, params);
	};

	module.exports = ChartEngine;

/***/ },
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides an infography
	@module ChartEngine
	@submodule Chart
	@class PieBarEvol
	*/

	var AbstractChart = __webpack_require__(13);
	var PieBarEvolAdapter = __webpack_require__(15);
	// Import subcharts

	__webpack_require__(8);
	__webpack_require__(9);

	var PieBarEvol = d3.chart("AbstractChart").extend("PieBarEvol", {

	    zones: {
	        first: {
	            type: 'PieChart',
	            attach: 'pie',
	            width: {
	                start: .0,
	                end: .6
	            },
	            height: {
	                start: 0,
	                end: 1
	            }
	        },
	        second: {
	            type: 'HorizontalBarChart',
	            attach: 'barevol',
	            width: {
	                start: .6,
	                end: .95
	            },
	            height: {
	                start: .2,
	                end: .8
	            }
	        }
	    },

	    transform: function(data) {
	        return PieBarEvolAdapter.computeLines(data);
	    },

	    demux: function(name, data) {
	        if (name === 'pie') {
	            return data.last;
	        } else if (name === 'barevol') {
	            return data.evol;
	        }
	        return data;
	    }

	});

	module.exports = PieBarEvol;

/***/ },
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	// import d3 base
	__webpack_require__(30);

	// extend with d3.chart
	__webpack_require__(24);

	// extend with d3.tip
	d3.tip = __webpack_require__(25);

	d3.selection.prototype.moveToFront = function() {
		return this.each(function() {
			this.parentNode.appendChild(this);
		});
	};

	// Is one element's bounding rect contained in another's ?
	d3.selection.prototype.containedIn = function(container, margin){
		margin = margin == undefined ? 5 : margin;
		var containerBox = container.getBoundingClientRect()
		var box = this.node().getBoundingClientRect()

		return containerBox.top < box.top - margin
		&& containerBox.right > box.right + margin
		&& containerBox.bottom > box.bottom + margin
		&& containerBox.left < box.left - margin
	}

	/* recursive function to lower the size of a text
	in order to fit the element in another's bounding rect
	*/
	d3.selection.prototype.fitIn = function(container, margin, minFontSize, fitDy){
		var fontSize = +this.style('font-size').replace('px', '')
		if (fitDy){
			this.attr('dy', fontSize * 1.5 )
		}
		var contained = this.containedIn(container, margin)
		if (!contained){
			if (fontSize - 2 < minFontSize){
				this.attr('visibility', 'hidden')
				this.attr('data-tooSmall', true)
			} else {
				this.attr('data-tooSmall', null)
				this.attr('visibility', 'visible')
				this.style('font-size', fontSize - 2 )
				this.fitIn(container, margin, minFontSize, fitDy)
			}
		}
	}

	// Set a text's width so that it takes the whole width of a container
	d3.selection.prototype.fillRect = function(container, margin){
		var fontSize = +this.style('font-size').replace('px', '')
		var contained = this.containedIn(container, margin)
		if (contained){
				this.style('font-size', fontSize + 1 )
				this.fillRect(container, margin)
		}
	}



	module.exports = d3;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides a base for a marimekko chart
	@module ChartEngine
	@submodule Chart
	@class MarimekkoChart
	*/

	var AbstractChart = __webpack_require__(13);

	// Import adapter
	var MarimekkoAdapter = __webpack_require__(21);

	// Import layers
	var MarimekkoRectangleLayer = __webpack_require__(36);
	var MarimekkoHighlightLayer = __webpack_require__(37);
	var MarimekkoLabelLayer = __webpack_require__(38);

	// Import subcharts
	var QuantitativeAxisChart = __webpack_require__(27);
	var OrdinalLegendChart = __webpack_require__(29);

	var Formatter = __webpack_require__(26);

	var xscale = d3.scale.linear();
	var yscale = d3.scale.linear();

	var MarimekkoChart = d3.chart("AbstractChart").extend("MarimekkoChart", {

	    zones: {
	        linearXAxis: {
	            type: 'QuantitativeAxisChart',
	            attach: 'linearXAxis',
	            width: {
	                start: .1,
	                end: .9
	            },
	            height: {
	                start: .0,
	                end: .1
	            },
	            isAxis: true,
	            grid: false,
	            formatter: 'ShortValueFormatter',
	            scale: xscale,
	            orientation: 'top',
	            hidden: true
	        },
	        linearYAxis: {
	            type: 'QuantitativeAxisChart',
	            attach: 'linearYAxis',
	            width: {
	                start: .05,
	                end: .1
	            },
	            height: {
	                start: .1,
	                end: .9
	            },
	            isAxis: true,
	            scale: yscale,
	            formatter: 'PercentFormatter',
	            orientation: 'left',
	        },
	        ordinalXLegendChart: {
	            type: 'OrdinalLegendChart',
	            attach: 'ordinalLegendChart',
	            width: {
	                start: .1,
	                end: .9
	            },
	            height: {
	                start: .9,
	                end: 1
	            },
	            scale: xscale,
	            orientation: 'top',
	            text: function(line) {
	                return line.name
	            },
	        },
	        ordinalXTotalsChart: {
	            type: 'OrdinalLegendChart',
	            attach: 'ordinalTotalsChart',
	            width: {
	                start: .1,
	                end: .9
	            },
	            height: {
	                start: .0,
	                end: .05
	            },
	            scale: xscale,
	            orientation: 'top',
	            formatter: 'ShortValueFormatter',
	            //Use the same chart to display different properties of the line
	            text: function(line) {
	                return line.sum
	            }
	        }
	    },

	    initialize: function(options) {
	        var chart = this;
	        this.base.classed('marimekkoChart', true);

	        this.tip = d3.tip()
	            .attr('class', 'd3-tip')
	            .attr('id', 'marimekkoRectTooltip-' + chart.params.attach || chart.params.anchorId)
	            .html(function(point) {
	                return point.name + ': ' + Formatter.format(point.value, 'ShortValueFormatter');
	            });
	        this.base.call(this.tip);

	        // Scale generators
	        this.xscale = xscale;
	        var changeLinearXscaleRange = function() {
	            chart.xscale.range([chart.width() * chart.zones.linearXAxis.width.start, chart.width() * chart.zones.linearXAxis.width.end]);
	        };
	        chart.on('change:width', changeLinearXscaleRange);
	        changeLinearXscaleRange();

	        this.yscale = yscale;

	        // Attach layers
	        this.marimekkoRectangleLayer = this.base.append('g').classed('marimekkoRectangleLayer', true)
	        this.marimekkoRectangleLayerInstance = this.layer('marimekkoRectangleLayer', this.marimekkoRectangleLayer, MarimekkoRectangleLayer);

	        this.marimekkoLabelLayer = this.base.append('g').classed('marimekkoLabelLayer', true)
	        this.marimekkoLabelLayerInstance = this.layer('marimekkoLabelLayer', this.marimekkoLabelLayer, MarimekkoLabelLayer);

	        var onHeightChange = function() {
	            chart.yscale.range([chart.height() * chart.zones.linearYAxis.height.end, chart.height() * chart.zones.linearYAxis.height.start]);
	            chart.marimekkoRectangleLayer.attr('transform', 'translate(0,' + chart.zones.linearYAxis.height.start * chart.height() + ')');
	            chart.marimekkoLabelLayer.attr('transform', 'translate(0,' + chart.zones.linearYAxis.height.start * chart.height() + ')');
	        };
	        chart.on('change:height', onHeightChange);
	        onHeightChange();

	        d3.select('.linearYAxis').moveToFront();
	    },

	    transform: function(data) {
	        this.data = data;
	        data = MarimekkoAdapter.computeLines(data);
	        data = this.colorManager.attributesColors(data);

	        this.xscale.domain([0, data.total]);
	        this.yscale.domain([0, 100]);
	        return data;
	    },

	    overEvent: function(params) {
	        this.marimekkoRectangleLayerInstance.over(params);
	        this.marimekkoLabelLayerInstance.over(params);
	    },

	    outEvent: function(params) {
	        this.marimekkoRectangleLayerInstance.out(params);
	        this.marimekkoLabelLayerInstance.out(params);
	    }

	});

	module.exports = MarimekkoChart;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides a base for a people chart
	@module ChartEngine
	@submodule Chart
	@class IconChart
	*/

	var AbstractChart = __webpack_require__(13);

	var OsAdapter = __webpack_require__(16);
	var OsShapeLayer = __webpack_require__(41);
	var OsShapeDefinitions = __webpack_require__(62);
	    
	var PeopleMobileAdapter = __webpack_require__(17);
	var PeopleMobileLayer = __webpack_require__(42);
	var PeopleMobileShapeDefinitions = __webpack_require__(63); // svg

	var BrowserAdapter = __webpack_require__(18);
	var BrowserShapeLayer = __webpack_require__(43);
	var BrowsersShapeDefinitions = __webpack_require__(64);

	var ScreenAdapter = __webpack_require__(19);
	var ScreenShapeLayer = __webpack_require__(44);
	var ScreenLabelsLayer = __webpack_require__(45);
	var ScreenShapeDefinitions = __webpack_require__(65);

	var ordinalScale = d3.scale.ordinal();

	var IconChart = d3.chart("AbstractChart").extend("IconChart", {

	    initialize: function(params) {
	        var chart = this;

	        var internalPadding = .2;
	        var externalPadding = .35;
	        switch (params.options.iconSet) {
	            case 'os':
	                this.base.classed('osChart', true);
	                this.adapter = OsAdapter;
	                this.loadDefs(OsShapeDefinitions, 'os-defs');
	                this.osLayer = this.base.append('g').classed('osShapesLayer', true);
	                this.osLayerInstance = this.layer('osShapesLayer', this.osLayer, OsShapeLayer);
	                break;
	            case 'browser':
	                this.base.classed('browserChart', true);
	                this.adapter = BrowserAdapter;
	                this.loadDefs(BrowsersShapeDefinitions, 'browser-defs');
	                this.browserLayer = this.base.append('g').classed('browserShapesLayer', true);
	                this.browserLayerInstance = this.layer('browserShapesLayer', this.browserLayer, BrowserShapeLayer);
	                break;
	            case 'people':
	                this.base.classed('peopleMobileChart', true);
	                this.adapter = PeopleMobileAdapter;
	                internalPadding = -0.4;
	                externalPadding = 1;
	                this.loadDefs(PeopleMobileShapeDefinitions, 'mobile-defs');
	                this.peopleMobileLayer = this.base.append('g').classed('peopleMobileShapesLayer', true);
	                this.peopleMobileLayerInstance = this.layer('peopleMobileShapesLayer', this.peopleMobileLayer, PeopleMobileLayer);
	                break;
	            case 'screen':
	                this.base.classed('screenChart', true);
	                this.adapter = ScreenAdapter;
	                this.loadDefs(ScreenShapeDefinitions, 'screen-defs');
	                this.screenShapeLayer = this.base.append('g').classed('screenShapeLayer', true);
	                this.screenShapeLayerInstance = this.layer('screenShapeLayer', this.screenShapeLayer, ScreenShapeLayer);
	                this.screenLabelsLayer = this.base.append('g').classed('screenLabelsLayer', true);
	                this.screenLabelsLayerInstance = this.layer('screenLabelsLayer', this.screenLabelsLayer, ScreenLabelsLayer);
	        }

	        this.ordinalScale = ordinalScale;
	        var changeOrdinalscaleRange = function() {
	            chart.ordinalScale.rangeRoundBands([0, chart.width()], internalPadding, externalPadding);
	        };
	        chart.on('change:width', changeOrdinalscaleRange);
	        changeOrdinalscaleRange();
	    },

	    transform: function(data) {
	        this.data = data;
	        var points = this.adapter.computeLines(data);
	        this.ordinalScale.domain(_.range(points.length));
	        return points;
	    }

	});

	module.exports = IconChart;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides a base for a pie chart

	- "other" node :
	  This pie automatically computes a "other" node,
	  in order to have a clear graph with a few nodes. See PieAdapter.

	  TODO It should be possible to :
	    This chart can be called with a remainder option :
	    remainder : {
	        totalValue: 987654, //what's the sum on all nodes (even those not in the given dataset) on this dimension ?
	    }
	    AND a 'totalCount' parameter
	    It is the real number of nodes on this dimension (even those not available in the input dataset,
	    but available as metadata)


	@module ChartEngine
	@submodule Chart
	@class PieChart
	*/

	var AbstractChart = __webpack_require__(13);
	var Formatter = __webpack_require__(26);

	var PieAdapter = __webpack_require__(20);

	var PieSectorsLayer = __webpack_require__(33);
	var PieLabelLayer = __webpack_require__(34);
	var PieCenterLayer = __webpack_require__(35);

	var arc = d3.svg.arc();
	var pie = d3.layout.pie();

	var PieChart = d3.chart("AbstractChart").extend("PieChart", {

	    initialize: function(options) {
	        var chart = this;
	        this.base.classed('pieChart', true);

	  /*
	        this.tip = d3.tip()
	            .attr('class', 'd3-tip')
	            .attr('id', 'horizontalBarChartTooltip-' + chart.params.attach || chart.params.anchorId)
	            .html(function(point) {
	                return point.data.name + ': ' + Formatter.format(point.value, 'ShortValueFormatter');
	            })
	            .offset([-12, 0]);
	        this.base.call(this.tip);
	        */

	        // Attach layers
	        this.pieSectorsLayer = this.base.append('g').classed('pieSectorsLayer', true)
	        this.pieSectorsLayerInstance = this.layer('pieSectorsLayer', this.pieSectorsLayer, PieSectorsLayer);

	        this.pieLabelLayer = this.base.append('g').classed('pieLabelLayer', true)
	        this.pieLabelLayerInstance = this.layer('pieLabelLayer', this.pieLabelLayer, PieLabelLayer);

	        this.pieCenterLayer = this.base.append('g').classed('pieCenterLayer', true)
	        this.pieCenterLayerInstance = this.layer('pieCenterLayer', this.pieCenterLayer, PieCenterLayer);

	        var resizeAndRecenter = function() {
	            chart.pieSectorsLayer.attr('transform', 'translate(' + chart.width() / 2 + ',' + chart.height() / 2 + ')');
	        };
	        resizeAndRecenter();
	        chart.on('change:width', resizeAndRecenter);
	        chart.on('change:height', resizeAndRecenter);
	    },

	    transform: function(data) {
	        this.data = data;
	        data = this.colorManager.attributesColors(data);
	        this.radius = d3.min([this.height(), this.width()]) / 4;
	        this.innerRadius = this.radius / 1.618;
	        var data = PieAdapter.computeLines(data);
	        this.arc = arc.outerRadius(this.radius).innerRadius(this.innerRadius);
	        this.pie = pie
	            .sort(null)
	            .value(function(point) {
	                return point.value;
	            });
	        return data;
	    },

	    overEvent: function(params) {
	        this.pieSectorsLayerInstance.over(params);
	        this.pieLabelLayerInstance.over(params);
	    },

	    outEvent: function(params) {
	        this.pieSectorsLayerInstance.out(params);
	        this.pieLabelLayerInstance.out(params);
	    },

	    color: function() {
	        console.log('pie colors');
	        return this;
	    }

	});

	module.exports = PieChart;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides a base for a horizontal bar chart
	@module ChartEngine
	@submodule Chart
	@class HorizontalBarChart
	*/

	var AbstractChart = __webpack_require__(13);
	var Formatter = __webpack_require__(26);

	var BarAdapter = __webpack_require__(22);

	var BarRectangleLayer = __webpack_require__(39);
	var BarLabelLayer = __webpack_require__(40);

	var OrdinalAxisChart = __webpack_require__(28);
	var QuantitativeAxisChart = __webpack_require__(27);

	var ordinalScale = d3.scale.ordinal();
	var linearScale = d3.scale.linear();

	var HorizontalBarChart = d3.chart("AbstractChart").extend("HorizontalBarChart", {

	    zones: {
	        ordinalYAxis: {
	            type: 'OrdinalAxisChart',
	            attach: 'ordinalYAxis',
	            scale: ordinalScale,
	            formatter: 'ShortValueFormatter',
	            orientation: 'left',
	            width: {
	                start: 0,
	                end: .2
	            },
	            height: {
	                start: 0,
	                end: 1
	            },
	            isAxis: true,
	            grid: true
	        },
	        // linearXAxis: {
	        //     type: 'QuantitativeAxisChart',
	        //     attach: 'linearXAxis',
	        //     width: {
	        //         start: .2,
	        //         end: 1
	        //     },
	        //     height: {
	        //         start: 0,
	        //         end: .1
	        //     },
	        //     isAxis: true,
	        //     scale: linearScale,
	        //     ticksNumber: 2,
	        //     formatter: 'ShortValueFormatter',
	        //     orientation: 'bottom'
	        // }
	    },

	    initialize: function(options) {
	        var chart = this;
	        this.base.classed('barChart', true);

	        this.tip = d3.tip()
	            .attr('class', 'd3-tip')
	            .attr('id', 'horizontalBarChartTooltip-' + chart.params.attach || chart.params.anchorId)
	            .html(function(point) {
	                return point.name + ': ' + Formatter.format(point.value, 'ShortValueFormatter');
	            })
	            .offset([-12, 0]);
	        this.base.call(this.tip);

	        // Scale generators
	        this.xscale = linearScale;
	        var changeLinearXscaleRange = function() {
	            chart.xscale.range([chart.width() * chart.zones.ordinalYAxis.width.end, chart.width()]);
	        };
	        chart.on('change:width', changeLinearXscaleRange);
	        changeLinearXscaleRange();

	        this.yscale = ordinalScale;
	        var changeLinearYscaleRange = function() {
	            chart.yscale.rangeRoundBands([chart.height() * chart.zones.ordinalYAxis.height.end, chart.height() * chart.zones.ordinalYAxis.height.start], .33, .25);
	        };
	        chart.on('change:height', changeLinearYscaleRange);
	        changeLinearYscaleRange();

	        this.barRectangleLayer = this.base.append('g').classed('barRectangleLayer', true);
	        this.barRectangleLayerInstance = this.layer('barRectangleLayer', this.barRectangleLayer, BarRectangleLayer);

	        this.barLabelLayer = this.base.append('g').classed('barLabelLayer', true)
	        this.barLabelLayerInstance = this.layer('barLabelLayer', this.barLabelLayer, BarLabelLayer);
	    },

	    transform: function(data) {
	        this.data = data;
	        data = this.colorManager.attributesColors(data);
	        data = BarAdapter.computeLines(data);
	        /* X axis domain
	        - Always start at 0 when all values are of the same sign
	        - A padding of 1/10 the scale is added on both ends (it's visually better)
	        */
	        var extent = d3.extent(data.points, function(point) {
	            return point.value;
	        })

	        var distance = extent[1] - extent[0]
	        if (extent[0] >= 0) {
	            extent[0] = 0
	        } else {
	            extent[0] = extent[0] - distance / 10
	        }
	        if (extent[1] <= 0) {
	            extent[1] = 0
	        } else {
	            extent[1] = extent[1] + distance / 10
	        }
	        this.xscale.domain(extent);

	        this.yscale.domain(_.pluck(data.points, function(point) {
	            return point.name;
	        }));

	        return data.points;
	    },

	    overEvent: function(params) {
	        this.barRectangleLayerInstance.over(params);
	    },

	    outEvent: function(params) {
	        this.barRectangleLayerInstance.out(params);
	    },

	    color: function() {
	        console.log('horizontal colors');
	        return this;
	    },

	});

	module.exports = HorizontalBarChart;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides a base for a text chart
	@module ChartEngine
	@submodule Chart
	@class BigTextChart
	*/

	var AbstractChart = __webpack_require__(13);
	var BigTextChartLayer = __webpack_require__(32);
	var TextAdapter = __webpack_require__(23);

	var ordinalScale = d3.scale.ordinal();

	var BigTextChart = d3.chart("AbstractChart").extend("BigTextChart", {

	    initialize: function(params) {
	        var chart = this;
	        this.textLayer = this.base.append('g').classed('textLayer', true)
	        this.textLayerInstance = this.layer('textLayer', this.textLayer, BigTextChartLayer);

	        this.ordinalScale = ordinalScale;
	        var changeOrdinalscaleRange = function() {
	            chart.ordinalScale.rangeRoundBands([0, chart.width()], 0, 0);
	        };
	        chart.on('change:width', changeOrdinalscaleRange);
	        changeOrdinalscaleRange();
	    },

	    transform: function(data) {
	        this.data = data;
	        var points = TextAdapter.computeLines(data);
	        this.ordinalScale.domain(_.range(points.length));
	        return points;
	    }

	});

	module.exports = BigTextChart;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(12);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(14)(content);
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/home/ungererfabien/dev/chartlabs/chartengine/node_modules/css-loader/index.js!/home/ungererfabien/dev/chartlabs/chartengine/node_modules/sass-loader/index.js!/home/ungererfabien/dev/chartlabs/chartengine/style/all-source.scss", function() {
			var newContent = require("!!/home/ungererfabien/dev/chartlabs/chartengine/node_modules/css-loader/index.js!/home/ungererfabien/dev/chartlabs/chartengine/node_modules/sass-loader/index.js!/home/ungererfabien/dev/chartlabs/chartengine/style/all-source.scss");
			if(typeof newContent === 'string') newContent = [module.id, newContent, ''];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(50)();
	exports.push([module.id, "body{font-size:16px;line-height:1.5;color:#6e6e6e;font-family:\"lato\",\"Helvetica Neue\",\"Helvetica\",Helvetica,Arial,sans-serif;}#chartEngineDefinitions{display:none;}text.chartTitle{fill:#6E6E6E;font-size:16px;text-anchor:middle;}.quantitativeAxisChart .quantitative_axis .tick line.grid-line{fill:none;stroke-width:1;shape-rendering:crispEdges;stroke:#CFCFCF;opacity:0.5;}.quantitativeAxisChart .quantitative_axis .tick line.grid-line.zero{stroke-width:3;opacity:1;}.quantitativeAxisChart .quantitative_axis .tick text{fill:#999999;}.quantitativeAxisChart .quantitative_axis path.domain{opacity:0;}.quantitativeAxisChart rect.negativeArea{fill:#fafafa;}.ordinal_axis .tick line.grid-line{fill:none;stroke-width:1;shape-rendering:crispEdges;stroke:#CFCFCF;opacity:0.5;}.ordinal_axis .tick line.grid-line.zero{stroke-width:3;opacity:1;}.ordinal_axis .tick text{fill:#999999;}.ordinal_axis path.domain{opacity:0;}.ordinalLegendChart .ordinalLegendLabel{fill:#999999;}.marimekkoChart .marimekkoLabelLayer .marimekkoRectLabel{fill:#fff;font-size:20px;}.marimekkoChart .marimekkoLabelLayer text{pointer-events:none;}.marimekkoChart .marimekkoLabelLayer .marimekkoRectTip{fill:#fff;}.marimekkoChart .marimekkoLabelLayer .marimekkoColumnLabel{fill:#999999;}.marimekkoChart .marimekkoRect{stroke:#fff;stroke-width:3px;}.ordinalTotalsChart .ordinalLegendLabel{fill:#999999;}.pieChart .pieCenterLayer .pieCenter{font-size:45px;text-anchor:middle;font-weight:300;fill:#ddd;}.pieChart .pieSectorsLayer .slice{stroke:white;}.pieChart .pieLabelLayer text{fill:#999999;}.pieChart .pieTip{font-size:24px;}.pieChart.small .pieTip{font-size:24px;}.pieChart.large .pieLabel{font-size:20px;}.pieChart text.piePercentage{pointer-events:none;fill:white;font-size:18px;}.barChart .barLabel{fill:#999999;}.peopleMobileChart .no-mobile-shape{opacity:0.2;}.peopleMobileChart rect.rectbg{fill:white;visibility:hidden;}.peopleMobileChart #mobile-shape-2 #mobile-shape-2-earplug-string path{fill:none;}.screenChart .screenLabel{fill:white;font-size:34px;}.d3-tip{line-height:1;font-weight:bold;padding:12px;background:rgba(0, 0, 0, 0.8);color:#fff;border-radius:2px;}.d3-tip:after{box-sizing:border-box;display:inline;font-size:10px;width:100%;line-height:1;color:rgba(0, 0, 0, 0.8);content:\"\\25BC\";position:absolute;text-align:center;}.d3-tip.n:after{margin:-1px 0 0 0;top:100%;left:0;}", ""]);

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_, $) {/**
	Provides generic behavior for chart objects
	@module ChartEngine
	@submodule Charts
	@class AbstractChart
	@abstract
	*/
	__webpack_require__(51);
	var ModelSchemas = __webpack_require__(47);
	var Exceptions = __webpack_require__(53);
	var ColorManager = __webpack_require__(54);

	var defaultWidth = 950,
	    defaultHeight = 350;

	var defDivId = 'chartEngineDefinitions';

	var AbstractChart = d3.chart("AbstractChart", {

	    zones: {},

	    modes: {
	        small: function() {
	            return this.width() <= 650;
	            //return Modernizr.mq("only all and (max-width: 650px)");
	        },
	        medium: function() {
	            return this.width() > 650 && this.width() <= 900;
	            //return Modernizr.mq("only all and (min-width: 651px) and (max-width: 800px)");
	        },
	        large: function() {
	            return this.width() > 900;
	            //return Modernizr.mq("only all and (min-width: 801px)");
	        }
	    },

	    initialize: function(params) {
	        var chart = this;
	        this.params = params || {};

	        _.bindAll(this, 'resize', 'scaleAndPlaceZone', 'initZones', 'initListeners');

	        this._layersArguments = {};
	        this._modes = this.modes || {};
	        delete this.modes;
	        this._modeLayers = {};

	        this._margin = {
	            bottom: 0
	        };

	        // Test master chart or subchart
	        if (params.parent) {
	            chart.width(chart.params.parent.width() * (chart.params.width.end - chart.params.width.start));
	            chart.height(chart.params.parent.height() * (chart.params.height.end - chart.params.height.start));
	            chart.colorManager = chart.params.parent.colorManager;
	        }
	        // Master
	        else {
	            this.initSize();
	            this.colorManager = new ColorManager(params.colors);
	            this.initDefs();
	        }

	        this.initTitle();
	        this.initZones();

	        _determineMode.call(this);
	        this.initListeners();

	        // Show the mode in the middle of the chart for debugging
	        if (params.modeDebug) {
	            var modeText = chart.base.append('text')

	            function formatModeText() {
	                modeText
	                    .classed('modeDebug', true)
	                    .attr('x', chart.width() / 2)
	                    .attr('y', chart.height() / 2)
	                    .text(chart.mode())
	                    .style({
	                        'text-anchor': 'middle',
	                        'font-size': '50px',
	                        'fill': 'red'
	                    })
	                    .moveToFront()
	            }
	            formatModeText()
	            chart.on('change:mode', function() {
	                formatModeText()
	            });
	            chart.on('resize', function() {
	                formatModeText()
	            });
	        }

	        chart.setModeClass(chart.mode())
	        chart.on('change:mode', function(mode) {
	            chart.setModeClass(mode)
	        })
	    },

	    setModeClass: function(mode) {
	        var chart = this;
	        //Update the chart base's size css class
	        _(chart.modes).chain().keys().each(function(key) {
	            chart.base.classed(key, key === mode)
	        })
	    },

	    initTitle: function() {
	        var chart = this;
	        if (chart.params.options && chart.params.options.title) {
	            chart._margin.bottom = 60;
	            chart.titleInstance = chart.base
	                .append('text')
	                .classed('chartTitle', true)
	                .attr('x', chart.width() / 2)
	                .attr('y', chart.height() + chart._margin.bottom - 15);
	            chart.titleInstance.html(chart.params.options.title);
	        }
	    },

	    initSize: function() {
	        var chart = this;
	        // If auto: take the size of anchorId
	        if (chart.params.size == "auto" && chart.params.anchorId) {
	            chart.width(d3.select(chart.params.anchorId).style("width"));
	            chart.height(d3.select(chart.params.anchorId).style("height"));
	        }
	        // If predefined size
	        else if (chart.params.size.width && chart.params.size.height) {
	            chart.width(chart.params.size.width);
	            chart.height(chart.params.size.height);
	        }
	        // Default values
	        else  {
	            chart.width(defaultWidth);
	            chart.height(defaultHeight);
	        }
	    },

	    initDefs: function() {
	        if (d3.select('#' + defDivId).empty()) {
	            d3.select('body').append('div').attr('id', defDivId);
	        }
	    },

	    loadDefs: function(defs, id) {
	        if (d3.select('#' + defDivId + ' #' + id).empty()) {
	            $('#' + defDivId).append(defs);
	        }
	    },

	    initZones: function() {
	        var chart = this;
	        _.each(_.keys(chart.zones), function(key) {

	            var id = chart.zones[key].attach;
	            var title = chart.params.options && chart.params.options[id] && chart.params.options[id].title;

	            var zone = chart.zones[key] = _.extend(chart.zones[key], {
	                parent: chart,
	                options: {
	                    title: title
	                }
	            });

	            zone.anchor = chart.base.append('g');

	            if (zone.type && zone.attach) {
	                zone.anchor.classed(zone.attach, true);
	                zone.chart = zone.anchor.chart(zone.type, zone);
	                chart.attach(zone.attach, zone.chart);
	            }

	            chart.scaleAndPlaceZone(zone);

	            if (chart.zones[key].hidden) {
	                zone.anchor.attr('visibility', 'hidden')
	            }
	        });
	    },

	    initListeners: function() {
	        var chart = this;

	        // Resize event
	        // bind to window resize end to the master chart
	        if (!this.params.parent && chart.params.size == "auto") {
	            $(window).resize(_.debounce(function() {
	                chart.resize();
	            }, 150));
	        }
	        // Listen to resize event
	        else if (this.params.parent) {
	            chart.params.parent.on('resize', function() {
	                chart.resize();
	            });
	            chart.params.parent.on('change:height', function() {
	                chart.resize();
	            });
	            chart.params.parent.on('change:width', function() {
	                chart.resize();
	            });
	        }

	        // Over element event
	        this.on('over', function(params) {
	            // Propagate to parent only if needed
	            if (chart.params.parent && params.chart != 'parent') {
	                chart.params.parent.trigger('over', params);
	            }
	            // Propagate to children only if needed
	            if (chart.zones) {
	                _.each(_.keys(chart.zones), function(key) {
	                    var zone = chart.zones[key];
	                    if (zone.attach != params.chart.attach) {
	                        params.chart = 'parent';
	                        zone.chart.trigger('over', params);
	                    }
	                });
	            }
	            // Propagate to layers
	            chart.overEvent(params);
	        });
	        this.on('out', function(params) {
	            // Propagate to parent only if needed
	            if (chart.params.parent && params.chart != 'parent') {
	                chart.params.parent.trigger('out', params);
	            }
	            // Propagate to children only if needed
	            if (chart.zones) {
	                _.each(_.keys(chart.zones), function(key) {
	                    var zone = chart.zones[key];
	                    if (zone.attach != params.chart.attach) {
	                        params.chart = 'parent';
	                        zone.chart.trigger('out', params);
	                    }
	                });
	            }
	            // Propagate to layers
	            chart.outEvent(params);
	        });

	        // Change mode event
	        chart.on("change:mode", function() {
	            _onModeChange.call(chart);
	        });
	    },

	    // To be override by all charts
	    overEvent: function(params) {},

	    outEvent: function(params) {},

	    scaleAndPlaceZone: function(zone) {
	        var chart = this;
	        zone.anchor.attr('transform', function() {
	            var x = 0,
	                y = 0;
	            if (!zone.isAxis) {
	                x = zone.width.start * chart.width();
	                y = zone.height.start * chart.height();
	            }
	            return 'translate(' + x + ',' + y + ')';
	        });
	    },

	    width: function(newWidth, options) {
	        options = options || {};
	        if (arguments.length === 0) {
	            if (this._width && !isNaN(+this._width)) {
	                return this._width;
	            } else {
	                return _toNumFromPx(_style.call(this, "width"));
	            }
	        }

	        var oldWidth = this._width;
	        this._width = newWidth;
	        if (this._width !== oldWidth) {
	            this.base.style("width", isNaN(this._width) ? this._width : this._width + "px");
	            if (!options.silent) {
	                this.trigger("change:width", this._width, oldWidth);
	            }
	            if (this.data && !options.noDraw) {
	                this.draw(this.data);
	            }
	        }
	        return this;
	    },

	    height: function(newHeight, options) {
	        options = options || {};
	        if (arguments.length === 0) {
	            if (this._height && !isNaN(+this._height)) {
	                return this._height - this._margin.bottom;
	            } else {
	                return _toNumFromPx(_style.call(this, "height")) - this._margin.bottom;
	            }
	        }

	        var oldHeight = this._height;
	        this._height = newHeight;
	        if (this._height !== oldHeight) {
	            this.base.style("height", isNaN(this._height) ? this._height : this._height + "px");
	            if (!options.silent) {
	                this.trigger("change:height", this._height, oldHeight);
	            }
	            if (this.data && !options.noDraw) {
	                this.draw(this.data);
	            }
	        }
	        return this;
	    },

	    resize: function() {

	        var chart = this;
	        if (chart.params.parent) {
	            chart.width(chart.params.parent.width() * (chart.params.width.end - chart.params.width.start));
	            chart.height(chart.params.parent.height() * (chart.params.height.end - chart.params.height.start));
	        }

	        if (!chart.params.parent && chart.params.size == 'auto') {
	            chart.width(d3.select(chart.params.anchorId).style('width'), {
	                noDraw: true
	            });
	            chart.height(d3.select(chart.params.anchorId).style('height'), {
	                noDraw: true
	            });
	        }

	        // update current mode and trigger event for sub layers if changed
	        var changed = _determineMode.call(this);
	        if (changed) {
	            this.trigger('change:mode', this._currentMode);
	        }

	        // update internal zones
	        _.each(_.keys(chart.zones), function(key) {
	            chart.scaleAndPlaceZone(chart.zones[key]);
	        });

	        // update title
	        if (this.titleInstance) {
	            this.titleInstance
	                .attr('x', chart.width() / 2)
	                .attr('y', chart.height() + chart._margin.bottom - 15);
	        }

	        // Trigger event for children
	        this.trigger('resize');
	        // only redraw if there is data

	        if (!chart.params.parent && chart.data) {
	            chart.draw(this.data);
	        }
	    },

	    mode: function() {
	        // returns current mode
	        return this._currentMode;
	    },

	    recomputeMode: function() {
	        var changed = _determineMode.call(this);
	        if (changed) {
	            this.trigger('change:mode', this._currentMode);
	        }
	        return changed;
	    },

	    duration: function(durationAnim) {
	        this._duration = durationAnim || 0;
	        return this;
	    },

	    color: function(colors) {
	        this.colorManage.setColors(colors);
	        return this;
	    },

	    title: function(title) {
	        this.params.title = title;
	        this.titleInstance.html(title);
	        return this;
	    }

	});

	var oldLayer = AbstractChart.prototype.layer;
	AbstractChart.prototype.layer = function(name, selection, options) {

	    var chart = this;

	    // just return an existing layer if all we are
	    // passed is the name argument
	    if (arguments.length === 1) {
	        return oldLayer.call(this, name);
	    }

	    // save all the layer arguments. For layers that are created
	    // but do not need to be rendered in the current mode, this
	    // will ensure their arguments are intact for when they do
	    // need to be created.
	    chart._layersArguments[name] = {
	        name: name,
	        selection: selection,
	        options: options,
	        showing: false, // default hidden
	        layer: null // layer handle
	    };

	    // create the layer if it should exist in the current mode.
	    var layer;
	    if (typeof options.modes === "undefined" || ("modes" in options && options.modes.indexOf(chart.mode()) > -1)) {
	        // run default layer code
	        layer = oldLayer.call(this, name, selection, options);
	        // mark layer as showing.
	        chart._layersArguments[name].showing = true;
	        chart._layersArguments[name].layer = layer;
	    }

	    if ("modes" in options) {

	        // save available modes on the layer if we created it
	        if (layer) {
	            layer._modes = options.modes;
	        }

	        // cache the layer under the mode name. This will be useful
	        // when we are repainting layers.
	        options.modes.forEach(function(mode) {

	            // make sure mode exists
	            if (mode in chart._modes) {

	                chart._modeLayers[mode] = chart._modeLayers[mode] || [];

	                // save the layer as being mapped to this mode.
	                chart._modeLayers[mode].push(name);

	            } else {
	                throw new Error("Mode " + mode + " is not defined");
	            }
	        });

	        // make sure this layer has all modes if none were
	        // specified as an option.
	    } else if (chart._modes) {
	        var allModes = Object.keys(chart._modes);

	        if (layer) {
	            layer._modes = allModes;
	        }

	        allModes.forEach(function(mode) {
	            chart._modeLayers[mode] = chart._modeLayers[mode] || [];
	            chart._modeLayers[mode].push(name);
	        });

	        // mark layer as showing.
	        chart._layersArguments[name].showing = true;
	        chart._layersArguments[name].layer = layer;
	    }

	    return layer;
	};

	// obtains element computed style
	// context is chart
	function _style(attr) {
	    var style, element = this.base[0][0];
	    if (window.getComputedStyle) {
	        style = window.getComputedStyle(element);
	    } else if (element.currentStyle) {
	        style = element.currentStyle;
	    }

	    if (!attr) {
	        return style;
	    } else {
	        return style[attr];
	    }
	};

	// converts pixel values
	var _toNumFromPx = (function() {
	    var rx = /px$/;
	    return function(value) {
	        if (rx.test(value)) {
	            return +(value.replace(rx, ""));
	        } else {
	            return value;
	        }
	    };
	}());

	// helper attribute setter on chart base.
	// context is chart
	function _initAttr(internalName, d3Name, defaultValue) {
	    var current = _toNumFromPx(_style.call(this, d3Name));
	    if (current === null || current === 0 || current === "") {
	        this[internalName] = defaultValue;
	        this.base.style(d3Name, defaultValue);
	    } else {
	        this[internalName] = _toNumFromPx(_style.call(this, d3Name));
	    }
	};

	// go over existing modes and determine which we are in
	// returns true if a mode change occured, false otherwise.
	function _determineMode() {
	    var oldMode = this._currentMode;
	    this._currentMode = null;

	    if ("modes" in this) {
	        var result = false;
	        for (var mode in this._modes) {
	            result = this._modes[mode].call(this);
	            if (result) {
	                this._currentMode = mode;
	                break;
	            }
	        }
	    }
	    return oldMode !== this._currentMode;
	};

	// takes care of removing/adding appropriate layers
	function _onModeChange() {
	    var chart = this;
	    var mode = chart.mode()

	    for (var layerName in chart._layersArguments) {
	        // is this chart in the current mode?
	        var layerArgs = chart._layersArguments[layerName];
	        // if this layer should not exist in the current mode
	        // unlayer it and then save it so we can reattach it
	        // later.
	        if (layerArgs.options.modes.indexOf(mode) === -1) {
	            // is it showing?
	            if (layerArgs.showing === true) {
	                // nope? remove it.
	                var removedLayer = chart.unlayer(layerName);
	                removedLayer.style("display", "none");
	                chart._layersArguments[layerName].showing = false;
	                chart._layersArguments[layerName].layer = removedLayer;
	            }
	        } else {
	            // this layer is not showing, we need to add it
	            if (chart._layersArguments[layerName].showing === false) {
	                // if the layer has already been created, just re-add it
	                if (chart._layersArguments[layerName].layer !== null) {
	                    oldLayer.call(chart, layerName, chart._layersArguments[layerName].layer);
	                    chart._layersArguments[layerName].layer.style("display", "inline");
	                } else {
	                    // this layer must not have been drawn in the initial rendering
	                    // but we do have the arguments, so render it using the
	                    // old layering.
	                    oldLayer.call(chart,
	                        chart._layersArguments[layerName].name,
	                        chart._layersArguments[layerName].selection,
	                        chart._layersArguments[layerName].options);
	                }
	                chart._layersArguments[layerName].showing = true;
	            }
	        }
	    }
	};

	module.exports = AbstractChart;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31), __webpack_require__(58)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {};

	module.exports = function(list) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
		var styles = listToStyles(list);
		addStylesToDom(styles);
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j]));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j]));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			// var sourceMap = item[3];
			var part = {css: css, media: media/*, sourceMap: sourceMap*/};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function addStyle(obj) {
		var styleElement = document.createElement("style");
		var head = document.head || document.getElementsByTagName("head")[0];
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		applyToTag(styleElement, obj);
		return function(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media /*&& newObj.sourceMap === obj.sourceMap*/)
					return;
				applyToTag(styleElement, obj = newObj);
			} else {
				head.removeChild(styleElement);
			}
		};
	};

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		// var sourceMap = obj.sourceMap;

		// No browser support
		// if(sourceMap && typeof btoa === "function") {
			// try {
				// css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
			// } catch(e) {}
		// }
		if(media) {
			styleElement.setAttribute("media", media)
		}
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}

	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 Computes lines based on the model's projections
	 @class PieBarEvolAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);
	var Line = __webpack_require__(56);
	var Point = __webpack_require__(57);

	PieBarEvolAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function PieBarEvolAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	PieBarEvolAdapter.prototype.computeLines = function(data) {

		// var current = data.lines[0];
		// var previous = data.lines[1];

		// var barevolLine = new Line('evol', 'Evolution');

		// // Compute totals
		// var totalCurrent = 0;
		// var totalPrevious = 0;
		// _.each(current.points, function(point) {
		// 	totalCurrent += point.value;
		// });
		// _.each(previous.points, function(point) {
		// 	totalPrevious += point.value;
		// });

		// // Compute evol in points
		// _.each(current.points, function(point) {
		// 	var id = point.id;
		// 	// Compute current slice
		// 	var currentSlice = point.value / totalCurrent;
		// 	var oldSlice = 0;

		// 	_.each(previous.points, function(previousPoint) {
		// 		// Compute previous slice if exists in previous line
		// 		if (previousPoint.id == id) {
		// 			oldSlice = previousPoint.value / totalPrevious;
		// 		}
		// 	});

		// 	var evolutionInPoints = -(currentSlice - oldSlice) * 100;
		// 	barevolLine.points.push(new Point(id, point.name, evolutionInPoints, point.x, point.color));
		// });

		// var alreadyComputedPointsIds = _.pluck(barevolLine.points, function(point) {
		// 	return point.id;
		// });

		// var computedLines = {
		// 	pie: current,
		// 	barevol: barevolLine
		// };

		return data;
	};

	module.exports = new PieBarEvolAdapter();

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	 Computes lines based on the model's projections
	 @class OsAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	OsAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function OsAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	OsAdapter.prototype.computeLines = function(dataset) {
		var points = dataset.lines[0].points;
		_.each(points, function(point) {
			switch (point.id) {
				case 'Macintosh':
				case 'iOS':
					point.id = 'macintosh';
					break;

				case 'Android':
				case 'Linux':
				case 'Samsung':
					point.id = 'linux';
					break;

				case 'Windows':
					point.id = 'windows';
					break;
			}
		});
		return points;
	};

	module.exports = new OsAdapter();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	 Computes lines based on the model's projections
	 @class PeopleMobileAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);
	var Line = __webpack_require__(56);
	var Point = __webpack_require__(57);
	var FractionFactory = __webpack_require__(59);

	PeopleMobileAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function PeopleMobileAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	*/

	PeopleMobileAdapter.prototype.computeLines = function(dataset) {

		var total = 0;
		var mobileTotal = 0;
		_.each(dataset.lines[0].points, function(point) {
			total += point.value;
			switch (point.id) {
				case 'mobile':
				case 'tablet':
					mobileTotal += point.value;
					break;
			}
		});

		var ratio = mobileTotal / total;
		var fraction = FractionFactory.getUsualFraction(ratio);

		var points = [];
		_.each(_.range(fraction.numerator), function() {
			var point = new Point('mobile', 'Mobile users', 'mobile');
			points.push(point);
		});
		_.each(_.range(fraction.denominator - fraction.numerator), function() {
			var point = new Point('non-mobile', 'Non mobile users', 'other');
			points.push(point);
		});

		// points = _.shuffle(points);
		return points;
	};

	module.exports = new PeopleMobileAdapter();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	 Computes lines based on the model's projections
	 @class BrowserAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	BrowserAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function BrowserAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	BrowserAdapter.prototype.computeLines = function(dataset) {

		var points = dataset.lines[0].points;
		_.each(points, function(point) {
			switch (point.id) {
				case 'Firefox':
				case 'Mozilla':
				case 'Mozilla Compatible Agent':
					point.id = 'firefox';
					break;

				case 'Chrome':
					point.id = 'chrome';
					break;

				case 'Safari':
				case 'Safari (in-app)':
					point.id = 'safari';
					break;

				case 'Android Browser':
				case 'Android':
					point.id = 'android';
					break;

				case 'Internet Explorer':
					point.id = 'ie';
					break;

				case 'Opera Mini':
				case 'Opera':
					point.id = 'opera';
					break;
			}
		});

		return points;
	};

	module.exports = new BrowserAdapter();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 Computes lines based on the model's projections
	 @class ScreenAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	ScreenAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function ScreenAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	ScreenAdapter.prototype.computeLines = function(dataset) {
		// _.each(dataset.lines[0].points, function(point) { });
		// var points = _.shuffle(line.points);
		return dataset.lines[0].points;
	};

	module.exports = new ScreenAdapter();

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	 Computes lines based on the model's projections
	 @class PieAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	PieAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function PieAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	PieAdapter.prototype.computeLines = function(dataset) {

		var line = dataset.lines[0];
		line.total = d3.sum(line.points, function(point) {
			return point.value;
		});

		line.points = _.sortBy(line.points, function(point) {
			if (point.status && point.status == 'other') {
				return 0;
			} else {
				return -point.value;
			}
		});

		return line;
	};

	module.exports = new PieAdapter();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	 Computes lines based on the model's projections
	 @class MarimekkoAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	MarimekkoAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function MarimekkoAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	MarimekkoAdapter.prototype.computeLines = function(data) {

		data.total = 0;
		var xoffset = 0;

		// Calculate sub sum per line
		_.each(data.lines, function(line) {
			line.sum = 0;
			_.each(line.points, function(point) {
				data.total += point.value;
				line.sum += point.value;
				point.parent = line;
				point.uniqueId = _.uniqueId();
			});
		});

		// Reorder lines
		data.lines = _.sortBy(data.lines, function(line) {
			if (line.points.length == 1 && line.points[0].status == 'other') {
				return 0;
			} else {
				return -line.sum;
			}
		});

		// Calculate offset line
		_.each(data.lines, function(line) {
			line.offset = xoffset;
			line.total = data.total;
			xoffset += line.sum;

			// Reorder points
			line.points = _.sortBy(line.points, function(point) {
				if (point.status && point.status == 'other') {
					return 0;
				} else {
					return point.value;
				}
			});

			// Calculate offset point
			var yoffset = 0;
			_.each(line.points, function(point) {
				point.offset = yoffset;
				yoffset += point.value;
			});
		});

		_.each(data.lines, function(line) {
			line.points = line.points.reverse();
		});

		return data;

	};

	module.exports = new MarimekkoAdapter();
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 Computes lines based on the model's projections
	 @class BarAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */
	__webpack_require__(30);

	var AbstractAdapter = __webpack_require__(55);

	BarAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function BarAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	BarAdapter.prototype.computeLines = function(dataset) {
		var line = dataset.lines[0];
		line.points = line.points.reverse();
		// // Reorder lines
		// line.points = _.sortBy(line.points, function(point) {
		// 	return point.value;
		// });
		return line;
	};

	module.exports = new BarAdapter();

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 Computes lines based on the model's projections
	 @class TextAdapter
	 @param model the chart model
	 @constructor
	 @module ChartEngine
	 */

	var AbstractAdapter = __webpack_require__(55);

	TextAdapter.prototype = Object.create(AbstractAdapter.prototype);

	function TextAdapter(model) {
		AbstractAdapter.call(this, model);
	}

	/**
	     Compute the lines from the chart model
	     @method computeLines
	     */
	TextAdapter.prototype.computeLines = function(dataset) {
		return dataset.lines[0].points;
	};

	module.exports = new TextAdapter();

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*! d3.chart - v0.2.1
	 *  License: MIT Expat
	 *  Date: 2014-06-24
	 */
	// (function(window) {
	"use strict";
	/*jshint unused: false */

	var d3 = window.d3;
	var hasOwnProp = Object.hasOwnProperty;

	var d3cAssert = function(test, message) {
		if (test) {
			return;
		}
		throw new Error("[d3.chart] " + message);
	};

	d3cAssert(d3, "d3.js is required");
	d3cAssert(typeof d3.version === "string" && d3.version.match(/^3/), "d3.js version 3 is required");

	"use strict";

	var lifecycleRe = /^(enter|update|merge|exit|showDetails|highlight)(:transition)?$/;

	/**
	 * Create a layer using the provided `base`. The layer instance is *not*
	 * exposed to d3.chart users. Instead, its instance methods are mixed in to the
	 * `base` selection it describes; users interact with the instance via these
	 * bound methods.
	 *
	 * @private
	 * @constructor
	 *
	 * @param {d3.selection} base The containing DOM node for the layer.
	 */
	var Layer = function(base) {
		d3cAssert(base, "Layers must be initialized with a base.");
		this._base = base;
		this._handlers = {};
	};

	/**
	 * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This
	 * implementation is "virtual"--it *must* be overridden by Layer instances.
	 *
	 * @param {Array} data Value passed to {@link Layer#draw}
	 */
	Layer.prototype.dataBind = function() {
		d3cAssert(false, "Layers must specify a `dataBind` method.");
	};

	/**
	 * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this
	 * layer's `base`. This implementation is "virtual"--it *must* be overridden by
	 * Layer instances.
	 */
	Layer.prototype.insert = function() {
		d3cAssert(false, "Layers must specify an `insert` method.");
	};

	Layer.prototype.over = function(params) {};
	Layer.prototype.out = function(params) {};
	Layer.prototype.highlight = function(params) {};

	/**
	 * Subscribe a handler to a "lifecycle event". These events (and only these
	 * events) are triggered when {@link Layer#draw} is invoked--see that method
	 * for more details on lifecycle events.
	 *
	 * @param {String} eventName Identifier for the lifecycle event for which to
	 *        subscribe.
	 * @param {Function} handler Callback function
	 *
	 * @returns {d3.selection} Reference to the layer's base.
	 */
	Layer.prototype.on = function(eventName, handler, options) {
		options = options || {};

		d3cAssert(
			lifecycleRe.test(eventName),
			"Unrecognized lifecycle event name specified to `Layer#on`: '" +
			eventName + "'."
		);

		if (!(eventName in this._handlers)) {
			this._handlers[eventName] = [];
		}
		this._handlers[eventName].push({
			callback: handler,
			chart: options.chart || null
		});
		return this._base;
	};

	Layer.prototype.trigger = function() {};

	/**
	 * Unsubscribe the specified handler from the specified event. If no handler is
	 * supplied, remove *all* handlers from the event.
	 *
	 * @param {String} eventName Identifier for event from which to remove
	 *        unsubscribe
	 * @param {Function} handler Callback to remove from the specified event
	 *
	 * @returns {d3.selection} Reference to the layer's base.
	 */
	Layer.prototype.off = function(eventName, handler) {

		var handlers = this._handlers[eventName];
		var idx;

		d3cAssert(
			lifecycleRe.test(eventName),
			"Unrecognized lifecycle event name specified to `Layer#off`: '" +
			eventName + "'."
		);

		if (!handlers) {
			return this._base;
		}

		if (arguments.length === 1) {
			handlers.length = 0;
			return this._base;
		}

		for (idx = handlers.length - 1; idx > -1; --idx) {
			if (handlers[idx].callback === handler) {
				handlers.splice(idx, 1);
			}
		}
		return this._base;
	};

	/**
	 * Render the layer according to the input data: Bind the data to the layer
	 * (according to {@link Layer#dataBind}, insert new elements (according to
	 * {@link Layer#insert}, make lifecycle selections, and invoke all relevant
	 * handlers (as attached via {@link Layer#on}) with the lifecycle selections.
	 *
	 * - update
	 * - update:transition
	 * - enter
	 * - enter:transition
	 * - exit
	 * - exit:transition
	 *
	 * @param {Array} data Data to drive the rendering.
	 */
	Layer.prototype.draw = function(data) {
		var bound, entering, events, selection, handlers, eventName, idx, len;

		bound = this.dataBind.call(this._base, data);

		// Although `bound instanceof d3.selection` is more explicit, it fails
		// in IE8, so we use duck typing to maintain compatability.
		d3cAssert(bound && bound.call === d3.selection.prototype.call,
			"Invalid selection defined by `Layer#dataBind` method.");
		d3cAssert(bound.enter, "Layer selection not properly bound.");

		entering = bound.enter();
		entering._chart = this._base._chart;

		events = [{
			name: "update",
			selection: bound
		}, {
			name: "enter",
			// Defer invocation of the `insert` method so that the previous
			// `update` selection does not contain the new nodes.
			selection: this.insert.bind(entering)
		}, {
			name: "merge",
			// This selection will be modified when the previous selection
			// is made.
			selection: bound
		}, {
			name: "exit",
			selection: bound.exit.bind(bound)
		}];

		for (var i = 0, l = events.length; i < l; ++i) {
			eventName = events[i].name;
			selection = events[i].selection;

			// Some lifecycle selections are expressed as functions so that
			// they may be delayed.
			if (typeof selection === "function") {
				selection = selection();
			}

			if (selection.empty()) {
				continue;
			}

			// Although `selection instanceof d3.selection` is more explicit,
			// it fails in IE8, so we use duck typing to maintain
			// compatability.
			d3cAssert(selection &&
				selection.call === d3.selection.prototype.call,
				"Invalid selection defined for '" + eventName +
				"' lifecycle event.");

			handlers = this._handlers[eventName];

			if (handlers) {
				for (idx = 0, len = handlers.length; idx < len; ++idx) {
					// Attach a reference to the parent chart so the selection"s
					// `chart` method will function correctly.
					selection._chart = handlers[idx].chart || this._base._chart;
					selection.call(handlers[idx].callback);
				}
			}

			handlers = this._handlers[eventName + ":transition"];

			if (handlers && handlers.length) {
				selection = selection.transition();
				for (idx = 0, len = handlers.length; idx < len; ++idx) {
					selection._chart = handlers[idx].chart || this._base._chart;
					selection.call(handlers[idx].callback);
				}
			}
		}
	};

	"use strict";

	/**
	 * Create a new layer on the d3 selection from which it is called.
	 *
	 * @static
	 *
	 * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer
	 *        constructor}
	 * @returns {d3.selection}
	 */
	d3.selection.prototype.layer = function(options) {
		var layer = new Layer(this);
		var eventName;

		// Set layer methods (required)
		layer.dataBind = options.dataBind;
		layer.insert = options.insert;

		layer.over = options.over;
		layer.out = options.out;
		layer.highlight = options.highlight;

		// Bind events (optional)
		if ("events" in options) {
			for (eventName in options.events) {
				layer.on(eventName, options.events[eventName]);
			}
		}

		// Mix the public methods into the D3.js selection (bound appropriately)
		this.on = function() {
			return layer.on.apply(layer, arguments);
		};
		this.off = function() {
			return layer.off.apply(layer, arguments);
		};
		this.draw = function() {
			return layer.draw.apply(layer, arguments);
		};


		this.over = function(params) {
			return layer.over.call(layer._base, params);
		};
		this.out = function(params) {
			return layer.out.call(layer._base, params);
		};
		this.highlight = function(params) {
			return layer.highlight.call(this.chart().base, params);
		};

		return this;
	};

	"use strict";

	// extend
	// Borrowed from Underscore.js
	function extend(object) {
		var argsIndex, argsLength, iteratee, key;
		if (!object) {
			return object;
		}
		argsLength = arguments.length;
		for (argsIndex = 1; argsIndex < argsLength; argsIndex++) {
			iteratee = arguments[argsIndex];
			if (iteratee) {
				for (key in iteratee) {
					object[key] = iteratee[key];
				}
			}
		}
		return object;
	}

	/**
	 * Call the {@Chart#initialize} method up the inheritance chain, starting with
	 * the base class and continuing "downward".
	 *
	 * @private
	 */
	var initCascade = function(instance, args) {
		var ctor = this.constructor;
		var sup = ctor.__super__;
		if (sup) {
			initCascade.call(sup, instance, args);
		}

		// Do not invoke the `initialize` method on classes further up the
		// prototype chain (again).
		if (hasOwnProp.call(ctor.prototype, "initialize")) {
			this.initialize.apply(instance, args);
		}
	};

	/**
	 * Call the `transform` method down the inheritance chain, starting with the
	 * instance and continuing "upward". The result of each transformation should
	 * be supplied as input to the next.
	 *
	 * @private
	 */
	var transformCascade = function(instance, data) {
		var ctor = this.constructor;
		var sup = ctor.__super__;

		// Unlike `initialize`, the `transform` method has significance when
		// attached directly to a chart instance. Ensure that this transform takes
		// first but is not invoked on later recursions.
		if (this === instance && hasOwnProp.call(this, "transform")) {
			data = this.transform(data);
		}

		// Do not invoke the `transform` method on classes further up the prototype
		// chain (yet).
		if (hasOwnProp.call(ctor.prototype, "transform")) {
			data = ctor.prototype.transform.call(instance, data);
		}

		if (sup) {
			data = transformCascade.call(sup, instance, data);
		}

		return data;
	};

	/**
	 * Create a d3.chart
	 *
	 * @param {d3.selection} selection The chart's "base" DOM node. This should
	 *        contain any nodes that the chart generates.
	 * @param {mixed} chartOptions A value for controlling how the chart should be
	 *        created. This value will be forwarded to {@link Chart#initialize}, so
	 *        charts may define additional properties for consumers to modify their
	 *        behavior during initialization.
	 *
	 * @constructor
	 */
	var Chart = function(selection, chartOptions) {

		this.base = selection;
		this._layers = {};
		this._attached = {};
		this._events = {};

		if (chartOptions && chartOptions.transform) {
			this.transform = chartOptions.transform;
		}

		initCascade.call(this, this, [chartOptions]);
	};

	/**
	 * Set up a chart instance. This method is intended to be overridden by Charts
	 * authored with this library. It will be invoked with a single argument: the
	 * `options` value supplied to the {@link Chart|constructor}.
	 *
	 * For charts that are defined as extensions of other charts using
	 * `Chart.extend`, each chart's `initilize` method will be invoked starting
	 * with the "oldest" ancestor (see the private {@link initCascade} function for
	 * more details).
	 */
	Chart.prototype.initialize = function() {};

	/**
	 * Remove a layer from the chart.
	 *
	 * @param {String} name The name of the layer to remove.
	 *
	 * @returns {Layer} The layer removed by this operation.
	 */
	Chart.prototype.unlayer = function(name) {
		var layer = this.layer(name);

		delete this._layers[name];
		delete layer._chart;

		return layer;
	};

	/**
	 * Interact with the chart's {@link Layer|layers}.
	 *
	 * If only a `name` is provided, simply return the layer registered to that
	 * name (if any).
	 *
	 * If a `name` and `selection` are provided, treat the `selection` as a
	 * previously-created layer and attach it to the chart with the specified
	 * `name`.
	 *
	 * If all three arguments are specified, initialize a new {@link Layer} using
	 * the specified `selection` as a base passing along the specified `options`.
	 *
	 * The {@link Layer.draw} method of attached layers will be invoked
	 * whenever this chart's {@link Chart#draw} is invoked and will receive the
	 * data (optionally modified by the chart's {@link Chart#transform} method.
	 *
	 * @param {String} name Name of the layer to attach or retrieve.
	 * @param {d3.selection|Layer} [selection] The layer's base or a
	 *        previously-created {@link Layer}.
	 * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer
	 *        constructor}
	 *
	 * @returns {Layer}
	 */
	Chart.prototype.layer = function(name, selection, options) {
		var layer;

		if (arguments.length === 1) {
			return this._layers[name];
		}

		// we are reattaching a previous layer, which the
		// selection argument is now set to.
		if (arguments.length === 2) {

			if (typeof selection.draw === "function") {
				selection._chart = this;
				this._layers[name] = selection;
				return this._layers[name];

			} else {
				d3cAssert(false, "When reattaching a layer, the second argument " +
					"must be a d3.chart layer");
			}
		}

		layer = selection.layer(options);

		this._layers[name] = layer;

		selection._chart = this;

		return layer;
	};

	/**
	 * Register or retrieve an "attachment" Chart. The "attachment" chart's `draw`
	 * method will be invoked whenever the containing chart's `draw` method is
	 * invoked.
	 *
	 * @param {String} attachmentName Name of the attachment
	 * @param {Chart} [chart] d3.chart to register as a mix in of this chart. When
	 *        unspecified, this method will return the attachment previously
	 *        registered with the specified `attachmentName` (if any).
	 *
	 * @returns {Chart} Reference to this chart (chainable).
	 */
	Chart.prototype.attach = function(attachmentName, chart) {
		if (arguments.length === 1) {
			return this._attached[attachmentName];
		}

		this._attached[attachmentName] = chart;
		return chart;
	};

	/**
	 * Update the chart's representation in the DOM, drawing all of its layers and
	 * any "attachment" charts (as attached via {@link Chart#attach}).
	 *
	 * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of
	 *        this cart's {@link Layer|layers} (if any) and the {@link
	 *        Chart#draw|draw method} of this chart's attachments (if any).
	 */
	Chart.prototype.draw = function(data) {

		var layerName, attachmentName, attachmentData;

		data = transformCascade.call(this, this, data);

		for (layerName in this._layers) {
			this._layers[layerName].draw(data);
		}

		for (attachmentName in this._attached) {
			if (this.demux) {
				attachmentData = this.demux(attachmentName, data);
			} else {
				attachmentData = data;
			}
			this._attached[attachmentName].draw(attachmentData);
		}
	};

	/**
	 * Function invoked with the context specified when the handler was bound (via
	 * {@link Chart#on} {@link Chart#once}).
	 *
	 * @callback ChartEventHandler
	 * @param {...*} arguments Invoked with the arguments passed to {@link
	 *         Chart#trigger}
	 */

	/**
	 * Subscribe a callback function to an event triggered on the chart. See {@link
	 * Chart#once} to subscribe a callback function to an event for one occurence.
	 *
	 * @param {String} name Name of the event
	 * @param {ChartEventHandler} callback Function to be invoked when the event
	 *        occurs
	 * @param {Object} [context] Value to set as `this` when invoking the
	 *        `callback`. Defaults to the chart instance.
	 *
	 * @returns {Chart} A reference to this chart (chainable).
	 */
	Chart.prototype.on = function(name, callback, context) {
		var events = this._events[name] || (this._events[name] = []);
		events.push({
			callback: callback,
			context: context || this,
			_chart: this
		});
		return this;
	};

	/**
	 * Subscribe a callback function to an event triggered on the chart. This
	 * function will be invoked at the next occurance of the event and immediately
	 * unsubscribed. See {@link Chart#on} to subscribe a callback function to an
	 * event indefinitely.
	 *
	 * @param {String} name Name of the event
	 * @param {ChartEventHandler} callback Function to be invoked when the event
	 *        occurs
	 * @param {Object} [context] Value to set as `this` when invoking the
	 *        `callback`. Defaults to the chart instance
	 *
	 * @returns {Chart} A reference to this chart (chainable)
	 */
	Chart.prototype.once = function(name, callback, context) {
		var self = this;
		var once = function() {
			self.off(name, once);
			callback.apply(this, arguments);
		};
		return this.on(name, once, context);
	};

	/**
	 * Unsubscribe one or more callback functions from an event triggered on the
	 * chart. When no arguments are specified, *all* handlers will be unsubscribed.
	 * When only a `name` is specified, all handlers subscribed to that event will
	 * be unsubscribed. When a `name` and `callback` are specified, only that
	 * function will be unsubscribed from that event. When a `name` and `context`
	 * are specified (but `callback` is omitted), all events bound to the given
	 * event with the given context will be unsubscribed.
	 *
	 * @param {String} [name] Name of the event to be unsubscribed
	 * @param {ChartEventHandler} [callback] Function to be unsubscribed
	 * @param {Object} [context] Contexts to be unsubscribe
	 *
	 * @returns {Chart} A reference to this chart (chainable).
	 */
	Chart.prototype.off = function(name, callback, context) {
		var names, n, events, event, i, j;

		// remove all events
		if (arguments.length === 0) {
			for (name in this._events) {
				this._events[name].length = 0;
			}
			return this;
		}

		// remove all events for a specific name
		if (arguments.length === 1) {
			events = this._events[name];
			if (events) {
				events.length = 0;
			}
			return this;
		}

		// remove all events that match whatever combination of name, context
		// and callback.
		names = name ? [name] : Object.keys(this._events);
		for (i = 0; i < names.length; i++) {
			n = names[i];
			events = this._events[n];
			j = events.length;
			while (j--) {
				event = events[j];
				if ((callback && callback === event.callback) ||
					(context && context === event.context)) {
					events.splice(j, 1);
				}
			}
		}

		return this;
	};

	/**
	 * Publish an event on this chart with the given `name`.
	 *
	 * @param {String} name Name of the event to publish
	 * @param {...*} arguments Values with which to invoke the registered
	 *        callbacks.
	 *
	 * @returns {Chart} A reference to this chart (chainable).
	 */
	Chart.prototype.trigger = function(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var events = this._events[name];
		var i, ev;

		if (events !== undefined) {
			for (i = 0; i < events.length; i++) {
				ev = events[i];
				ev.callback.apply(ev.context, args);
			}
		}

		return this;
	};

	/**
	 * Create a new {@link Chart} constructor with the provided options acting as
	 * "overrides" for the default chart instance methods. Allows for basic
	 * inheritance so that new chart constructors may be defined in terms of
	 * existing chart constructors. Based on the `extend` function defined by
	 * {@link http://backbonejs.org/|Backbone.js}.
	 *
	 * @static
	 *
	 * @param {String} name Identifier for the new Chart constructor.
	 * @param {Object} protoProps Properties to set on the new chart's prototype.
	 * @param {Object} staticProps Properties to set on the chart constructor
	 *        itself.
	 *
	 * @returns {Function} A new Chart constructor
	 */
	Chart.extend = function(name, protoProps, staticProps) {
		var parent = this;
		var child;

		// The constructor function for the new subclass is either defined by
		// you (the "constructor" property in your `extend` definition), or
		// defaulted by us to simply call the parent's constructor.
		if (protoProps && hasOwnProp.call(protoProps, "constructor")) {
			child = protoProps.constructor;
		} else {
			child = function() {
				return parent.apply(this, arguments);
			};
		}

		// Add static properties to the constructor function, if supplied.
		extend(child, parent, staticProps);

		// Set the prototype chain to inherit from `parent`, without calling
		// `parent`'s constructor function.
		var Surrogate = function() {
			this.constructor = child;
		};
		Surrogate.prototype = parent.prototype;
		child.prototype = new Surrogate();

		// Add prototype properties (instance properties) to the subclass, if
		// supplied.
		if (protoProps) {
			extend(child.prototype, protoProps);
		}

		// Set a convenience property in case the parent's prototype is needed
		// later.
		child.__super__ = parent.prototype;

		Chart[name] = child;
		return child;
	};

	"use strict";

	/**
	 * Create a new chart constructor or return a previously-created chart
	 * constructor.
	 *
	 * @static
	 *
	 * @param {String} name If no other arguments are specified, return the
	 *        previously-created chart with this name.
	 * @param {Object} protoProps If specified, this value will be forwarded to
	 *        {@link Chart.extend} and used to create a new chart.
	 * @param {Object} staticProps If specified, this value will be forwarded to
	 *        {@link Chart.extend} and used to create a new chart.
	 */
	d3.chart = function(name) {
		if (arguments.length === 0) {
			return Chart;
		} else if (arguments.length === 1) {
			return Chart[name];
		}

		return Chart.extend.apply(Chart, arguments);
	};

	/**
	 * Instantiate a chart or return the chart that the current selection belongs
	 * to.
	 *
	 * @static
	 *
	 * @param {String} [chartName] The name of the chart to instantiate. If the
	 *        name is unspecified, this method will return the chart that the
	 *        current selection belongs to.
	 * @param {mixed} options The options to use when instantiated the new chart.
	 *        See {@link Chart} for more information.
	 */
	d3.selection.prototype.chart = function(chartName, options) {
		// Without an argument, attempt to resolve the current selection's
		// containing d3.chart.
		if (arguments.length === 0) {
			return this._chart;
		}
		var ChartCtor = Chart[chartName];
		d3cAssert(ChartCtor, "No chart registered with name '" + chartName + "'");

		return new ChartCtor(this, options);
	};

	// Implement the zero-argument signature of `d3.selection.prototype.chart`
	// for all selection types.
	d3.selection.enter.prototype.chart = function() {
		return this._chart;
	};
	d3.transition.prototype.chart = d3.selection.enter.prototype.chart;

	// })(this);

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	 var d3tip = function() {

	   var direction = d3_tip_direction,
	     offset = d3_tip_offset,
	     html = d3_tip_html,
	     node = initNode(),
	     svg = null,
	     point = null,
	     target = null

	   function tip(vis) {
	     svg = getSVGNode(vis)
	     point = svg.createSVGPoint()
	     document.body.appendChild(node)
	   }

	   // Public - show the tooltip on the screen
	   //
	   // Returns a tip
	   tip.show = function() {
	     var args = Array.prototype.slice.call(arguments)
	     if (args[args.length - 1] instanceof SVGElement) target = args.pop()

	     var content = html.apply(this, args),
	       poffset = offset.apply(this, args),
	       dir = direction.apply(this, args),
	       nodel = d3.select(node),
	       i = directions.length,
	       coords,
	       scrollTop = document.documentElement.scrollTop || document.body.scrollTop,
	       scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft

	     nodel.html(content)
	       .style({
	         opacity: 1,
	         'pointer-events': 'all'
	       })

	     while (i--) nodel.classed(directions[i], false)
	     coords = direction_callbacks.get(dir).apply(this)
	     nodel.classed(dir, true).style({
	       top: (coords.top + poffset[0]) + scrollTop + 'px',
	       left: (coords.left + poffset[1]) + scrollLeft + 'px'
	     })

	     return tip
	   }

	   // Public - hide the tooltip
	   //
	   // Returns a tip
	   tip.hide = function() {
	     var nodel = d3.select(node)
	     nodel.style({
	       opacity: 0,
	       'pointer-events': 'none'
	     })
	     return tip
	   }

	   // Public: Proxy attr calls to the d3 tip container.  Sets or gets attribute value.
	   //
	   // n - name of the attribute
	   // v - value of the attribute
	   //
	   // Returns tip or attribute value
	   tip.attr = function(n, v) {
	     if (arguments.length < 2 && typeof n === 'string') {
	       return d3.select(node).attr(n)
	     } else {
	       var args = Array.prototype.slice.call(arguments)
	       d3.selection.prototype.attr.apply(d3.select(node), args)
	     }

	     return tip
	   }

	   // Public: Proxy style calls to the d3 tip container.  Sets or gets a style value.
	   //
	   // n - name of the property
	   // v - value of the property
	   //
	   // Returns tip or style property value
	   tip.style = function(n, v) {
	     if (arguments.length < 2 && typeof n === 'string') {
	       return d3.select(node).style(n)
	     } else {
	       var args = Array.prototype.slice.call(arguments)
	       d3.selection.prototype.style.apply(d3.select(node), args)
	     }

	     return tip
	   }

	   // Public: Set or get the direction of the tooltip
	   //
	   // v - One of n(north), s(south), e(east), or w(west), nw(northwest),
	   //     sw(southwest), ne(northeast) or se(southeast)
	   //
	   // Returns tip or direction
	   tip.direction = function(v) {
	     if (!arguments.length) return direction
	     direction = v == null ? v : d3.functor(v)

	     return tip
	   }

	   // Public: Sets or gets the offset of the tip
	   //
	   // v - Array of [x, y] offset
	   //
	   // Returns offset or
	   tip.offset = function(v) {
	     if (!arguments.length) return offset
	     offset = v == null ? v : d3.functor(v)

	     return tip
	   }

	   // Public: sets or gets the html value of the tooltip
	   //
	   // v - String value of the tip
	   //
	   // Returns html value or tip
	   tip.html = function(v) {
	     if (!arguments.length) return html
	     html = v == null ? v : d3.functor(v)

	     return tip
	   }

	   function d3_tip_direction() {
	     return 'n'
	   }

	   function d3_tip_offset() {
	     return [0, 0]
	   }

	   function d3_tip_html() {
	     return ' '
	   }

	   var direction_callbacks = d3.map({
	       n: direction_n,
	       s: direction_s,
	       e: direction_e,
	       w: direction_w,
	       nw: direction_nw,
	       ne: direction_ne,
	       sw: direction_sw,
	       se: direction_se
	     }),
	     directions = direction_callbacks.keys()

	   function direction_n() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.n.y - node.offsetHeight,
	       left: bbox.n.x - node.offsetWidth / 2
	     }
	   }

	   function direction_s() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.s.y,
	       left: bbox.s.x - node.offsetWidth / 2
	     }
	   }

	   function direction_e() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.e.y - node.offsetHeight / 2,
	       left: bbox.e.x
	     }
	   }

	   function direction_w() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.w.y - node.offsetHeight / 2,
	       left: bbox.w.x - node.offsetWidth
	     }
	   }

	   function direction_nw() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.nw.y - node.offsetHeight,
	       left: bbox.nw.x - node.offsetWidth
	     }
	   }

	   function direction_ne() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.ne.y - node.offsetHeight,
	       left: bbox.ne.x
	     }
	   }

	   function direction_sw() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.sw.y,
	       left: bbox.sw.x - node.offsetWidth
	     }
	   }

	   function direction_se() {
	     var bbox = getScreenBBox()
	     return {
	       top: bbox.se.y,
	       left: bbox.e.x
	     }
	   }

	   function initNode() {
	     var node = d3.select(document.createElement('div'))
	     node.style({
	       position: 'absolute',
	       top: 0,
	       opacity: 0,
	       'pointer-events': 'none',
	       'box-sizing': 'border-box'
	     })

	     return node.node()
	   }

	   function getSVGNode(el) {
	     el = el.node()
	     if (el.tagName.toLowerCase() === 'svg')
	       return el

	     return el.ownerSVGElement
	   }

	   // Private - gets the screen coordinates of a shape
	   //
	   // Given a shape on the screen, will return an SVGPoint for the directions
	   // n(north), s(south), e(east), w(west), ne(northeast), se(southeast), nw(northwest),
	   // sw(southwest).
	   //
	   //    +-+-+
	   //    |   |
	   //    +   +
	   //    |   |
	   //    +-+-+
	   //
	   // Returns an Object {n, s, e, w, nw, sw, ne, se}
	   function getScreenBBox() {
	     var targetel = target || d3.event.target,
	       bbox = {},
	       matrix = targetel.getScreenCTM(),
	       tbbox = targetel.getBBox(),
	       width = tbbox.width,
	       height = tbbox.height,
	       x = tbbox.x,
	       y = tbbox.y

	     point.x = x
	     point.y = y
	     bbox.nw = point.matrixTransform(matrix)
	     point.x += width
	     bbox.ne = point.matrixTransform(matrix)
	     point.y += height
	     bbox.se = point.matrixTransform(matrix)
	     point.x -= width
	     bbox.sw = point.matrixTransform(matrix)
	     point.y -= height / 2
	     bbox.w = point.matrixTransform(matrix)
	     point.x += width
	     bbox.e = point.matrixTransform(matrix)
	     point.x -= width / 2
	     point.y -= height / 2
	     bbox.n = point.matrixTransform(matrix)
	     point.y += height
	     bbox.s = point.matrixTransform(matrix)

	     return bbox
	   }

	   return tip;
	 };

	 module.exports = d3tip;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	@module ChartEngine
	@submodule Formatter
	@class Formatter
	*/

	var ValueFormatter = __webpack_require__(60);
	var TimeFormatter = __webpack_require__(61);

	var Formatter = function() {};

	Formatter.prototype.format = function(value, formatter) {
		var formattedValue = value;
		switch (formatter) {
			case 'ValueFormatter':
				formattedValue = value;
				break;
			case 'ShortValueFormatter':
				formattedValue = ValueFormatter.formatShort(value);
				break;
			case 'PercentFormatter':
				formattedValue = ValueFormatter.formatPercent(value);
				break;
			case 'ShortMonthFormatter':
				formattedValue = TimeFormatter.formatMonthShort(value);
				break;
			case 'MediumMonthFormatter':
				formattedValue = TimeFormatter.formatMonthMedium(value);
				break;
			case 'MonthFormatter':
				formattedValue = TimeFormatter.formatMonth(value);
				break;
		}
		return formattedValue;
	};

	module.exports = new Formatter();

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/**
	@module ChartEngine
	@submodule Chart
	@class QuantitativeAxisChart
	*/
	__webpack_require__(5);

	var AbstractChart = __webpack_require__(13);
	var Formatter = __webpack_require__(26);

	var QuantitativeAxisChart = d3.chart('AbstractChart').extend('QuantitativeAxisChart', {

		zones: {
			ticks: {
				width: {
					start: 0,
					end: 1
				},
				height: {
					start: 0,
					end: 1
				}
			}
		},

		initialize: function(options) {
			var chart = this;
			this.options = options;

			this.base.classed('quantitativeAxisChart', true);

			this.axis = d3.svg
				.axis()
				.scale(this.options.scale)
				.orient(this.options.orientation)
				.tickFormat(function(point) {
					return Formatter.format(point, chart.options.formatter);
				});

			var zone = this.zones.ticks;

			var computeTransform = function() {
				var x = 0,
					y = 0;
				switch (chart.options.orientation) {
					case 'left':
						x = zone.width.end * chart.width();
						y = 0;
						break;
					case 'right':
						x = zone.width.start * chart.width();
						y = 0;
						break;
					case 'top':
						x = 0;
						y = zone.height.end * chart.height();
						break;
					case 'bottom':
						x = 0;
						y = zone.height.start * chart.height();
						break;
					default:
				}
				return 'translate(' + x + ',' + y + ')';
			};

			chart.axisInstance = zone.anchor
				.attr("class", "quantitative_axis")
				.attr('transform', computeTransform);

			chart.on('resize', function() {
				chart.axisInstance.attr('transform', computeTransform);
			});

			chart.backgroundNegativeArea = this.base
				.insert('rect', '.quantitative_axis')
				.classed('negativeArea', true);
		},

		addGrid: function() {
			var chart = this;

			var putZeroClass = function(value, i, j) {
				return value == 0;
			};

			var putGridLineClass = function(value, i, j) {
				return chart.options.grid || value == 0;
			};

			switch (chart.options.orientation) {
				case 'left':
					this.base
						.selectAll('g.tick line')
						.classed("grid-line", putGridLineClass)
						.classed("zero", putZeroClass)
						.attr("x1", 0)
						.attr("y1", 0)
						.attr("x2", this.params.parent.width() * this.params.parent.zones.linearXAxis.width.end)
						.attr("y2", 0);
					break;
				case 'right':
					break;
				case 'top':
					break;
				case 'bottom':
					this.base
						.selectAll('g.tick line')
						.classed("grid-line", putGridLineClass)
						.classed("zero", putZeroClass)
						.attr("x1", 0)
						.attr("y1", this.params.parent.height() * this.params.parent.zones.ordinalYAxis.height.start)
						.attr("x2", 0)
						.attr("y2", this.params.parent.height() * this.params.parent.zones.ordinalYAxis.height.end);
					break;
				default:
			}
		},

		placeNegativeArea: function(points) {
			var chart = this;
			var minValue = d3.min(chart.options.scale.domain());

			if (minValue < 0) {
				this.backgroundNegativeArea
					.attr('x', function() {
						return chart.params.parent.width() * chart.params.parent.zones.linearXAxis.width.start;
					})
					.attr('y', function() {
						return chart.params.parent.height() * chart.params.parent.zones.ordinalYAxis.height.start;
					})
					.attr('width', function() {
						return chart.options.scale(0) - chart.options.scale(minValue);
					})
					.attr('height', function() {
						return chart.params.parent.height() * chart.params.parent.zones.ordinalYAxis.height.end - chart.params.parent.height() * chart.params.parent.zones.ordinalYAxis.height.start;
					});
			}
		},

		transform: function(points) {
			var chart = this;
			// this.axis.tickValues(_.union(d3.extent(points, function(point) {
			// 	return point.value;
			// }), [0]))
			this.axisInstance.call(this.axis);
			this.addGrid();
			this.placeNegativeArea(points);
			return points;
		}

	});

	module.exports = QuantitativeAxisChart;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/**
	@module ChartEngine
	@submodule Chart
	@class OrdinalAxisChart
	*/
	__webpack_require__(5);

	var AbstractChart = __webpack_require__(13);
	var Formatter = __webpack_require__(26);

	var OrdinalAxisChart = d3.chart('AbstractChart').extend('OrdinalAxisChart', {

		zones: {
			ticks: {
				width: {
					start: 0,
					end: 1
				},
				height: {
					start: 0,
					end: 1
				}
			}
		},

		initialize: function(options) {
			var chart = this;
			this.options = options;

			this.axis = d3.svg
				.axis()
				.scale(this.options.scale)
				.orient(this.options.orientation);

			var zone = this.zones.ticks;

			var computeTransform = function() {
				var x = 0,
					y = 0;
				switch (chart.options.orientation) {
					case 'left':
						x = zone.width.end * chart.width();
						y = 0;
						break;
					case 'right':
						x = zone.width.start * chart.width();
						y = 0;
						break;
					case 'top':
						x = 0;
						y = zone.height.end * chart.height();
						break;
					case 'bottom':
						x = 0;
						y = zone.height.start * chart.height();
						break;
					default:
				}
				return 'translate(' + x + ',' + y + ')';
			};

			chart.axisInstance = zone.anchor
				.attr("class", "ordinal_axis")
				.attr('transform', computeTransform);
			chart.on('resize', function() {
				chart.axisInstance.attr('transform', computeTransform);
			});
		},

		transform: function(data) {
			this.axisInstance.call(this.axis);
			return data;
		}

	});

	module.exports = OrdinalAxisChart;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	@module ChartEngine
	@submodule Chart
	@class OrdinalLinearAxisChart
	*/
	__webpack_require__(5);

	var AbstractChart = __webpack_require__(13);
	var OrdinalLegendLabelLayer = __webpack_require__(66);

	function getXYFromTranslate(element) {
		var split = element.attr("transform").split(",");
		var x = ~~split[0].split("(")[1];
		var y = ~~split[1].split(")")[0];
		return [x, y];
	}

	var OrdinalLegendChart = d3.chart('AbstractChart').extend('OrdinalLegendChart', {

		initialize: function(options) {
			var chart = this;
			this.options = options;

			this.ordinalLegendLabelLayer = this.base
				.append('g')
				.classed('ordinalLegendLabelLayer', true);
			this.ordinalLegendLabelLayerInstance = this.layer('ordinalLegendLabelLayer', this.ordinalLegendLabelLayer, OrdinalLegendLabelLayer);
		},

		transform: function(data) {
			this.base.attr('transform', 'translate(0,' + getXYFromTranslate(this.base)[1] + ')');
			return data;
		}

	});

	module.exports = OrdinalLegendChart;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.4.12"
	  };
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
	  try {
	    d3_array(d3_documentElement.childNodes)[0].nodeType;
	  } catch (e) {
	    d3_array = function(list) {
	      var i = list.length, array = new Array(i);
	      while (i--) array[i] = list[i];
	      return array;
	    };
	  }
	  try {
	    d3_document.createElement("div").style.setProperty("opacity", 0, "");
	  } catch (error) {
	    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	    d3_element_prototype.setAttribute = function(name, value) {
	      d3_element_setAttribute.call(this, name, value + "");
	    };
	    d3_element_prototype.setAttributeNS = function(space, local, value) {
	      d3_element_setAttributeNS.call(this, space, local, value + "");
	    };
	    d3_style_prototype.setProperty = function(name, value, priority) {
	      d3_style_setProperty.call(this, name, value + "", priority);
	    };
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (!isNaN(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  function d3_number(x) {
	    return x != null && !isNaN(x);
	  }
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_number(a = array[i])) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) s += a; else --j;
	    }
	    return j ? s / j : undefined;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    if (arguments.length > 1) array = array.map(f);
	    array = array.filter(d3_number);
	    return array.length ? d3.quantile(array.sort(d3_ascending), .5) : undefined;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array) {
	    var m = array.length, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m], array[m] = array[i], array[i] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.zip = function() {
	    if (!(n = arguments.length)) return [];
	    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
	      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
	        zip[j] = arguments[j][i];
	      }
	    }
	    return zips;
	  };
	  function d3_zipLength(d) {
	    return d.length;
	  }
	  d3.transpose = function(matrix) {
	    return d3.zip.apply(d3, matrix);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    try {
	      for (var key in properties) {
	        Object.defineProperty(ctor.prototype, key, {
	          value: properties[key],
	          enumerable: false
	        });
	      }
	    } catch (e) {
	      ctor.prototype = properties;
	    }
	  }
	  d3.map = function(object) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) object.forEach(function(key, value) {
	      map.set(key, value);
	    }); else for (var key in object) map.set(key, object[key]);
	    return map;
	  };
	  function d3_Map() {}
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this[d3_map_prefix + key];
	    },
	    set: function(key, value) {
	      return this[d3_map_prefix + key] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      this.forEach(function(key, value) {
	        values.push(value);
	      });
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      this.forEach(function(key, value) {
	        entries.push({
	          key: key,
	          value: value
	        });
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) f.call(this, key.slice(1), this[key]);
	    }
	  });
	  var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
	  function d3_map_has(key) {
	    return d3_map_prefix + key in this;
	  }
	  function d3_map_remove(key) {
	    key = d3_map_prefix + key;
	    return key in this && delete this[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    this.forEach(function(key) {
	      keys.push(key);
	    });
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {}
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(value) {
	      this[d3_map_prefix + value] = true;
	      return value;
	    },
	    remove: function(value) {
	      value = d3_map_prefix + value;
	      return value in this && delete this[value];
	    },
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var value in this) if (value.charCodeAt(0) === d3_map_prefixCode) f.call(this, value.slice(1));
	    }
	  });
	  d3.behavior = {};
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
	    return d3_selectMatcher.call(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3_selectionRoot;
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: "http://www.w3.org/1999/xhtml",
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0) {
	        prefix = name.slice(0, i);
	        name = name.slice(i + 1);
	      }
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    } : function() {
	      return this.ownerDocument.createElementNS(this.namespaceURI, name);
	    };
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(function() {
	      var parent = this.parentNode;
	      if (parent) parent.removeChild(this);
	    });
	  };
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
	        for (i = -1; ++i < n; ) {
	          keyValue = key.call(node = group[i], node.__data__, i);
	          if (nodeByKeyValue.has(keyValue)) {
	            exitNodes[i] = node;
	          } else {
	            nodeByKeyValue.set(keyValue, node);
	          }
	          keyValues.push(keyValue);
	        }
	        for (i = -1; ++i < m; ) {
	          keyValue = key.call(groupData, nodeData = groupData[i], i);
	          if (node = nodeByKeyValue.get(keyValue)) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          } else if (!dataByKeyValue.has(keyValue)) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	          dataByKeyValue.set(keyValue, nodeData);
	          nodeByKeyValue.remove(keyValue);
	        }
	        for (i = -1; ++i < n; ) {
	          if (nodeByKeyValue.has(keyValues[i])) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3_selectionPrototype.transition = function() {
	    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_selectionPrototype.interrupt = function() {
	    return this.each(d3_selection_interrupt);
	  };
	  function d3_selection_interrupt() {
	    var lock = this.__transition__;
	    if (lock) ++lock.active;
	  }
	  d3.select = function(node) {
	    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
	    group.parentNode = d3_documentElement;
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
	    group.parentNode = d3_documentElement;
	    return d3_selection([ group ]);
	  };
	  var d3_selectionRoot = d3.select(d3_documentElement);
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  d3_selection_onFilters.forEach(function(k) {
	    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	  });
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
	  function d3_event_dragSuppress() {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        function off() {
	          w.on(click, null);
	        }
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
	        svg = d3.select("body").append("svg").style({
	          position: "absolute",
	          top: 0,
	          left: 0,
	          margin: 0,
	          padding: 0,
	          border: "none"
	        }, "important");
	        var ctm = svg[0][0].getScreenCTM();
	        d3_mouse_bug44083 = !(ctm.f || ctm.e);
	        svg.remove();
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged && d3.event.target === target);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  function d3_behavior_dragTouchSubject() {
	    return d3.event.target;
	  }
	  function d3_behavior_dragMouseSubject() {
	    return d3_window;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
	    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
	    function interpolate(t) {
	      var s = t * S;
	      if (dr) {
	        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      }
	      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
	    }
	    interpolate.duration = S * 1e3;
	    return interpolate;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: +_
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      dispatch({
	        type: "zoomend"
	      });
	    }
	    function mousedowned() {
	      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged && d3.event.target === target);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress();
	      d3_selection_interrupt.call(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0], l = locations0[p.identifier];
	            scaleTo(view.k * 2);
	            translateTo(p, l);
	            d3_eventPreventDefault();
	            zoomed(dispatch);
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), 
	      d3_selection_interrupt.call(this), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
	      zoomstarted(dispatch);
	      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
	      translateTo(p, l);
	      zoomed(dispatch);
	      zoomended(dispatch);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ];
	  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	    return d3.event.wheelDelta;
	  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	    return -d3.event.detail;
	  }, "MozMousePixelScroll");
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/i.exec(format);
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  function d3_identity(d) {
	    return d;
	  }
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && !(a = f(a, n++))) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      f: false,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  };
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now();
	    d3_timer_active = d3_timer_queueHead;
	    while (d3_timer_active) {
	      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
	      d3_timer_active = d3_timer_active.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.f) {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      } else {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping ? function(value) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0];
	      while (g > 0 && i > 0) {
	        t.push(value.substring(i -= g, i + g));
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	        if (comma) width -= Math.floor((width - 1) / 4);
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : locale_decimal + value.substring(i + 1);
	        if (!zfill && comma) before = formatGroup(before);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = sx; else x2 = sx;
	        if (bottom) y1 = sy; else y2 = sy;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    b -= a = +a;
	    return function(t) {
	      return a + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
	    if (ta[0] != tb[0] || ta[1] != tb[1]) {
	      s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: 1,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: 3,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    } else {
	      s.push("");
	    }
	    if (ra != rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(s.pop() + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(s.pop() + "rotate(" + rb + ")");
	    }
	    if (wa != wb) {
	      q.push({
	        i: s.push(s.pop() + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(s.pop() + "skewX(" + wb + ")");
	    }
	    if (ka[0] != kb[0] || ka[1] != kb[1]) {
	      n = s.push(s.pop() + "scale(", null, ",", null, ")");
	      q.push({
	        i: n - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: n - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] != 1 || kb[1] != 1) {
	      s.push(s.pop() + "scale(" + kb + ")");
	    }
	    n = q.length;
	    return function(t) {
	      var i = -1, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = b - (a = +a) ? 1 / (b - a) : 0;
	    return function(x) {
	      return (x - a) * b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = b - (a = +a) ? 1 / (b - a) : 0;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) * b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: (x - x0) / k
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight / (t.weight + s.weight));
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) alpha = x; else alpha = 0;
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        d3.timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, m = candidates.length, x;
	        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
	    function pie(data) {
	      var values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      });
	      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
	      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
	      var index = d3.range(data.length);
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      var arcs = [];
	      index.forEach(function(i) {
	        var d;
	        arcs[i] = {
	          data: data[i],
	          value: d = values[i],
	          startAngle: a,
	          endAngle: a += d * k
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return pie;
	    };
	    pie.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return pie;
	    };
	    pie.startAngle = function(x) {
	      if (!arguments.length) return startAngle;
	      startAngle = x;
	      return pie;
	    };
	    pie.endAngle = function(x) {
	      if (!arguments.length) return endAngle;
	      endAngle = x;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var n = series.length, m = series[0].length, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = 0;
	      root.y = 0;
	      root.dx = size[0];
	      root.dy = size[1];
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
	      Math.floor), e;
	      return function(d) {
	        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
	      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
	      range = steps(start + Math.round(error / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.filter(d3_number).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function arc() {
	      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, 
	      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
	      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.join("L");
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return d3_svg_lineLinear(points) + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] + d3_svg_arcOffset;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  function d3_transition(groups, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection) {
	    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, id, node.__transition__[id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node.__transition__[id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id;
	    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node.__transition__[id].tween.remove(name);
	    } : function(node) {
	      node.__transition__[id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node.__transition__[id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    return this.each("end.transition", function() {
	      var p;
	      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node.__transition__[id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node.__transition__[id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id;
	    if (arguments.length < 1) return this.node().__transition__[id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node.__transition__[id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      d3_transitionInheritId = id;
	      d3_selection_each(this, function(node, i, j) {
	        d3_transitionInherit = node.__transition__[id];
	        type.call(node, node.__data__, i, j);
	      });
	      d3_transitionInherit = inherit;
	      d3_transitionInheritId = inheritId;
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node.__transition__[id];
	        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = Object.create(node.__transition__[id0]);
	          transition.delay += transition.duration;
	          d3_transitionNode(node, i, id1, transition);
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, id1);
	  };
	  function d3_transitionNode(node, i, id, inherit) {
	    var lock = node.__transition__ || (node.__transition__ = {
	      active: 0,
	      count: 0
	    }), transition = lock[id];
	    if (!transition) {
	      var time = inherit.time;
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        ease: inherit.ease,
	        delay: inherit.delay,
	        duration: inherit.duration
	      };
	      ++lock.count;
	      d3.timer(function(elapsed) {
	        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
	        timer.t = delay + time;
	        if (delay <= elapsed) return start(elapsed - delay);
	        timer.c = start;
	        function start(elapsed) {
	          if (lock.active > id) return stop();
	          lock.active = id;
	          transition.event && transition.event.start.call(node, d, i);
	          transition.tween.forEach(function(key, value) {
	            if (value = value.call(node, d, i)) {
	              tweened.push(value);
	            }
	          });
	          d3.timer(function() {
	            timer.c = tick(elapsed || 1) ? d3_true : tick;
	            return 1;
	          }, 0, time);
	        }
	        function tick(elapsed) {
	          if (lock.active !== id) return stop();
	          var t = elapsed / duration, e = ease(t), n = tweened.length;
	          while (n > 0) {
	            tweened[--n].call(node, e);
	          }
	          if (t >= 1) {
	            transition.event && transition.event.end.call(node, d, i);
	            return stop();
	          }
	        }
	        function stop() {
	          if (--lock.count) delete lock[id]; else delete node.__transition__;
	          return 1;
	        }
	      }, 0, time);
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
	        switch (orient) {
	         case "bottom":
	          {
	            tickTransform = d3_svg_axisX;
	            lineEnter.attr("y2", innerTickSize);
	            textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
	            lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
	            textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
	            text.attr("dy", ".71em").style("text-anchor", "middle");
	            pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
	            break;
	          }

	         case "top":
	          {
	            tickTransform = d3_svg_axisX;
	            lineEnter.attr("y2", -innerTickSize);
	            textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
	            lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
	            textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
	            text.attr("dy", "0em").style("text-anchor", "middle");
	            pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
	            break;
	          }

	         case "left":
	          {
	            tickTransform = d3_svg_axisY;
	            lineEnter.attr("x2", -innerTickSize);
	            textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
	            lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
	            textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
	            text.attr("dy", ".32em").style("text-anchor", "end");
	            pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
	            break;
	          }

	         case "right":
	          {
	            tickTransform = d3_svg_axisY;
	            lineEnter.attr("x2", innerTickSize);
	            textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
	            lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
	            textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
	            text.attr("dy", ".32em").style("text-anchor", "start");
	            pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
	            break;
	          }
	        }
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1);
	        }
	        tickEnter.call(tickTransform, scale0);
	        tickUpdate.call(tickTransform, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = arguments;
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x) {
	    selection.attr("transform", function(d) {
	      return "translate(" + x(d) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y) {
	    selection.attr("transform", function(d) {
	      return "translate(0," + y(d) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3;
	  this.d3 = d3;
	}();

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
	 * Build: `lodash underscore exports="amd,commonjs,global,node" -o ./dist/lodash.underscore.js`
	 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <http://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre ES5 environments */
	  var undefined;

	  /** Used to generate unique IDs */
	  var idCounter = 0;

	  /** Used internally to indicate various things */
	  var indicatorObject = {};

	  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
	  var keyPrefix = +new Date + '';

	  /** Used to match "interpolate" template delimiters */
	  var reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to ensure capturing order of template delimiters */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals */
	  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

	  /** `Object#toString` result shortcuts */
	  var argsClass = '[object Arguments]',
	      arrayClass = '[object Array]',
	      boolClass = '[object Boolean]',
	      dateClass = '[object Date]',
	      funcClass = '[object Function]',
	      numberClass = '[object Number]',
	      objectClass = '[object Object]',
	      regexpClass = '[object RegExp]',
	      stringClass = '[object String]';

	  /** Used to determine if values are of the language type Object */
	  var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	  };

	  /** Used to escape characters for inclusion in compiled string literals */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\t': 't',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;

	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect the popular CommonJS extension `module.exports` */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = objectTypes[typeof global] && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches
	   * or `fromIndex` constraints.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} [fromIndex=0] The index to search from.
	   * @returns {number} Returns the index of the matched value or `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    var index = (fromIndex || 0) - 1,
	        length = array ? array.length : 0;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
	   * them in ascending order.
	   *
	   * @private
	   * @param {Object} a The object to compare to `b`.
	   * @param {Object} b The object to compare to `a`.
	   * @returns {number} Returns the sort order indicator of `1` or `-1`.
	   */
	  function compareAscending(a, b) {
	    var ac = a.criteria,
	        bc = b.criteria,
	        index = -1,
	        length = ac.length;

	    while (++index < length) {
	      var value = ac[index],
	          other = bc[index];

	      if (value !== other) {
	        if (value > other || typeof value == 'undefined') {
	          return 1;
	        }
	        if (value < other || typeof other == 'undefined') {
	          return -1;
	        }
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to return the same value for
	    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See http://code.google.com/p/v8/issues/detail?id=90
	    return a.index - b.index;
	  }

	  /**
	   * Used by `template` to escape characters for inclusion in compiled
	   * string literals.
	   *
	   * @private
	   * @param {string} match The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(match) {
	    return '\\' + stringEscapes[match];
	  }

	  /**
	   * Slices the `collection` from the `start` index up to, but not including,
	   * the `end` index.
	   *
	   * Note: This function is used instead of `Array#slice` to support node lists
	   * in IE < 9 and to ensure dense arrays are returned.
	   *
	   * @private
	   * @param {Array|Object|string} collection The collection to slice.
	   * @param {number} start The start index.
	   * @param {number} end The end index.
	   * @returns {Array} Returns the new array.
	   */
	  function slice(array, start, end) {
	    start || (start = 0);
	    if (typeof end == 'undefined') {
	      end = array ? array.length : 0;
	    }
	    var index = -1,
	        length = end - start || 0,
	        result = Array(length < 0 ? 0 : length);

	    while (++index < length) {
	      result[index] = array[start + index];
	    }
	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Used for `Array` method references.
	   *
	   * Normally `Array.prototype` would suffice, however, using an array literal
	   * avoids issues in Narwhal.
	   */
	  var arrayRef = [];

	  /** Used for native method references */
	  var objectProto = Object.prototype;

	  /** Used to restore the original `_` reference in `noConflict` */
	  var oldDash = root._;

	  /** Used to resolve the internal [[Class]] of values */
	  var toString = objectProto.toString;

	  /** Used to detect if a method is native */
	  var reNative = RegExp('^' +
	    String(toString)
	      .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
	      .replace(/toString| for [^\]]+/g, '.*?') + '$'
	  );

	  /** Native method shortcuts */
	  var ceil = Math.ceil,
	      floor = Math.floor,
	      hasOwnProperty = objectProto.hasOwnProperty,
	      push = arrayRef.push,
	      propertyIsEnumerable = objectProto.propertyIsEnumerable;

	  /* Native method shortcuts for methods with the same name as other `lodash` methods */
	  var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
	      nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
	      nativeIsFinite = root.isFinite,
	      nativeIsNaN = root.isNaN,
	      nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
	      nativeMax = Math.max,
	      nativeMin = Math.min,
	      nativeRandom = Math.random;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Creates a `lodash` object which wraps the given value to enable intuitive
	   * method chaining.
	   *
	   * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
	   * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
	   * and `unshift`
	   *
	   * Chaining is supported in custom builds as long as the `value` method is
	   * implicitly or explicitly included in the build.
	   *
	   * The chainable wrapper functions are:
	   * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
	   * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
	   * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
	   * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	   * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	   * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
	   * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
	   * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
	   * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
	   * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
	   * and `zip`
	   *
	   * The non-chainable wrapper functions are:
	   * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
	   * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
	   * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	   * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
	   * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
	   * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
	   * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
	   * `template`, `unescape`, `uniqueId`, and `value`
	   *
	   * The wrapper functions `first` and `last` return wrapped values when `n` is
	   * provided, otherwise they return unwrapped values.
	   *
	   * Explicit chaining can be enabled by using the `_.chain` method.
	   *
	   * @name _
	   * @constructor
	   * @category Chaining
	   * @param {*} value The value to wrap in a `lodash` instance.
	   * @returns {Object} Returns a `lodash` instance.
	   * @example
	   *
	   * var wrapped = _([1, 2, 3]);
	   *
	   * // returns an unwrapped value
	   * wrapped.reduce(function(sum, num) {
	   *   return sum + num;
	   * });
	   * // => 6
	   *
	   * // returns a wrapped value
	   * var squares = wrapped.map(function(num) {
	   *   return num * num;
	   * });
	   *
	   * _.isArray(squares);
	   * // => false
	   *
	   * _.isArray(squares.value());
	   * // => true
	   */
	  function lodash(value) {
	    return (value instanceof lodash)
	      ? value
	      : new lodashWrapper(value);
	  }

	  /**
	   * A fast path for creating `lodash` wrapper objects.
	   *
	   * @private
	   * @param {*} value The value to wrap in a `lodash` instance.
	   * @param {boolean} chainAll A flag to enable chaining for all methods
	   * @returns {Object} Returns a `lodash` instance.
	   */
	  function lodashWrapper(value, chainAll) {
	    this.__chain__ = !!chainAll;
	    this.__wrapped__ = value;
	  }
	  // ensure `new lodashWrapper` is an instance of `lodash`
	  lodashWrapper.prototype = lodash.prototype;

	  /**
	   * An object used to flag environments features.
	   *
	   * @static
	   * @memberOf _
	   * @type Object
	   */
	  var support = {};

	  (function() {
	    var object = { '0': 1, 'length': 1 };

	    /**
	     * Detect if `Array#shift` and `Array#splice` augment array-like objects correctly.
	     *
	     * Firefox < 10, IE compatibility mode, and IE < 9 have buggy Array `shift()`
	     * and `splice()` functions that fail to remove the last element, `value[0]`,
	     * of array-like objects even though the `length` property is set to `0`.
	     * The `shift()` method is buggy in IE 8 compatibility mode, while `splice()`
	     * is buggy regardless of mode in IE < 9 and buggy in compatibility mode in IE 9.
	     *
	     * @memberOf _.support
	     * @type boolean
	     */
	    support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);
	  }(1));

	  /**
	   * By default, the template delimiters used by Lo-Dash are similar to those in
	   * embedded Ruby (ERB). Change the following template settings to use alternative
	   * delimiters.
	   *
	   * @static
	   * @memberOf _
	   * @type Object
	   */
	  lodash.templateSettings = {

	    /**
	     * Used to detect `data` property values to be HTML-escaped.
	     *
	     * @memberOf _.templateSettings
	     * @type RegExp
	     */
	    'escape': /<%-([\s\S]+?)%>/g,

	    /**
	     * Used to detect code to be evaluated.
	     *
	     * @memberOf _.templateSettings
	     * @type RegExp
	     */
	    'evaluate': /<%([\s\S]+?)%>/g,

	    /**
	     * Used to detect `data` property values to inject.
	     *
	     * @memberOf _.templateSettings
	     * @type RegExp
	     */
	    'interpolate': reInterpolate,

	    /**
	     * Used to reference the data object in the template text.
	     *
	     * @memberOf _.templateSettings
	     * @type string
	     */
	    'variable': ''
	  };

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `_.bind` that creates the bound function and
	   * sets its meta data.
	   *
	   * @private
	   * @param {Array} bindData The bind data array.
	   * @returns {Function} Returns the new bound function.
	   */
	  function baseBind(bindData) {
	    var func = bindData[0],
	        partialArgs = bindData[2],
	        thisArg = bindData[4];

	    function bound() {
	      // `Function#bind` spec
	      // http://es5.github.io/#x15.3.4.5
	      if (partialArgs) {
	        // avoid `arguments` object deoptimizations by using `slice` instead
	        // of `Array.prototype.slice.call` and not assigning `arguments` to a
	        // variable as a ternary expression
	        var args = slice(partialArgs);
	        push.apply(args, arguments);
	      }
	      // mimic the constructor's `return` behavior
	      // http://es5.github.io/#x13.2.2
	      if (this instanceof bound) {
	        // ensure `new bound` is an instance of `func`
	        var thisBinding = baseCreate(func.prototype),
	            result = func.apply(thisBinding, args || arguments);
	        return isObject(result) ? result : thisBinding;
	      }
	      return func.apply(thisArg, args || arguments);
	    }
	    return bound;
	  }

	  /**
	   * The base implementation of `_.create` without support for assigning
	   * properties to the created object.
	   *
	   * @private
	   * @param {Object} prototype The object to inherit from.
	   * @returns {Object} Returns the new object.
	   */
	  function baseCreate(prototype, properties) {
	    return isObject(prototype) ? nativeCreate(prototype) : {};
	  }
	  // fallback for browsers without `Object.create`
	  if (!nativeCreate) {
	    baseCreate = (function() {
	      function Object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          Object.prototype = prototype;
	          var result = new Object;
	          Object.prototype = null;
	        }
	        return result || root.Object();
	      };
	    }());
	  }

	  /**
	   * The base implementation of `_.createCallback` without support for creating
	   * "_.pluck" or "_.where" style callbacks.
	   *
	   * @private
	   * @param {*} [func=identity] The value to convert to a callback.
	   * @param {*} [thisArg] The `this` binding of the created callback.
	   * @param {number} [argCount] The number of arguments the callback accepts.
	   * @returns {Function} Returns a callback function.
	   */
	  function baseCreateCallback(func, thisArg, argCount) {
	    if (typeof func != 'function') {
	      return identity;
	    }
	    // exit early for no `thisArg` or already bound by `Function#bind`
	    if (typeof thisArg == 'undefined' || !('prototype' in func)) {
	      return func;
	    }
	    switch (argCount) {
	      case 1: return function(value) {
	        return func.call(thisArg, value);
	      };
	      case 2: return function(a, b) {
	        return func.call(thisArg, a, b);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(thisArg, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(thisArg, accumulator, value, index, collection);
	      };
	    }
	    return bind(func, thisArg);
	  }

	  /**
	   * The base implementation of `createWrapper` that creates the wrapper and
	   * sets its meta data.
	   *
	   * @private
	   * @param {Array} bindData The bind data array.
	   * @returns {Function} Returns the new function.
	   */
	  function baseCreateWrapper(bindData) {
	    var func = bindData[0],
	        bitmask = bindData[1],
	        partialArgs = bindData[2],
	        partialRightArgs = bindData[3],
	        thisArg = bindData[4],
	        arity = bindData[5];

	    var isBind = bitmask & 1,
	        isBindKey = bitmask & 2,
	        isCurry = bitmask & 4,
	        isCurryBound = bitmask & 8,
	        key = func;

	    function bound() {
	      var thisBinding = isBind ? thisArg : this;
	      if (partialArgs) {
	        var args = slice(partialArgs);
	        push.apply(args, arguments);
	      }
	      if (partialRightArgs || isCurry) {
	        args || (args = slice(arguments));
	        if (partialRightArgs) {
	          push.apply(args, partialRightArgs);
	        }
	        if (isCurry && args.length < arity) {
	          bitmask |= 16 & ~32;
	          return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
	        }
	      }
	      args || (args = arguments);
	      if (isBindKey) {
	        func = thisBinding[key];
	      }
	      if (this instanceof bound) {
	        thisBinding = baseCreate(func.prototype);
	        var result = func.apply(thisBinding, args);
	        return isObject(result) ? result : thisBinding;
	      }
	      return func.apply(thisBinding, args);
	    }
	    return bound;
	  }

	  /**
	   * The base implementation of `_.difference` that accepts a single array
	   * of values to exclude.
	   *
	   * @private
	   * @param {Array} array The array to process.
	   * @param {Array} [values] The array of values to exclude.
	   * @returns {Array} Returns a new array of filtered values.
	   */
	  function baseDifference(array, values) {
	    var index = -1,
	        indexOf = getIndexOf(),
	        length = array ? array.length : 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (indexOf(values, value) < 0) {
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.flatten` without support for callback
	   * shorthands or `thisArg` binding.
	   *
	   * @private
	   * @param {Array} array The array to flatten.
	   * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
	   * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
	   * @param {number} [fromIndex=0] The index to start from.
	   * @returns {Array} Returns a new flattened array.
	   */
	  function baseFlatten(array, isShallow, isStrict, fromIndex) {
	    var index = (fromIndex || 0) - 1,
	        length = array ? array.length : 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];

	      if (value && typeof value == 'object' && typeof value.length == 'number'
	          && (isArray(value) || isArguments(value))) {
	        // recursively flatten arrays (susceptible to call stack limits)
	        if (!isShallow) {
	          value = baseFlatten(value, isShallow, isStrict);
	        }
	        var valIndex = -1,
	            valLength = value.length,
	            resIndex = result.length;

	        result.length += valLength;
	        while (++valIndex < valLength) {
	          result[resIndex++] = value[valIndex];
	        }
	      } else if (!isStrict) {
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  /**
	   * The base implementation of `_.isEqual`, without support for `thisArg` binding,
	   * that allows partial "_.where" style comparisons.
	   *
	   * @private
	   * @param {*} a The value to compare.
	   * @param {*} b The other value to compare.
	   * @param {Function} [callback] The function to customize comparing values.
	   * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
	   * @param {Array} [stackA=[]] Tracks traversed `a` objects.
	   * @param {Array} [stackB=[]] Tracks traversed `b` objects.
	   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	   */
	  function baseIsEqual(a, b, stackA, stackB) {
	    if (a === b) {
	      return a !== 0 || (1 / a == 1 / b);
	    }
	    var type = typeof a,
	        otherType = typeof b;

	    if (a === a &&
	        !(a && objectTypes[type]) &&
	        !(b && objectTypes[otherType])) {
	      return false;
	    }
	    if (a == null || b == null) {
	      return a === b;
	    }
	    var className = toString.call(a),
	        otherClass = toString.call(b);

	    if (className != otherClass) {
	      return false;
	    }
	    switch (className) {
	      case boolClass:
	      case dateClass:
	        return +a == +b;

	      case numberClass:
	        return a != +a
	          ? b != +b
	          : (a == 0 ? (1 / a == 1 / b) : a == +b);

	      case regexpClass:
	      case stringClass:
	        return a == String(b);
	    }
	    var isArr = className == arrayClass;
	    if (!isArr) {
	      var aWrapped = a instanceof lodash,
	          bWrapped = b instanceof lodash;

	      if (aWrapped || bWrapped) {
	        return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, stackA, stackB);
	      }
	      if (className != objectClass) {
	        return false;
	      }
	      var ctorA = a.constructor,
	          ctorB = b.constructor;

	      if (ctorA != ctorB &&
	            !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
	            ('constructor' in a && 'constructor' in b)
	          ) {
	        return false;
	      }
	    }
	    stackA || (stackA = []);
	    stackB || (stackB = []);

	    var length = stackA.length;
	    while (length--) {
	      if (stackA[length] == a) {
	        return stackB[length] == b;
	      }
	    }
	    var result = true,
	        size = 0;

	    stackA.push(a);
	    stackB.push(b);

	    if (isArr) {
	      size = b.length;
	      result = size == a.length;

	      if (result) {
	        while (size--) {
	          if (!(result = baseIsEqual(a[size], b[size], stackA, stackB))) {
	            break;
	          }
	        }
	      }
	    }
	    else {
	      forIn(b, function(value, key, b) {
	        if (hasOwnProperty.call(b, key)) {
	          size++;
	          return !(result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, stackA, stackB)) && indicatorObject;
	        }
	      });

	      if (result) {
	        forIn(a, function(value, key, a) {
	          if (hasOwnProperty.call(a, key)) {
	            return !(result = --size > -1) && indicatorObject;
	          }
	        });
	      }
	    }
	    stackA.pop();
	    stackB.pop();
	    return result;
	  }

	  /**
	   * The base implementation of `_.random` without argument juggling or support
	   * for returning floating-point numbers.
	   *
	   * @private
	   * @param {number} min The minimum possible value.
	   * @param {number} max The maximum possible value.
	   * @returns {number} Returns a random number.
	   */
	  function baseRandom(min, max) {
	    return min + floor(nativeRandom() * (max - min + 1));
	  }

	  /**
	   * The base implementation of `_.uniq` without support for callback shorthands
	   * or `thisArg` binding.
	   *
	   * @private
	   * @param {Array} array The array to process.
	   * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
	   * @param {Function} [callback] The function called per iteration.
	   * @returns {Array} Returns a duplicate-value-free array.
	   */
	  function baseUniq(array, isSorted, callback) {
	    var index = -1,
	        indexOf = getIndexOf(),
	        length = array ? array.length : 0,
	        result = [],
	        seen = callback ? [] : result;

	    while (++index < length) {
	      var value = array[index],
	          computed = callback ? callback(value, index, array) : value;

	      if (isSorted
	            ? !index || seen[seen.length - 1] !== computed
	            : indexOf(seen, computed) < 0
	          ) {
	        if (callback) {
	          seen.push(computed);
	        }
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates a function that aggregates a collection, creating an object composed
	   * of keys generated from the results of running each element of the collection
	   * through a callback. The given `setter` function sets the keys and values
	   * of the composed object.
	   *
	   * @private
	   * @param {Function} setter The setter function.
	   * @returns {Function} Returns the new aggregator function.
	   */
	  function createAggregator(setter) {
	    return function(collection, callback, thisArg) {
	      var result = {};
	      callback = createCallback(callback, thisArg, 3);

	      var index = -1,
	          length = collection ? collection.length : 0;

	      if (typeof length == 'number') {
	        while (++index < length) {
	          var value = collection[index];
	          setter(result, value, callback(value, index, collection), collection);
	        }
	      } else {
	        forOwn(collection, function(value, key, collection) {
	          setter(result, value, callback(value, key, collection), collection);
	        });
	      }
	      return result;
	    };
	  }

	  /**
	   * Creates a function that, when called, either curries or invokes `func`
	   * with an optional `this` binding and partially applied arguments.
	   *
	   * @private
	   * @param {Function|string} func The function or method name to reference.
	   * @param {number} bitmask The bitmask of method flags to compose.
	   *  The bitmask may be composed of the following flags:
	   *  1 - `_.bind`
	   *  2 - `_.bindKey`
	   *  4 - `_.curry`
	   *  8 - `_.curry` (bound)
	   *  16 - `_.partial`
	   *  32 - `_.partialRight`
	   * @param {Array} [partialArgs] An array of arguments to prepend to those
	   *  provided to the new function.
	   * @param {Array} [partialRightArgs] An array of arguments to append to those
	   *  provided to the new function.
	   * @param {*} [thisArg] The `this` binding of `func`.
	   * @param {number} [arity] The arity of `func`.
	   * @returns {Function} Returns the new function.
	   */
	  function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
	    var isBind = bitmask & 1,
	        isBindKey = bitmask & 2,
	        isCurry = bitmask & 4,
	        isCurryBound = bitmask & 8,
	        isPartial = bitmask & 16,
	        isPartialRight = bitmask & 32;

	    if (!isBindKey && !isFunction(func)) {
	      throw new TypeError;
	    }
	    if (isPartial && !partialArgs.length) {
	      bitmask &= ~16;
	      isPartial = partialArgs = false;
	    }
	    if (isPartialRight && !partialRightArgs.length) {
	      bitmask &= ~32;
	      isPartialRight = partialRightArgs = false;
	    }
	    // fast path for `_.bind`
	    var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
	    return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
	  }

	  /**
	   * Used by `escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} match The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(match) {
	    return htmlEscapes[match];
	  }

	  /**
	   * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	   * customized, this method returns the custom method, otherwise it returns
	   * the `baseIndexOf` function.
	   *
	   * @private
	   * @returns {Function} Returns the "indexOf" function.
	   */
	  function getIndexOf() {
	    var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
	    return result;
	  }

	  /**
	   * Checks if `value` is a native function.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
	   */
	  function isNative(value) {
	    return typeof value == 'function' && reNative.test(value);
	  }

	  /**
	   * Used by `unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} match The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(match) {
	    return htmlUnescapes[match];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Checks if `value` is an `arguments` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
	   * @example
	   *
	   * (function() { return _.isArguments(arguments); })(1, 2, 3);
	   * // => true
	   *
	   * _.isArguments([1, 2, 3]);
	   * // => false
	   */
	  function isArguments(value) {
	    return value && typeof value == 'object' && typeof value.length == 'number' &&
	      toString.call(value) == argsClass || false;
	  }
	  // fallback for browsers that can't detect `arguments` objects by [[Class]]
	  if (!isArguments(arguments)) {
	    isArguments = function(value) {
	      return value && typeof value == 'object' && typeof value.length == 'number' &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee') || false;
	    };
	  }

	  /**
	   * Checks if `value` is an array.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
	   * @example
	   *
	   * (function() { return _.isArray(arguments); })();
	   * // => false
	   *
	   * _.isArray([1, 2, 3]);
	   * // => true
	   */
	  var isArray = nativeIsArray || function(value) {
	    return value && typeof value == 'object' && typeof value.length == 'number' &&
	      toString.call(value) == arrayClass || false;
	  };

	  /**
	   * A fallback implementation of `Object.keys` which produces an array of the
	   * given object's own enumerable property names.
	   *
	   * @private
	   * @type Function
	   * @param {Object} object The object to inspect.
	   * @returns {Array} Returns an array of property names.
	   */
	  var shimKeys = function(object) {
	    var index, iterable = object, result = [];
	    if (!iterable) return result;
	    if (!(objectTypes[typeof object])) return result;
	      for (index in iterable) {
	        if (hasOwnProperty.call(iterable, index)) {
	          result.push(index);
	        }
	      }
	    return result
	  };

	  /**
	   * Creates an array composed of the own enumerable property names of an object.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The object to inspect.
	   * @returns {Array} Returns an array of property names.
	   * @example
	   *
	   * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
	   * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
	   */
	  var keys = !nativeKeys ? shimKeys : function(object) {
	    if (!isObject(object)) {
	      return [];
	    }
	    return nativeKeys(object);
	  };

	  /**
	   * Used to convert characters to HTML entities:
	   *
	   * Though the `>` character is escaped for symmetry, characters like `>` and `/`
	   * don't require escaping in HTML and have no special meaning unless they're part
	   * of a tag or an unquoted attribute value.
	   * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
	   */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;'
	  };

	  /** Used to convert HTML entities to characters */
	  var htmlUnescapes = invert(htmlEscapes);

	  /** Used to match HTML entities and HTML characters */
	  var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
	      reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object. Subsequent sources will overwrite property assignments of previous
	   * sources. If a callback is provided it will be executed to produce the
	   * assigned values. The callback is bound to `thisArg` and invoked with two
	   * arguments; (objectValue, sourceValue).
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @alias extend
	   * @category Objects
	   * @param {Object} object The destination object.
	   * @param {...Object} [source] The source objects.
	   * @param {Function} [callback] The function to customize assigning values.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns the destination object.
	   * @example
	   *
	   * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
	   * // => { 'name': 'fred', 'employer': 'slate' }
	   *
	   * var defaults = _.partialRight(_.assign, function(a, b) {
	   *   return typeof a == 'undefined' ? b : a;
	   * });
	   *
	   * var object = { 'name': 'barney' };
	   * defaults(object, { 'name': 'fred', 'employer': 'slate' });
	   * // => { 'name': 'barney', 'employer': 'slate' }
	   */
	  function assign(object) {
	    if (!object) {
	      return object;
	    }
	    for (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {
	      var iterable = arguments[argsIndex];
	      if (iterable) {
	        for (var key in iterable) {
	          object[key] = iterable[key];
	        }
	      }
	    }
	    return object;
	  }

	  /**
	   * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
	   * be cloned, otherwise they will be assigned by reference. If a callback
	   * is provided it will be executed to produce the cloned values. If the
	   * callback returns `undefined` cloning will be handled by the method instead.
	   * The callback is bound to `thisArg` and invoked with one argument; (value).
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to clone.
	   * @param {boolean} [isDeep=false] Specify a deep clone.
	   * @param {Function} [callback] The function to customize cloning values.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the cloned value.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * var shallow = _.clone(characters);
	   * shallow[0] === characters[0];
	   * // => true
	   *
	   * var deep = _.clone(characters, true);
	   * deep[0] === characters[0];
	   * // => false
	   *
	   * _.mixin({
	   *   'clone': _.partialRight(_.clone, function(value) {
	   *     return _.isElement(value) ? value.cloneNode(false) : undefined;
	   *   })
	   * });
	   *
	   * var clone = _.clone(document.body);
	   * clone.childNodes.length;
	   * // => 0
	   */
	  function clone(value) {
	    return isObject(value)
	      ? (isArray(value) ? slice(value) : assign({}, value))
	      : value;
	  }

	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object for all destination properties that resolve to `undefined`. Once a
	   * property is set, additional defaults of the same property will be ignored.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Objects
	   * @param {Object} object The destination object.
	   * @param {...Object} [source] The source objects.
	   * @param- {Object} [guard] Allows working with `_.reduce` without using its
	   *  `key` and `object` arguments as sources.
	   * @returns {Object} Returns the destination object.
	   * @example
	   *
	   * var object = { 'name': 'barney' };
	   * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
	   * // => { 'name': 'barney', 'employer': 'slate' }
	   */
	  function defaults(object) {
	    if (!object) {
	      return object;
	    }
	    for (var argsIndex = 1, argsLength = arguments.length; argsIndex < argsLength; argsIndex++) {
	      var iterable = arguments[argsIndex];
	      if (iterable) {
	        for (var key in iterable) {
	          if (typeof object[key] == 'undefined') {
	            object[key] = iterable[key];
	          }
	        }
	      }
	    }
	    return object;
	  }

	  /**
	   * Iterates over own and inherited enumerable properties of an object,
	   * executing the callback for each property. The callback is bound to `thisArg`
	   * and invoked with three arguments; (value, key, object). Callbacks may exit
	   * iteration early by explicitly returning `false`.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Objects
	   * @param {Object} object The object to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns `object`.
	   * @example
	   *
	   * function Shape() {
	   *   this.x = 0;
	   *   this.y = 0;
	   * }
	   *
	   * Shape.prototype.move = function(x, y) {
	   *   this.x += x;
	   *   this.y += y;
	   * };
	   *
	   * _.forIn(new Shape, function(value, key) {
	   *   console.log(key);
	   * });
	   * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
	   */
	  var forIn = function(collection, callback) {
	    var index, iterable = collection, result = iterable;
	    if (!iterable) return result;
	    if (!objectTypes[typeof iterable]) return result;
	      for (index in iterable) {
	        if (callback(iterable[index], index, collection) === indicatorObject) return result;
	      }
	    return result
	  };

	  /**
	   * Iterates over own enumerable properties of an object, executing the callback
	   * for each property. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, key, object). Callbacks may exit iteration early by
	   * explicitly returning `false`.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Objects
	   * @param {Object} object The object to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns `object`.
	   * @example
	   *
	   * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
	   *   console.log(key);
	   * });
	   * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
	   */
	  var forOwn = function(collection, callback) {
	    var index, iterable = collection, result = iterable;
	    if (!iterable) return result;
	    if (!objectTypes[typeof iterable]) return result;
	      for (index in iterable) {
	        if (hasOwnProperty.call(iterable, index)) {
	          if (callback(iterable[index], index, collection) === indicatorObject) return result;
	        }
	      }
	    return result
	  };

	  /**
	   * Creates a sorted array of property names of all enumerable properties,
	   * own and inherited, of `object` that have function values.
	   *
	   * @static
	   * @memberOf _
	   * @alias methods
	   * @category Objects
	   * @param {Object} object The object to inspect.
	   * @returns {Array} Returns an array of property names that have function values.
	   * @example
	   *
	   * _.functions(_);
	   * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
	   */
	  function functions(object) {
	    var result = [];
	    forIn(object, function(value, key) {
	      if (isFunction(value)) {
	        result.push(key);
	      }
	    });
	    return result.sort();
	  }

	  /**
	   * Checks if the specified property name exists as a direct property of `object`,
	   * instead of an inherited property.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The object to inspect.
	   * @param {string} key The name of the property to check.
	   * @returns {boolean} Returns `true` if key is a direct property, else `false`.
	   * @example
	   *
	   * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
	   * // => true
	   */
	  function has(object, key) {
	    return object ? hasOwnProperty.call(object, key) : false;
	  }

	  /**
	   * Creates an object composed of the inverted keys and values of the given object.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The object to invert.
	   * @returns {Object} Returns the created inverted object.
	   * @example
	   *
	   * _.invert({ 'first': 'fred', 'second': 'barney' });
	   * // => { 'fred': 'first', 'barney': 'second' }
	   */
	  function invert(object) {
	    var index = -1,
	        props = keys(object),
	        length = props.length,
	        result = {};

	    while (++index < length) {
	      var key = props[index];
	      result[object[key]] = key;
	    }
	    return result;
	  }

	  /**
	   * Checks if `value` is a boolean value.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
	   * @example
	   *
	   * _.isBoolean(null);
	   * // => false
	   */
	  function isBoolean(value) {
	    return value === true || value === false ||
	      value && typeof value == 'object' && toString.call(value) == boolClass || false;
	  }

	  /**
	   * Checks if `value` is a date.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
	   * @example
	   *
	   * _.isDate(new Date);
	   * // => true
	   */
	  function isDate(value) {
	    return value && typeof value == 'object' && toString.call(value) == dateClass || false;
	  }

	  /**
	   * Checks if `value` is a DOM element.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
	   * @example
	   *
	   * _.isElement(document.body);
	   * // => true
	   */
	  function isElement(value) {
	    return value && value.nodeType === 1 || false;
	  }

	  /**
	   * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
	   * length of `0` and objects with no own enumerable properties are considered
	   * "empty".
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Array|Object|string} value The value to inspect.
	   * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
	   * @example
	   *
	   * _.isEmpty([1, 2, 3]);
	   * // => false
	   *
	   * _.isEmpty({});
	   * // => true
	   *
	   * _.isEmpty('');
	   * // => true
	   */
	  function isEmpty(value) {
	    if (!value) {
	      return true;
	    }
	    if (isArray(value) || isString(value)) {
	      return !value.length;
	    }
	    for (var key in value) {
	      if (hasOwnProperty.call(value, key)) {
	        return false;
	      }
	    }
	    return true;
	  }

	  /**
	   * Performs a deep comparison between two values to determine if they are
	   * equivalent to each other. If a callback is provided it will be executed
	   * to compare values. If the callback returns `undefined` comparisons will
	   * be handled by the method instead. The callback is bound to `thisArg` and
	   * invoked with two arguments; (a, b).
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} a The value to compare.
	   * @param {*} b The other value to compare.
	   * @param {Function} [callback] The function to customize comparing values.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	   * @example
	   *
	   * var object = { 'name': 'fred' };
	   * var copy = { 'name': 'fred' };
	   *
	   * object == copy;
	   * // => false
	   *
	   * _.isEqual(object, copy);
	   * // => true
	   *
	   * var words = ['hello', 'goodbye'];
	   * var otherWords = ['hi', 'goodbye'];
	   *
	   * _.isEqual(words, otherWords, function(a, b) {
	   *   var reGreet = /^(?:hello|hi)$/i,
	   *       aGreet = _.isString(a) && reGreet.test(a),
	   *       bGreet = _.isString(b) && reGreet.test(b);
	   *
	   *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
	   * });
	   * // => true
	   */
	  function isEqual(a, b) {
	    return baseIsEqual(a, b);
	  }

	  /**
	   * Checks if `value` is, or can be coerced to, a finite number.
	   *
	   * Note: This is not the same as native `isFinite` which will return true for
	   * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
	   * @example
	   *
	   * _.isFinite(-101);
	   * // => true
	   *
	   * _.isFinite('10');
	   * // => true
	   *
	   * _.isFinite(true);
	   * // => false
	   *
	   * _.isFinite('');
	   * // => false
	   *
	   * _.isFinite(Infinity);
	   * // => false
	   */
	  function isFinite(value) {
	    return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
	  }

	  /**
	   * Checks if `value` is a function.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
	   * @example
	   *
	   * _.isFunction(_);
	   * // => true
	   */
	  function isFunction(value) {
	    return typeof value == 'function';
	  }
	  // fallback for older versions of Chrome and Safari
	  if (isFunction(/x/)) {
	    isFunction = function(value) {
	      return typeof value == 'function' && toString.call(value) == funcClass;
	    };
	  }

	  /**
	   * Checks if `value` is the language type of Object.
	   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
	   * @example
	   *
	   * _.isObject({});
	   * // => true
	   *
	   * _.isObject([1, 2, 3]);
	   * // => true
	   *
	   * _.isObject(1);
	   * // => false
	   */
	  function isObject(value) {
	    // check if the value is the ECMAScript language type of Object
	    // http://es5.github.io/#x8
	    // and avoid a V8 bug
	    // http://code.google.com/p/v8/issues/detail?id=2291
	    return !!(value && objectTypes[typeof value]);
	  }

	  /**
	   * Checks if `value` is `NaN`.
	   *
	   * Note: This is not the same as native `isNaN` which will return `true` for
	   * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
	   * @example
	   *
	   * _.isNaN(NaN);
	   * // => true
	   *
	   * _.isNaN(new Number(NaN));
	   * // => true
	   *
	   * isNaN(undefined);
	   * // => true
	   *
	   * _.isNaN(undefined);
	   * // => false
	   */
	  function isNaN(value) {
	    // `NaN` as a primitive is the only value that is not equal to itself
	    // (perform the [[Class]] check first to avoid errors with some host objects in IE)
	    return isNumber(value) && value != +value;
	  }

	  /**
	   * Checks if `value` is `null`.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
	   * @example
	   *
	   * _.isNull(null);
	   * // => true
	   *
	   * _.isNull(undefined);
	   * // => false
	   */
	  function isNull(value) {
	    return value === null;
	  }

	  /**
	   * Checks if `value` is a number.
	   *
	   * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
	   * @example
	   *
	   * _.isNumber(8.4 * 5);
	   * // => true
	   */
	  function isNumber(value) {
	    return typeof value == 'number' ||
	      value && typeof value == 'object' && toString.call(value) == numberClass || false;
	  }

	  /**
	   * Checks if `value` is a regular expression.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
	   * @example
	   *
	   * _.isRegExp(/fred/);
	   * // => true
	   */
	  function isRegExp(value) {
	    return value && objectTypes[typeof value] && toString.call(value) == regexpClass || false;
	  }

	  /**
	   * Checks if `value` is a string.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
	   * @example
	   *
	   * _.isString('fred');
	   * // => true
	   */
	  function isString(value) {
	    return typeof value == 'string' ||
	      value && typeof value == 'object' && toString.call(value) == stringClass || false;
	  }

	  /**
	   * Checks if `value` is `undefined`.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
	   * @example
	   *
	   * _.isUndefined(void 0);
	   * // => true
	   */
	  function isUndefined(value) {
	    return typeof value == 'undefined';
	  }

	  /**
	   * Creates a shallow clone of `object` excluding the specified properties.
	   * Property names may be specified as individual arguments or as arrays of
	   * property names. If a callback is provided it will be executed for each
	   * property of `object` omitting the properties the callback returns truey
	   * for. The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, key, object).
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The source object.
	   * @param {Function|...string|string[]} [callback] The properties to omit or the
	   *  function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns an object without the omitted properties.
	   * @example
	   *
	   * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
	   * // => { 'name': 'fred' }
	   *
	   * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
	   *   return typeof value == 'number';
	   * });
	   * // => { 'name': 'fred' }
	   */
	  function omit(object) {
	    var props = [];
	    forIn(object, function(value, key) {
	      props.push(key);
	    });
	    props = baseDifference(props, baseFlatten(arguments, true, false, 1));

	    var index = -1,
	        length = props.length,
	        result = {};

	    while (++index < length) {
	      var key = props[index];
	      result[key] = object[key];
	    }
	    return result;
	  }

	  /**
	   * Creates a two dimensional array of an object's key-value pairs,
	   * i.e. `[[key1, value1], [key2, value2]]`.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The object to inspect.
	   * @returns {Array} Returns new array of key-value pairs.
	   * @example
	   *
	   * _.pairs({ 'barney': 36, 'fred': 40 });
	   * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
	   */
	  function pairs(object) {
	    var index = -1,
	        props = keys(object),
	        length = props.length,
	        result = Array(length);

	    while (++index < length) {
	      var key = props[index];
	      result[index] = [key, object[key]];
	    }
	    return result;
	  }

	  /**
	   * Creates a shallow clone of `object` composed of the specified properties.
	   * Property names may be specified as individual arguments or as arrays of
	   * property names. If a callback is provided it will be executed for each
	   * property of `object` picking the properties the callback returns truey
	   * for. The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, key, object).
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The source object.
	   * @param {Function|...string|string[]} [callback] The function called per
	   *  iteration or property names to pick, specified as individual property
	   *  names or arrays of property names.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns an object composed of the picked properties.
	   * @example
	   *
	   * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
	   * // => { 'name': 'fred' }
	   *
	   * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
	   *   return key.charAt(0) != '_';
	   * });
	   * // => { 'name': 'fred' }
	   */
	  function pick(object) {
	    var index = -1,
	        props = baseFlatten(arguments, true, false, 1),
	        length = props.length,
	        result = {};

	    while (++index < length) {
	      var key = props[index];
	      if (key in object) {
	        result[key] = object[key];
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates an array composed of the own enumerable property values of `object`.
	   *
	   * @static
	   * @memberOf _
	   * @category Objects
	   * @param {Object} object The object to inspect.
	   * @returns {Array} Returns an array of property values.
	   * @example
	   *
	   * _.values({ 'one': 1, 'two': 2, 'three': 3 });
	   * // => [1, 2, 3] (property order is not guaranteed across environments)
	   */
	  function values(object) {
	    var index = -1,
	        props = keys(object),
	        length = props.length,
	        result = Array(length);

	    while (++index < length) {
	      result[index] = object[props[index]];
	    }
	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Checks if a given value is present in a collection using strict equality
	   * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
	   * offset from the end of the collection.
	   *
	   * @static
	   * @memberOf _
	   * @alias include
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {*} target The value to check for.
	   * @param {number} [fromIndex=0] The index to search from.
	   * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
	   * @example
	   *
	   * _.contains([1, 2, 3], 1);
	   * // => true
	   *
	   * _.contains([1, 2, 3], 1, 2);
	   * // => false
	   *
	   * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
	   * // => true
	   *
	   * _.contains('pebbles', 'eb');
	   * // => true
	   */
	  function contains(collection, target) {
	    var indexOf = getIndexOf(),
	        length = collection ? collection.length : 0,
	        result = false;
	    if (length && typeof length == 'number') {
	      result = indexOf(collection, target) > -1;
	    } else {
	      forOwn(collection, function(value) {
	        return (result = value === target) && indicatorObject;
	      });
	    }
	    return result;
	  }

	  /**
	   * Creates an object composed of keys generated from the results of running
	   * each element of `collection` through the callback. The corresponding value
	   * of each key is the number of times the key was returned by the callback.
	   * The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns the composed aggregate object.
	   * @example
	   *
	   * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
	   * // => { '4': 1, '6': 2 }
	   *
	   * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
	   * // => { '4': 1, '6': 2 }
	   *
	   * _.countBy(['one', 'two', 'three'], 'length');
	   * // => { '3': 2, '5': 1 }
	   */
	  var countBy = createAggregator(function(result, value, key) {
	    (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
	  });

	  /**
	   * Checks if the given callback returns truey value for **all** elements of
	   * a collection. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias all
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {boolean} Returns `true` if all elements passed the callback check,
	   *  else `false`.
	   * @example
	   *
	   * _.every([true, 1, null, 'yes']);
	   * // => false
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.every(characters, 'age');
	   * // => true
	   *
	   * // using "_.where" callback shorthand
	   * _.every(characters, { 'age': 36 });
	   * // => false
	   */
	  function every(collection, callback, thisArg) {
	    var result = true;
	    callback = createCallback(callback, thisArg, 3);

	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (typeof length == 'number') {
	      while (++index < length) {
	        if (!(result = !!callback(collection[index], index, collection))) {
	          break;
	        }
	      }
	    } else {
	      forOwn(collection, function(value, index, collection) {
	        return !(result = !!callback(value, index, collection)) && indicatorObject;
	      });
	    }
	    return result;
	  }

	  /**
	   * Iterates over elements of a collection, returning an array of all elements
	   * the callback returns truey for. The callback is bound to `thisArg` and
	   * invoked with three arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias select
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a new array of elements that passed the callback check.
	   * @example
	   *
	   * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
	   * // => [2, 4, 6]
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36, 'blocked': false },
	   *   { 'name': 'fred',   'age': 40, 'blocked': true }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.filter(characters, 'blocked');
	   * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
	   *
	   * // using "_.where" callback shorthand
	   * _.filter(characters, { 'age': 36 });
	   * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
	   */
	  function filter(collection, callback, thisArg) {
	    var result = [];
	    callback = createCallback(callback, thisArg, 3);

	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (typeof length == 'number') {
	      while (++index < length) {
	        var value = collection[index];
	        if (callback(value, index, collection)) {
	          result.push(value);
	        }
	      }
	    } else {
	      forOwn(collection, function(value, index, collection) {
	        if (callback(value, index, collection)) {
	          result.push(value);
	        }
	      });
	    }
	    return result;
	  }

	  /**
	   * Iterates over elements of a collection, returning the first element that
	   * the callback returns truey for. The callback is bound to `thisArg` and
	   * invoked with three arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias detect, findWhere
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the found element, else `undefined`.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'age': 36, 'blocked': false },
	   *   { 'name': 'fred',    'age': 40, 'blocked': true },
	   *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
	   * ];
	   *
	   * _.find(characters, function(chr) {
	   *   return chr.age < 40;
	   * });
	   * // => { 'name': 'barney', 'age': 36, 'blocked': false }
	   *
	   * // using "_.where" callback shorthand
	   * _.find(characters, { 'age': 1 });
	   * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
	   *
	   * // using "_.pluck" callback shorthand
	   * _.find(characters, 'blocked');
	   * // => { 'name': 'fred', 'age': 40, 'blocked': true }
	   */
	  function find(collection, callback, thisArg) {
	    callback = createCallback(callback, thisArg, 3);

	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (typeof length == 'number') {
	      while (++index < length) {
	        var value = collection[index];
	        if (callback(value, index, collection)) {
	          return value;
	        }
	      }
	    } else {
	      var result;
	      forOwn(collection, function(value, index, collection) {
	        if (callback(value, index, collection)) {
	          result = value;
	          return indicatorObject;
	        }
	      });
	      return result;
	    }
	  }

	  /**
	   * Examines each element in a `collection`, returning the first that
	   * has the given properties. When checking `properties`, this method
	   * performs a deep comparison between values to determine if they are
	   * equivalent to each other.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Object} properties The object of property values to filter by.
	   * @returns {*} Returns the found element, else `undefined`.
	   * @example
	   *
	   * var food = [
	   *   { 'name': 'apple',  'organic': false, 'type': 'fruit' },
	   *   { 'name': 'banana', 'organic': true,  'type': 'fruit' },
	   *   { 'name': 'beet',   'organic': false, 'type': 'vegetable' }
	   * ];
	   *
	   * _.findWhere(food, { 'type': 'vegetable' });
	   * // => { 'name': 'beet', 'organic': false, 'type': 'vegetable' }
	   */
	  function findWhere(object, properties) {
	    return where(object, properties, true);
	  }

	  /**
	   * Iterates over elements of a collection, executing the callback for each
	   * element. The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, index|key, collection). Callbacks may exit iteration early by
	   * explicitly returning `false`.
	   *
	   * Note: As with other "Collections" methods, objects with a `length` property
	   * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	   * may be used for object iteration.
	   *
	   * @static
	   * @memberOf _
	   * @alias each
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array|Object|string} Returns `collection`.
	   * @example
	   *
	   * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
	   * // => logs each number and returns '1,2,3'
	   *
	   * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
	   * // => logs each number and returns the object (property order is not guaranteed across environments)
	   */
	  function forEach(collection, callback, thisArg) {
	    var index = -1,
	        length = collection ? collection.length : 0;

	    callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
	    if (typeof length == 'number') {
	      while (++index < length) {
	        if (callback(collection[index], index, collection) === indicatorObject) {
	          break;
	        }
	      }
	    } else {
	      forOwn(collection, callback);
	    }
	  }

	  /**
	   * This method is like `_.forEach` except that it iterates over elements
	   * of a `collection` from right to left.
	   *
	   * @static
	   * @memberOf _
	   * @alias eachRight
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array|Object|string} Returns `collection`.
	   * @example
	   *
	   * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
	   * // => logs each number from right to left and returns '3,2,1'
	   */
	  function forEachRight(collection, callback) {
	    var length = collection ? collection.length : 0;
	    if (typeof length == 'number') {
	      while (length--) {
	        if (callback(collection[length], length, collection) === false) {
	          break;
	        }
	      }
	    } else {
	      var props = keys(collection);
	      length = props.length;
	      forOwn(collection, function(value, key, collection) {
	        key = props ? props[--length] : --length;
	        return callback(collection[key], key, collection) === false && indicatorObject;
	      });
	    }
	  }

	  /**
	   * Creates an object composed of keys generated from the results of running
	   * each element of a collection through the callback. The corresponding value
	   * of each key is an array of the elements responsible for generating the key.
	   * The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns the composed aggregate object.
	   * @example
	   *
	   * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
	   * // => { '4': [4.2], '6': [6.1, 6.4] }
	   *
	   * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
	   * // => { '4': [4.2], '6': [6.1, 6.4] }
	   *
	   * // using "_.pluck" callback shorthand
	   * _.groupBy(['one', 'two', 'three'], 'length');
	   * // => { '3': ['one', 'two'], '5': ['three'] }
	   */
	  var groupBy = createAggregator(function(result, value, key) {
	    (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
	  });

	  /**
	   * Creates an object composed of keys generated from the results of running
	   * each element of the collection through the given callback. The corresponding
	   * value of each key is the last element responsible for generating the key.
	   * The callback is bound to `thisArg` and invoked with three arguments;
	   * (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Object} Returns the composed aggregate object.
	   * @example
	   *
	   * var keys = [
	   *   { 'dir': 'left', 'code': 97 },
	   *   { 'dir': 'right', 'code': 100 }
	   * ];
	   *
	   * _.indexBy(keys, 'dir');
	   * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	   *
	   * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
	   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	   *
	   * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
	   * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	   */
	  var indexBy = createAggregator(function(result, value, key) {
	    result[key] = value;
	  });

	  /**
	   * Invokes the method named by `methodName` on each element in the `collection`
	   * returning an array of the results of each invoked method. Additional arguments
	   * will be provided to each invoked method. If `methodName` is a function it
	   * will be invoked for, and `this` bound to, each element in the `collection`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|string} methodName The name of the method to invoke or
	   *  the function invoked per iteration.
	   * @param {...*} [arg] Arguments to invoke the method with.
	   * @returns {Array} Returns a new array of the results of each invoked method.
	   * @example
	   *
	   * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	   * // => [[1, 5, 7], [1, 2, 3]]
	   *
	   * _.invoke([123, 456], String.prototype.split, '');
	   * // => [['1', '2', '3'], ['4', '5', '6']]
	   */
	  function invoke(collection, methodName) {
	    var args = slice(arguments, 2),
	        index = -1,
	        isFunc = typeof methodName == 'function',
	        length = collection ? collection.length : 0,
	        result = Array(typeof length == 'number' ? length : 0);

	    forEach(collection, function(value) {
	      result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
	    });
	    return result;
	  }

	  /**
	   * Creates an array of values by running each element in the collection
	   * through the callback. The callback is bound to `thisArg` and invoked with
	   * three arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias collect
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a new array of the results of each `callback` execution.
	   * @example
	   *
	   * _.map([1, 2, 3], function(num) { return num * 3; });
	   * // => [3, 6, 9]
	   *
	   * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
	   * // => [3, 6, 9] (property order is not guaranteed across environments)
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.map(characters, 'name');
	   * // => ['barney', 'fred']
	   */
	  function map(collection, callback, thisArg) {
	    var index = -1,
	        length = collection ? collection.length : 0;

	    callback = createCallback(callback, thisArg, 3);
	    if (typeof length == 'number') {
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = callback(collection[index], index, collection);
	      }
	    } else {
	      result = [];
	      forOwn(collection, function(value, key, collection) {
	        result[++index] = callback(value, key, collection);
	      });
	    }
	    return result;
	  }

	  /**
	   * Retrieves the maximum value of a collection. If the collection is empty or
	   * falsey `-Infinity` is returned. If a callback is provided it will be executed
	   * for each value in the collection to generate the criterion by which the value
	   * is ranked. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, index, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the maximum value.
	   * @example
	   *
	   * _.max([4, 2, 8, 6]);
	   * // => 8
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * _.max(characters, function(chr) { return chr.age; });
	   * // => { 'name': 'fred', 'age': 40 };
	   *
	   * // using "_.pluck" callback shorthand
	   * _.max(characters, 'age');
	   * // => { 'name': 'fred', 'age': 40 };
	   */
	  function max(collection, callback, thisArg) {
	    var computed = -Infinity,
	        result = computed;

	    // allows working with functions like `_.map` without using
	    // their `index` argument as a callback
	    if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
	      callback = null;
	    }
	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (callback == null && typeof length == 'number') {
	      while (++index < length) {
	        var value = collection[index];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      callback = createCallback(callback, thisArg, 3);

	      forEach(collection, function(value, index, collection) {
	        var current = callback(value, index, collection);
	        if (current > computed) {
	          computed = current;
	          result = value;
	        }
	      });
	    }
	    return result;
	  }

	  /**
	   * Retrieves the minimum value of a collection. If the collection is empty or
	   * falsey `Infinity` is returned. If a callback is provided it will be executed
	   * for each value in the collection to generate the criterion by which the value
	   * is ranked. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, index, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the minimum value.
	   * @example
	   *
	   * _.min([4, 2, 8, 6]);
	   * // => 2
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * _.min(characters, function(chr) { return chr.age; });
	   * // => { 'name': 'barney', 'age': 36 };
	   *
	   * // using "_.pluck" callback shorthand
	   * _.min(characters, 'age');
	   * // => { 'name': 'barney', 'age': 36 };
	   */
	  function min(collection, callback, thisArg) {
	    var computed = Infinity,
	        result = computed;

	    // allows working with functions like `_.map` without using
	    // their `index` argument as a callback
	    if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
	      callback = null;
	    }
	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (callback == null && typeof length == 'number') {
	      while (++index < length) {
	        var value = collection[index];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      callback = createCallback(callback, thisArg, 3);

	      forEach(collection, function(value, index, collection) {
	        var current = callback(value, index, collection);
	        if (current < computed) {
	          computed = current;
	          result = value;
	        }
	      });
	    }
	    return result;
	  }

	  /**
	   * Retrieves the value of a specified property from all elements in the collection.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {string} property The name of the property to pluck.
	   * @returns {Array} Returns a new array of property values.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * _.pluck(characters, 'name');
	   * // => ['barney', 'fred']
	   */
	  var pluck = map;

	  /**
	   * Reduces a collection to a value which is the accumulated result of running
	   * each element in the collection through the callback, where each successive
	   * callback execution consumes the return value of the previous execution. If
	   * `accumulator` is not provided the first element of the collection will be
	   * used as the initial `accumulator` value. The callback is bound to `thisArg`
	   * and invoked with four arguments; (accumulator, value, index|key, collection).
	   *
	   * @static
	   * @memberOf _
	   * @alias foldl, inject
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [accumulator] Initial value of the accumulator.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the accumulated value.
	   * @example
	   *
	   * var sum = _.reduce([1, 2, 3], function(sum, num) {
	   *   return sum + num;
	   * });
	   * // => 6
	   *
	   * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
	   *   result[key] = num * 3;
	   *   return result;
	   * }, {});
	   * // => { 'a': 3, 'b': 6, 'c': 9 }
	   */
	  function reduce(collection, callback, accumulator, thisArg) {
	    if (!collection) return accumulator;
	    var noaccum = arguments.length < 3;
	    callback = createCallback(callback, thisArg, 4);

	    var index = -1,
	        length = collection.length;

	    if (typeof length == 'number') {
	      if (noaccum) {
	        accumulator = collection[++index];
	      }
	      while (++index < length) {
	        accumulator = callback(accumulator, collection[index], index, collection);
	      }
	    } else {
	      forOwn(collection, function(value, index, collection) {
	        accumulator = noaccum
	          ? (noaccum = false, value)
	          : callback(accumulator, value, index, collection)
	      });
	    }
	    return accumulator;
	  }

	  /**
	   * This method is like `_.reduce` except that it iterates over elements
	   * of a `collection` from right to left.
	   *
	   * @static
	   * @memberOf _
	   * @alias foldr
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function} [callback=identity] The function called per iteration.
	   * @param {*} [accumulator] Initial value of the accumulator.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the accumulated value.
	   * @example
	   *
	   * var list = [[0, 1], [2, 3], [4, 5]];
	   * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
	   * // => [4, 5, 2, 3, 0, 1]
	   */
	  function reduceRight(collection, callback, accumulator, thisArg) {
	    var noaccum = arguments.length < 3;
	    callback = createCallback(callback, thisArg, 4);
	    forEachRight(collection, function(value, index, collection) {
	      accumulator = noaccum
	        ? (noaccum = false, value)
	        : callback(accumulator, value, index, collection);
	    });
	    return accumulator;
	  }

	  /**
	   * The opposite of `_.filter` this method returns the elements of a
	   * collection that the callback does **not** return truey for.
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a new array of elements that failed the callback check.
	   * @example
	   *
	   * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
	   * // => [1, 3, 5]
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36, 'blocked': false },
	   *   { 'name': 'fred',   'age': 40, 'blocked': true }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.reject(characters, 'blocked');
	   * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
	   *
	   * // using "_.where" callback shorthand
	   * _.reject(characters, { 'age': 36 });
	   * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
	   */
	  function reject(collection, callback, thisArg) {
	    callback = createCallback(callback, thisArg, 3);
	    return filter(collection, function(value, index, collection) {
	      return !callback(value, index, collection);
	    });
	  }

	  /**
	   * Retrieves a random element or `n` random elements from a collection.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to sample.
	   * @param {number} [n] The number of elements to sample.
	   * @param- {Object} [guard] Allows working with functions like `_.map`
	   *  without using their `index` arguments as `n`.
	   * @returns {Array} Returns the random sample(s) of `collection`.
	   * @example
	   *
	   * _.sample([1, 2, 3, 4]);
	   * // => 2
	   *
	   * _.sample([1, 2, 3, 4], 2);
	   * // => [3, 1]
	   */
	  function sample(collection, n, guard) {
	    if (collection && typeof collection.length != 'number') {
	      collection = values(collection);
	    }
	    if (n == null || guard) {
	      return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
	    }
	    var result = shuffle(collection);
	    result.length = nativeMin(nativeMax(0, n), result.length);
	    return result;
	  }

	  /**
	   * Creates an array of shuffled values, using a version of the Fisher-Yates
	   * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to shuffle.
	   * @returns {Array} Returns a new shuffled collection.
	   * @example
	   *
	   * _.shuffle([1, 2, 3, 4, 5, 6]);
	   * // => [4, 1, 6, 3, 5, 2]
	   */
	  function shuffle(collection) {
	    var index = -1,
	        length = collection ? collection.length : 0,
	        result = Array(typeof length == 'number' ? length : 0);

	    forEach(collection, function(value) {
	      var rand = baseRandom(0, ++index);
	      result[index] = result[rand];
	      result[rand] = value;
	    });
	    return result;
	  }

	  /**
	   * Gets the size of the `collection` by returning `collection.length` for arrays
	   * and array-like objects or the number of own enumerable properties for objects.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to inspect.
	   * @returns {number} Returns `collection.length` or number of own enumerable properties.
	   * @example
	   *
	   * _.size([1, 2]);
	   * // => 2
	   *
	   * _.size({ 'one': 1, 'two': 2, 'three': 3 });
	   * // => 3
	   *
	   * _.size('pebbles');
	   * // => 7
	   */
	  function size(collection) {
	    var length = collection ? collection.length : 0;
	    return typeof length == 'number' ? length : keys(collection).length;
	  }

	  /**
	   * Checks if the callback returns a truey value for **any** element of a
	   * collection. The function returns as soon as it finds a passing value and
	   * does not iterate over the entire collection. The callback is bound to
	   * `thisArg` and invoked with three arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias any
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {boolean} Returns `true` if any element passed the callback check,
	   *  else `false`.
	   * @example
	   *
	   * _.some([null, 0, 'yes', false], Boolean);
	   * // => true
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36, 'blocked': false },
	   *   { 'name': 'fred',   'age': 40, 'blocked': true }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.some(characters, 'blocked');
	   * // => true
	   *
	   * // using "_.where" callback shorthand
	   * _.some(characters, { 'age': 1 });
	   * // => false
	   */
	  function some(collection, callback, thisArg) {
	    var result;
	    callback = createCallback(callback, thisArg, 3);

	    var index = -1,
	        length = collection ? collection.length : 0;

	    if (typeof length == 'number') {
	      while (++index < length) {
	        if ((result = callback(collection[index], index, collection))) {
	          break;
	        }
	      }
	    } else {
	      forOwn(collection, function(value, index, collection) {
	        return (result = callback(value, index, collection)) && indicatorObject;
	      });
	    }
	    return !!result;
	  }

	  /**
	   * Creates an array of elements, sorted in ascending order by the results of
	   * running each element in a collection through the callback. This method
	   * performs a stable sort, that is, it will preserve the original sort order
	   * of equal elements. The callback is bound to `thisArg` and invoked with
	   * three arguments; (value, index|key, collection).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an array of property names is provided for `callback` the collection
	   * will be sorted by each property value.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Array|Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a new array of sorted elements.
	   * @example
	   *
	   * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
	   * // => [3, 1, 2]
	   *
	   * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
	   * // => [3, 1, 2]
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'age': 36 },
	   *   { 'name': 'fred',    'age': 40 },
	   *   { 'name': 'barney',  'age': 26 },
	   *   { 'name': 'fred',    'age': 30 }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.map(_.sortBy(characters, 'age'), _.values);
	   * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
	   *
	   * // sorting by multiple properties
	   * _.map(_.sortBy(characters, ['name', 'age']), _.values);
	   * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
	   */
	  function sortBy(collection, callback, thisArg) {
	    var index = -1,
	        length = collection ? collection.length : 0,
	        result = Array(typeof length == 'number' ? length : 0);

	    callback = createCallback(callback, thisArg, 3);
	    forEach(collection, function(value, key, collection) {
	      result[++index] = {
	        'criteria': [callback(value, key, collection)],
	        'index': index,
	        'value': value
	      };
	    });

	    length = result.length;
	    result.sort(compareAscending);
	    while (length--) {
	      result[length] = result[length].value;
	    }
	    return result;
	  }

	  /**
	   * Converts the `collection` to an array.
	   *
	   * @static
	   * @memberOf _
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to convert.
	   * @returns {Array} Returns the new converted array.
	   * @example
	   *
	   * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
	   * // => [2, 3, 4]
	   */
	  function toArray(collection) {
	    if (isArray(collection)) {
	      return slice(collection);
	    }
	    if (collection && typeof collection.length == 'number') {
	      return map(collection);
	    }
	    return values(collection);
	  }

	  /**
	   * Performs a deep comparison of each element in a `collection` to the given
	   * `properties` object, returning an array of all elements that have equivalent
	   * property values.
	   *
	   * @static
	   * @memberOf _
	   * @type Function
	   * @category Collections
	   * @param {Array|Object|string} collection The collection to iterate over.
	   * @param {Object} props The object of property values to filter by.
	   * @returns {Array} Returns a new array of elements that have the given properties.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
	   *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
	   * ];
	   *
	   * _.where(characters, { 'age': 36 });
	   * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
	   *
	   * _.where(characters, { 'pets': ['dino'] });
	   * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
	   */
	  function where(collection, properties, first) {
	    return (first && isEmpty(properties))
	      ? undefined
	      : (first ? find : filter)(collection, properties);
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Creates an array with all falsey values removed. The values `false`, `null`,
	   * `0`, `""`, `undefined`, and `NaN` are all falsey.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to compact.
	   * @returns {Array} Returns a new array of filtered values.
	   * @example
	   *
	   * _.compact([0, 1, false, 2, '', 3]);
	   * // => [1, 2, 3]
	   */
	  function compact(array) {
	    var index = -1,
	        length = array ? array.length : 0,
	        result = [];

	    while (++index < length) {
	      var value = array[index];
	      if (value) {
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  /**
	   * Creates an array excluding all values of the provided arrays using strict
	   * equality for comparisons, i.e. `===`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to process.
	   * @param {...Array} [values] The arrays of values to exclude.
	   * @returns {Array} Returns a new array of filtered values.
	   * @example
	   *
	   * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
	   * // => [1, 3, 4]
	   */
	  function difference(array) {
	    return baseDifference(array, baseFlatten(arguments, true, true, 1));
	  }

	  /**
	   * Gets the first element or first `n` elements of an array. If a callback
	   * is provided elements at the beginning of the array are returned as long
	   * as the callback returns truey. The callback is bound to `thisArg` and
	   * invoked with three arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias head, take
	   * @category Arrays
	   * @param {Array} array The array to query.
	   * @param {Function|Object|number|string} [callback] The function called
	   *  per element or the number of elements to return. If a property name or
	   *  object is provided it will be used to create a "_.pluck" or "_.where"
	   *  style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the first element(s) of `array`.
	   * @example
	   *
	   * _.first([1, 2, 3]);
	   * // => 1
	   *
	   * _.first([1, 2, 3], 2);
	   * // => [1, 2]
	   *
	   * _.first([1, 2, 3], function(num) {
	   *   return num < 3;
	   * });
	   * // => [1, 2]
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
	   *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
	   *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.first(characters, 'blocked');
	   * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
	   *
	   * // using "_.where" callback shorthand
	   * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
	   * // => ['barney', 'fred']
	   */
	  function first(array, callback, thisArg) {
	    var n = 0,
	        length = array ? array.length : 0;

	    if (typeof callback != 'number' && callback != null) {
	      var index = -1;
	      callback = createCallback(callback, thisArg, 3);
	      while (++index < length && callback(array[index], index, array)) {
	        n++;
	      }
	    } else {
	      n = callback;
	      if (n == null || thisArg) {
	        return array ? array[0] : undefined;
	      }
	    }
	    return slice(array, 0, nativeMin(nativeMax(0, n), length));
	  }

	  /**
	   * Flattens a nested array (the nesting can be to any depth). If `isShallow`
	   * is truey, the array will only be flattened a single level. If a callback
	   * is provided each element of the array is passed through the callback before
	   * flattening. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to flatten.
	   * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a new flattened array.
	   * @example
	   *
	   * _.flatten([1, [2], [3, [[4]]]]);
	   * // => [1, 2, 3, 4];
	   *
	   * _.flatten([1, [2], [3, [[4]]]], true);
	   * // => [1, 2, 3, [[4]]];
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
	   *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.flatten(characters, 'pets');
	   * // => ['hoppy', 'baby puss', 'dino']
	   */
	  function flatten(array, isShallow) {
	    return baseFlatten(array, isShallow);
	  }

	  /**
	   * Gets the index at which the first occurrence of `value` is found using
	   * strict equality for comparisons, i.e. `===`. If the array is already sorted
	   * providing `true` for `fromIndex` will run a faster binary search.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	   *  to perform a binary search on a sorted array.
	   * @returns {number} Returns the index of the matched value or `-1`.
	   * @example
	   *
	   * _.indexOf([1, 2, 3, 1, 2, 3], 2);
	   * // => 1
	   *
	   * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
	   * // => 4
	   *
	   * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
	   * // => 2
	   */
	  function indexOf(array, value, fromIndex) {
	    if (typeof fromIndex == 'number') {
	      var length = array ? array.length : 0;
	      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
	    } else if (fromIndex) {
	      var index = sortedIndex(array, value);
	      return array[index] === value ? index : -1;
	    }
	    return baseIndexOf(array, value, fromIndex);
	  }

	  /**
	   * Gets all but the last element or last `n` elements of an array. If a
	   * callback is provided elements at the end of the array are excluded from
	   * the result as long as the callback returns truey. The callback is bound
	   * to `thisArg` and invoked with three arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to query.
	   * @param {Function|Object|number|string} [callback=1] The function called
	   *  per element or the number of elements to exclude. If a property name or
	   *  object is provided it will be used to create a "_.pluck" or "_.where"
	   *  style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a slice of `array`.
	   * @example
	   *
	   * _.initial([1, 2, 3]);
	   * // => [1, 2]
	   *
	   * _.initial([1, 2, 3], 2);
	   * // => [1]
	   *
	   * _.initial([1, 2, 3], function(num) {
	   *   return num > 1;
	   * });
	   * // => [1]
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
	   *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
	   *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.initial(characters, 'blocked');
	   * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
	   *
	   * // using "_.where" callback shorthand
	   * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
	   * // => ['barney', 'fred']
	   */
	  function initial(array, callback, thisArg) {
	    var n = 0,
	        length = array ? array.length : 0;

	    if (typeof callback != 'number' && callback != null) {
	      var index = length;
	      callback = createCallback(callback, thisArg, 3);
	      while (index-- && callback(array[index], index, array)) {
	        n++;
	      }
	    } else {
	      n = (callback == null || thisArg) ? 1 : callback || n;
	    }
	    return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
	  }

	  /**
	   * Creates an array of unique values present in all provided arrays using
	   * strict equality for comparisons, i.e. `===`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {...Array} [array] The arrays to inspect.
	   * @returns {Array} Returns an array of shared values.
	   * @example
	   *
	   * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	   * // => [1, 2]
	   */
	  function intersection() {
	    var args = [],
	        argsIndex = -1,
	        argsLength = arguments.length;

	    while (++argsIndex < argsLength) {
	      var value = arguments[argsIndex];
	       if (isArray(value) || isArguments(value)) {
	         args.push(value);
	       }
	    }
	    var array = args[0],
	        index = -1,
	        indexOf = getIndexOf(),
	        length = array ? array.length : 0,
	        result = [];

	    outer:
	    while (++index < length) {
	      value = array[index];
	      if (indexOf(result, value) < 0) {
	        var argsIndex = argsLength;
	        while (--argsIndex) {
	          if (indexOf(args[argsIndex], value) < 0) {
	            continue outer;
	          }
	        }
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  /**
	   * Gets the last element or last `n` elements of an array. If a callback is
	   * provided elements at the end of the array are returned as long as the
	   * callback returns truey. The callback is bound to `thisArg` and invoked
	   * with three arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to query.
	   * @param {Function|Object|number|string} [callback] The function called
	   *  per element or the number of elements to return. If a property name or
	   *  object is provided it will be used to create a "_.pluck" or "_.where"
	   *  style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {*} Returns the last element(s) of `array`.
	   * @example
	   *
	   * _.last([1, 2, 3]);
	   * // => 3
	   *
	   * _.last([1, 2, 3], 2);
	   * // => [2, 3]
	   *
	   * _.last([1, 2, 3], function(num) {
	   *   return num > 1;
	   * });
	   * // => [2, 3]
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
	   *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
	   *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.pluck(_.last(characters, 'blocked'), 'name');
	   * // => ['fred', 'pebbles']
	   *
	   * // using "_.where" callback shorthand
	   * _.last(characters, { 'employer': 'na' });
	   * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
	   */
	  function last(array, callback, thisArg) {
	    var n = 0,
	        length = array ? array.length : 0;

	    if (typeof callback != 'number' && callback != null) {
	      var index = length;
	      callback = createCallback(callback, thisArg, 3);
	      while (index-- && callback(array[index], index, array)) {
	        n++;
	      }
	    } else {
	      n = callback;
	      if (n == null || thisArg) {
	        return array ? array[length - 1] : undefined;
	      }
	    }
	    return slice(array, nativeMax(0, length - n));
	  }

	  /**
	   * Gets the index at which the last occurrence of `value` is found using strict
	   * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
	   * as the offset from the end of the collection.
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} [fromIndex=array.length-1] The index to search from.
	   * @returns {number} Returns the index of the matched value or `-1`.
	   * @example
	   *
	   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
	   * // => 4
	   *
	   * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
	   * // => 1
	   */
	  function lastIndexOf(array, value, fromIndex) {
	    var index = array ? array.length : 0;
	    if (typeof fromIndex == 'number') {
	      index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
	    }
	    while (index--) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Creates an array of numbers (positive and/or negative) progressing from
	   * `start` up to but not including `end`. If `start` is less than `stop` a
	   * zero-length range is created unless a negative `step` is specified.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {number} [start=0] The start of the range.
	   * @param {number} end The end of the range.
	   * @param {number} [step=1] The value to increment or decrement by.
	   * @returns {Array} Returns a new range array.
	   * @example
	   *
	   * _.range(4);
	   * // => [0, 1, 2, 3]
	   *
	   * _.range(1, 5);
	   * // => [1, 2, 3, 4]
	   *
	   * _.range(0, 20, 5);
	   * // => [0, 5, 10, 15]
	   *
	   * _.range(0, -4, -1);
	   * // => [0, -1, -2, -3]
	   *
	   * _.range(1, 4, 0);
	   * // => [1, 1, 1]
	   *
	   * _.range(0);
	   * // => []
	   */
	  function range(start, end, step) {
	    start = +start || 0;
	    step =  (+step || 1);

	    if (end == null) {
	      end = start;
	      start = 0;
	    }
	    // use `Array(length)` so engines like Chakra and V8 avoid slower modes
	    // http://youtu.be/XAqIpGU8ZZk#t=17m25s
	    var index = -1,
	        length = nativeMax(0, ceil((end - start) / step)),
	        result = Array(length);

	    while (++index < length) {
	      result[index] = start;
	      start += step;
	    }
	    return result;
	  }

	  /**
	   * The opposite of `_.initial` this method gets all but the first element or
	   * first `n` elements of an array. If a callback function is provided elements
	   * at the beginning of the array are excluded from the result as long as the
	   * callback returns truey. The callback is bound to `thisArg` and invoked
	   * with three arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias drop, tail
	   * @category Arrays
	   * @param {Array} array The array to query.
	   * @param {Function|Object|number|string} [callback=1] The function called
	   *  per element or the number of elements to exclude. If a property name or
	   *  object is provided it will be used to create a "_.pluck" or "_.where"
	   *  style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a slice of `array`.
	   * @example
	   *
	   * _.rest([1, 2, 3]);
	   * // => [2, 3]
	   *
	   * _.rest([1, 2, 3], 2);
	   * // => [3]
	   *
	   * _.rest([1, 2, 3], function(num) {
	   *   return num < 3;
	   * });
	   * // => [3]
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
	   *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
	   *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
	   * ];
	   *
	   * // using "_.pluck" callback shorthand
	   * _.pluck(_.rest(characters, 'blocked'), 'name');
	   * // => ['fred', 'pebbles']
	   *
	   * // using "_.where" callback shorthand
	   * _.rest(characters, { 'employer': 'slate' });
	   * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
	   */
	  function rest(array, callback, thisArg) {
	    if (typeof callback != 'number' && callback != null) {
	      var n = 0,
	          index = -1,
	          length = array ? array.length : 0;

	      callback = createCallback(callback, thisArg, 3);
	      while (++index < length && callback(array[index], index, array)) {
	        n++;
	      }
	    } else {
	      n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
	    }
	    return slice(array, n);
	  }

	  /**
	   * Uses a binary search to determine the smallest index at which a value
	   * should be inserted into a given sorted array in order to maintain the sort
	   * order of the array. If a callback is provided it will be executed for
	   * `value` and each element of `array` to compute their sort ranking. The
	   * callback is bound to `thisArg` and invoked with one argument; (value).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to inspect.
	   * @param {*} value The value to evaluate.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {number} Returns the index at which `value` should be inserted
	   *  into `array`.
	   * @example
	   *
	   * _.sortedIndex([20, 30, 50], 40);
	   * // => 2
	   *
	   * // using "_.pluck" callback shorthand
	   * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	   * // => 2
	   *
	   * var dict = {
	   *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
	   * };
	   *
	   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
	   *   return dict.wordToNumber[word];
	   * });
	   * // => 2
	   *
	   * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
	   *   return this.wordToNumber[word];
	   * }, dict);
	   * // => 2
	   */
	  function sortedIndex(array, value, callback, thisArg) {
	    var low = 0,
	        high = array ? array.length : low;

	    // explicitly reference `identity` for better inlining in Firefox
	    callback = callback ? createCallback(callback, thisArg, 1) : identity;
	    value = callback(value);

	    while (low < high) {
	      var mid = (low + high) >>> 1;
	      (callback(array[mid]) < value)
	        ? low = mid + 1
	        : high = mid;
	    }
	    return low;
	  }

	  /**
	   * Creates an array of unique values, in order, of the provided arrays using
	   * strict equality for comparisons, i.e. `===`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {...Array} [array] The arrays to inspect.
	   * @returns {Array} Returns an array of combined values.
	   * @example
	   *
	   * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
	   * // => [1, 2, 3, 5, 4]
	   */
	  function union() {
	    return baseUniq(baseFlatten(arguments, true, true));
	  }

	  /**
	   * Creates a duplicate-value-free version of an array using strict equality
	   * for comparisons, i.e. `===`. If the array is sorted, providing
	   * `true` for `isSorted` will use a faster algorithm. If a callback is provided
	   * each element of `array` is passed through the callback before uniqueness
	   * is computed. The callback is bound to `thisArg` and invoked with three
	   * arguments; (value, index, array).
	   *
	   * If a property name is provided for `callback` the created "_.pluck" style
	   * callback will return the property value of the given element.
	   *
	   * If an object is provided for `callback` the created "_.where" style callback
	   * will return `true` for elements that have the properties of the given object,
	   * else `false`.
	   *
	   * @static
	   * @memberOf _
	   * @alias unique
	   * @category Arrays
	   * @param {Array} array The array to process.
	   * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
	   * @param {Function|Object|string} [callback=identity] The function called
	   *  per iteration. If a property name or object is provided it will be used
	   *  to create a "_.pluck" or "_.where" style callback, respectively.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns a duplicate-value-free array.
	   * @example
	   *
	   * _.uniq([1, 2, 1, 3, 1]);
	   * // => [1, 2, 3]
	   *
	   * _.uniq([1, 1, 2, 2, 3], true);
	   * // => [1, 2, 3]
	   *
	   * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
	   * // => ['A', 'b', 'C']
	   *
	   * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
	   * // => [1, 2.5, 3]
	   *
	   * // using "_.pluck" callback shorthand
	   * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	   * // => [{ 'x': 1 }, { 'x': 2 }]
	   */
	  function uniq(array, isSorted, callback, thisArg) {
	    // juggle arguments
	    if (typeof isSorted != 'boolean' && isSorted != null) {
	      thisArg = callback;
	      callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
	      isSorted = false;
	    }
	    if (callback != null) {
	      callback = createCallback(callback, thisArg, 3);
	    }
	    return baseUniq(array, isSorted, callback);
	  }

	  /**
	   * Creates an array excluding all provided values using strict equality for
	   * comparisons, i.e. `===`.
	   *
	   * @static
	   * @memberOf _
	   * @category Arrays
	   * @param {Array} array The array to filter.
	   * @param {...*} [value] The values to exclude.
	   * @returns {Array} Returns a new array of filtered values.
	   * @example
	   *
	   * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
	   * // => [2, 3, 4]
	   */
	  function without(array) {
	    return baseDifference(array, slice(arguments, 1));
	  }

	  /**
	   * Creates an array of grouped elements, the first of which contains the first
	   * elements of the given arrays, the second of which contains the second
	   * elements of the given arrays, and so on.
	   *
	   * @static
	   * @memberOf _
	   * @alias unzip
	   * @category Arrays
	   * @param {...Array} [array] Arrays to process.
	   * @returns {Array} Returns a new array of grouped elements.
	   * @example
	   *
	   * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	   * // => [['fred', 30, true], ['barney', 40, false]]
	   */
	  function zip() {
	    var index = -1,
	        length = max(pluck(arguments, 'length')),
	        result = Array(length < 0 ? 0 : length);

	    while (++index < length) {
	      result[index] = pluck(arguments, index);
	    }
	    return result;
	  }

	  /**
	   * Creates an object composed from arrays of `keys` and `values`. Provide
	   * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
	   * or two arrays, one of `keys` and one of corresponding `values`.
	   *
	   * @static
	   * @memberOf _
	   * @alias object
	   * @category Arrays
	   * @param {Array} keys The array of keys.
	   * @param {Array} [values=[]] The array of values.
	   * @returns {Object} Returns an object composed of the given keys and
	   *  corresponding values.
	   * @example
	   *
	   * _.zipObject(['fred', 'barney'], [30, 40]);
	   * // => { 'fred': 30, 'barney': 40 }
	   */
	  function zipObject(keys, values) {
	    var index = -1,
	        length = keys ? keys.length : 0,
	        result = {};

	    if (!values && length && !isArray(keys[0])) {
	      values = [];
	    }
	    while (++index < length) {
	      var key = keys[index];
	      if (values) {
	        result[key] = values[index];
	      } else if (key) {
	        result[key[0]] = key[1];
	      }
	    }
	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Creates a function that executes `func`, with  the `this` binding and
	   * arguments of the created function, only after being called `n` times.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {number} n The number of times the function must be called before
	   *  `func` is executed.
	   * @param {Function} func The function to restrict.
	   * @returns {Function} Returns the new restricted function.
	   * @example
	   *
	   * var saves = ['profile', 'settings'];
	   *
	   * var done = _.after(saves.length, function() {
	   *   console.log('Done saving!');
	   * });
	   *
	   * _.forEach(saves, function(type) {
	   *   asyncSave({ 'type': type, 'complete': done });
	   * });
	   * // => logs 'Done saving!', after all saves have completed
	   */
	  function after(n, func) {
	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    return function() {
	      if (--n < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  }

	  /**
	   * Creates a function that, when called, invokes `func` with the `this`
	   * binding of `thisArg` and prepends any additional `bind` arguments to those
	   * provided to the bound function.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to bind.
	   * @param {*} [thisArg] The `this` binding of `func`.
	   * @param {...*} [arg] Arguments to be partially applied.
	   * @returns {Function} Returns the new bound function.
	   * @example
	   *
	   * var func = function(greeting) {
	   *   return greeting + ' ' + this.name;
	   * };
	   *
	   * func = _.bind(func, { 'name': 'fred' }, 'hi');
	   * func();
	   * // => 'hi fred'
	   */
	  function bind(func, thisArg) {
	    return arguments.length > 2
	      ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
	      : createWrapper(func, 1, null, null, thisArg);
	  }

	  /**
	   * Binds methods of an object to the object itself, overwriting the existing
	   * method. Method names may be specified as individual arguments or as arrays
	   * of method names. If no method names are provided all the function properties
	   * of `object` will be bound.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Object} object The object to bind and assign the bound methods to.
	   * @param {...string} [methodName] The object method names to
	   *  bind, specified as individual method names or arrays of method names.
	   * @returns {Object} Returns `object`.
	   * @example
	   *
	   * var view = {
	   *   'label': 'docs',
	   *   'onClick': function() { console.log('clicked ' + this.label); }
	   * };
	   *
	   * _.bindAll(view);
	   * jQuery('#docs').on('click', view.onClick);
	   * // => logs 'clicked docs', when the button is clicked
	   */
	  function bindAll(object) {
	    var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
	        index = -1,
	        length = funcs.length;

	    while (++index < length) {
	      var key = funcs[index];
	      object[key] = createWrapper(object[key], 1, null, null, object);
	    }
	    return object;
	  }

	  /**
	   * Creates a function that is the composition of the provided functions,
	   * where each function consumes the return value of the function that follows.
	   * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
	   * Each function is executed with the `this` binding of the composed function.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {...Function} [func] Functions to compose.
	   * @returns {Function} Returns the new composed function.
	   * @example
	   *
	   * var realNameMap = {
	   *   'pebbles': 'penelope'
	   * };
	   *
	   * var format = function(name) {
	   *   name = realNameMap[name.toLowerCase()] || name;
	   *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
	   * };
	   *
	   * var greet = function(formatted) {
	   *   return 'Hiya ' + formatted + '!';
	   * };
	   *
	   * var welcome = _.compose(greet, format);
	   * welcome('pebbles');
	   * // => 'Hiya Penelope!'
	   */
	  function compose() {
	    var funcs = arguments,
	        length = funcs.length;

	    while (length--) {
	      if (!isFunction(funcs[length])) {
	        throw new TypeError;
	      }
	    }
	    return function() {
	      var args = arguments,
	          length = funcs.length;

	      while (length--) {
	        args = [funcs[length].apply(this, args)];
	      }
	      return args[0];
	    };
	  }

	  /**
	   * Creates a function that will delay the execution of `func` until after
	   * `wait` milliseconds have elapsed since the last time it was invoked.
	   * Provide an options object to indicate that `func` should be invoked on
	   * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
	   * to the debounced function will return the result of the last `func` call.
	   *
	   * Note: If `leading` and `trailing` options are `true` `func` will be called
	   * on the trailing edge of the timeout only if the the debounced function is
	   * invoked more than once during the `wait` timeout.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to debounce.
	   * @param {number} wait The number of milliseconds to delay.
	   * @param {Object} [options] The options object.
	   * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
	   * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
	   * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
	   * @returns {Function} Returns the new debounced function.
	   * @example
	   *
	   * // avoid costly calculations while the window size is in flux
	   * var lazyLayout = _.debounce(calculateLayout, 150);
	   * jQuery(window).on('resize', lazyLayout);
	   *
	   * // execute `sendMail` when the click event is fired, debouncing subsequent calls
	   * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	   *   'leading': true,
	   *   'trailing': false
	   * });
	   *
	   * // ensure `batchLog` is executed once after 1 second of debounced calls
	   * var source = new EventSource('/stream');
	   * source.addEventListener('message', _.debounce(batchLog, 250, {
	   *   'maxWait': 1000
	   * }, false);
	   */
	  function debounce(func, wait, options) {
	    var args,
	        maxTimeoutId,
	        result,
	        stamp,
	        thisArg,
	        timeoutId,
	        trailingCall,
	        lastCalled = 0,
	        maxWait = false,
	        trailing = true;

	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    wait = nativeMax(0, wait) || 0;
	    if (options === true) {
	      var leading = true;
	      trailing = false;
	    } else if (isObject(options)) {
	      leading = options.leading;
	      maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
	      trailing = 'trailing' in options ? options.trailing : trailing;
	    }
	    var delayed = function() {
	      var remaining = wait - (now() - stamp);
	      if (remaining <= 0) {
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        var isCalled = trailingCall;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = null;
	          }
	        }
	      } else {
	        timeoutId = setTimeout(delayed, remaining);
	      }
	    };

	    var maxDelayed = function() {
	      if (timeoutId) {
	        clearTimeout(timeoutId);
	      }
	      maxTimeoutId = timeoutId = trailingCall = undefined;
	      if (trailing || (maxWait !== wait)) {
	        lastCalled = now();
	        result = func.apply(thisArg, args);
	        if (!timeoutId && !maxTimeoutId) {
	          args = thisArg = null;
	        }
	      }
	    };

	    return function() {
	      args = arguments;
	      stamp = now();
	      thisArg = this;
	      trailingCall = trailing && (timeoutId || !leading);

	      if (maxWait === false) {
	        var leadingCall = leading && !timeoutId;
	      } else {
	        if (!maxTimeoutId && !leading) {
	          lastCalled = stamp;
	        }
	        var remaining = maxWait - (stamp - lastCalled),
	            isCalled = remaining <= 0;

	        if (isCalled) {
	          if (maxTimeoutId) {
	            maxTimeoutId = clearTimeout(maxTimeoutId);
	          }
	          lastCalled = stamp;
	          result = func.apply(thisArg, args);
	        }
	        else if (!maxTimeoutId) {
	          maxTimeoutId = setTimeout(maxDelayed, remaining);
	        }
	      }
	      if (isCalled && timeoutId) {
	        timeoutId = clearTimeout(timeoutId);
	      }
	      else if (!timeoutId && wait !== maxWait) {
	        timeoutId = setTimeout(delayed, wait);
	      }
	      if (leadingCall) {
	        isCalled = true;
	        result = func.apply(thisArg, args);
	      }
	      if (isCalled && !timeoutId && !maxTimeoutId) {
	        args = thisArg = null;
	      }
	      return result;
	    };
	  }

	  /**
	   * Defers executing the `func` function until the current call stack has cleared.
	   * Additional arguments will be provided to `func` when it is invoked.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to defer.
	   * @param {...*} [arg] Arguments to invoke the function with.
	   * @returns {number} Returns the timer id.
	   * @example
	   *
	   * _.defer(function(text) { console.log(text); }, 'deferred');
	   * // logs 'deferred' after one or more milliseconds
	   */
	  function defer(func) {
	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    var args = slice(arguments, 1);
	    return setTimeout(function() { func.apply(undefined, args); }, 1);
	  }

	  /**
	   * Executes the `func` function after `wait` milliseconds. Additional arguments
	   * will be provided to `func` when it is invoked.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to delay.
	   * @param {number} wait The number of milliseconds to delay execution.
	   * @param {...*} [arg] Arguments to invoke the function with.
	   * @returns {number} Returns the timer id.
	   * @example
	   *
	   * _.delay(function(text) { console.log(text); }, 1000, 'later');
	   * // => logs 'later' after one second
	   */
	  function delay(func, wait) {
	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    var args = slice(arguments, 2);
	    return setTimeout(function() { func.apply(undefined, args); }, wait);
	  }

	  /**
	   * Creates a function that memoizes the result of `func`. If `resolver` is
	   * provided it will be used to determine the cache key for storing the result
	   * based on the arguments provided to the memoized function. By default, the
	   * first argument provided to the memoized function is used as the cache key.
	   * The `func` is executed with the `this` binding of the memoized function.
	   * The result cache is exposed as the `cache` property on the memoized function.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to have its output memoized.
	   * @param {Function} [resolver] A function used to resolve the cache key.
	   * @returns {Function} Returns the new memoizing function.
	   * @example
	   *
	   * var fibonacci = _.memoize(function(n) {
	   *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
	   * });
	   *
	   * fibonacci(9)
	   * // => 34
	   *
	   * var data = {
	   *   'fred': { 'name': 'fred', 'age': 40 },
	   *   'pebbles': { 'name': 'pebbles', 'age': 1 }
	   * };
	   *
	   * // modifying the result cache
	   * var get = _.memoize(function(name) { return data[name]; }, _.identity);
	   * get('pebbles');
	   * // => { 'name': 'pebbles', 'age': 1 }
	   *
	   * get.cache.pebbles.name = 'penelope';
	   * get('pebbles');
	   * // => { 'name': 'penelope', 'age': 1 }
	   */
	  function memoize(func, resolver) {
	    var cache = {};
	    return function() {
	      var key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];
	      return hasOwnProperty.call(cache, key)
	        ? cache[key]
	        : (cache[key] = func.apply(this, arguments));
	    };
	  }

	  /**
	   * Creates a function that is restricted to execute `func` once. Repeat calls to
	   * the function will return the value of the first call. The `func` is executed
	   * with the `this` binding of the created function.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to restrict.
	   * @returns {Function} Returns the new restricted function.
	   * @example
	   *
	   * var initialize = _.once(createApplication);
	   * initialize();
	   * initialize();
	   * // `initialize` executes `createApplication` once
	   */
	  function once(func) {
	    var ran,
	        result;

	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    return function() {
	      if (ran) {
	        return result;
	      }
	      ran = true;
	      result = func.apply(this, arguments);

	      // clear the `func` variable so the function may be garbage collected
	      func = null;
	      return result;
	    };
	  }

	  /**
	   * Creates a function that, when called, invokes `func` with any additional
	   * `partial` arguments prepended to those provided to the new function. This
	   * method is similar to `_.bind` except it does **not** alter the `this` binding.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to partially apply arguments to.
	   * @param {...*} [arg] Arguments to be partially applied.
	   * @returns {Function} Returns the new partially applied function.
	   * @example
	   *
	   * var greet = function(greeting, name) { return greeting + ' ' + name; };
	   * var hi = _.partial(greet, 'hi');
	   * hi('fred');
	   * // => 'hi fred'
	   */
	  function partial(func) {
	    return createWrapper(func, 16, slice(arguments, 1));
	  }

	  /**
	   * Creates a function that, when executed, will only call the `func` function
	   * at most once per every `wait` milliseconds. Provide an options object to
	   * indicate that `func` should be invoked on the leading and/or trailing edge
	   * of the `wait` timeout. Subsequent calls to the throttled function will
	   * return the result of the last `func` call.
	   *
	   * Note: If `leading` and `trailing` options are `true` `func` will be called
	   * on the trailing edge of the timeout only if the the throttled function is
	   * invoked more than once during the `wait` timeout.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {Function} func The function to throttle.
	   * @param {number} wait The number of milliseconds to throttle executions to.
	   * @param {Object} [options] The options object.
	   * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
	   * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
	   * @returns {Function} Returns the new throttled function.
	   * @example
	   *
	   * // avoid excessively updating the position while scrolling
	   * var throttled = _.throttle(updatePosition, 100);
	   * jQuery(window).on('scroll', throttled);
	   *
	   * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
	   * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	   *   'trailing': false
	   * }));
	   */
	  function throttle(func, wait, options) {
	    var leading = true,
	        trailing = true;

	    if (!isFunction(func)) {
	      throw new TypeError;
	    }
	    if (options === false) {
	      leading = false;
	    } else if (isObject(options)) {
	      leading = 'leading' in options ? options.leading : leading;
	      trailing = 'trailing' in options ? options.trailing : trailing;
	    }
	    options = {};
	    options.leading = leading;
	    options.maxWait = wait;
	    options.trailing = trailing;

	    return debounce(func, wait, options);
	  }

	  /**
	   * Creates a function that provides `value` to the wrapper function as its
	   * first argument. Additional arguments provided to the function are appended
	   * to those provided to the wrapper function. The wrapper is executed with
	   * the `this` binding of the created function.
	   *
	   * @static
	   * @memberOf _
	   * @category Functions
	   * @param {*} value The value to wrap.
	   * @param {Function} wrapper The wrapper function.
	   * @returns {Function} Returns the new function.
	   * @example
	   *
	   * var p = _.wrap(_.escape, function(func, text) {
	   *   return '<p>' + func(text) + '</p>';
	   * });
	   *
	   * p('Fred, Wilma, & Pebbles');
	   * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
	   */
	  function wrap(value, wrapper) {
	    return createWrapper(wrapper, 16, [value]);
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Produces a callback bound to an optional `thisArg`. If `func` is a property
	   * name the created callback will return the property value for a given element.
	   * If `func` is an object the created callback will return `true` for elements
	   * that contain the equivalent object properties, otherwise it will return `false`.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {*} [func=identity] The value to convert to a callback.
	   * @param {*} [thisArg] The `this` binding of the created callback.
	   * @param {number} [argCount] The number of arguments the callback accepts.
	   * @returns {Function} Returns a callback function.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * // wrap to create custom callback shorthands
	   * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
	   *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
	   *   return !match ? func(callback, thisArg) : function(object) {
	   *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
	   *   };
	   * });
	   *
	   * _.filter(characters, 'age__gt38');
	   * // => [{ 'name': 'fred', 'age': 40 }]
	   */
	  function createCallback(func, thisArg, argCount) {
	    var type = typeof func;
	    if (func == null || type == 'function') {
	      return baseCreateCallback(func, thisArg, argCount);
	    }
	    // handle "_.pluck" style callback shorthands
	    if (type != 'object') {
	      return property(func);
	    }
	    var props = keys(func);
	    return function(object) {
	      var length = props.length,
	          result = false;

	      while (length--) {
	        if (!(result = object[props[length]] === func[props[length]])) {
	          break;
	        }
	      }
	      return result;
	    };
	  }

	  /**
	   * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
	   * corresponding HTML entities.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {string} string The string to escape.
	   * @returns {string} Returns the escaped string.
	   * @example
	   *
	   * _.escape('Fred, Wilma, & Pebbles');
	   * // => 'Fred, Wilma, &amp; Pebbles'
	   */
	  function escape(string) {
	    return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
	  }

	  /**
	   * This method returns the first argument provided to it.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {*} value Any value.
	   * @returns {*} Returns `value`.
	   * @example
	   *
	   * var object = { 'name': 'fred' };
	   * _.identity(object) === object;
	   * // => true
	   */
	  function identity(value) {
	    return value;
	  }

	  /**
	   * Adds function properties of a source object to the destination object.
	   * If `object` is a function methods will be added to its prototype as well.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {Function|Object} [object=lodash] object The destination object.
	   * @param {Object} source The object of functions to add.
	   * @param {Object} [options] The options object.
	   * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
	   * @example
	   *
	   * function capitalize(string) {
	   *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
	   * }
	   *
	   * _.mixin({ 'capitalize': capitalize });
	   * _.capitalize('fred');
	   * // => 'Fred'
	   *
	   * _('fred').capitalize().value();
	   * // => 'Fred'
	   *
	   * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
	   * _('fred').capitalize();
	   * // => 'Fred'
	   */
	  function mixin(object) {
	    forEach(functions(object), function(methodName) {
	      var func = lodash[methodName] = object[methodName];

	      lodash.prototype[methodName] = function() {
	        var args = [this.__wrapped__];
	        push.apply(args, arguments);

	        var result = func.apply(lodash, args);
	        return this.__chain__
	          ? new lodashWrapper(result, true)
	          : result;
	      };
	    });
	  }

	  /**
	   * Reverts the '_' variable to its previous value and returns a reference to
	   * the `lodash` function.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @returns {Function} Returns the `lodash` function.
	   * @example
	   *
	   * var lodash = _.noConflict();
	   */
	  function noConflict() {
	    root._ = oldDash;
	    return this;
	  }

	  /**
	   * A no-operation function.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @example
	   *
	   * var object = { 'name': 'fred' };
	   * _.noop(object) === undefined;
	   * // => true
	   */
	  function noop() {
	    // no operation performed
	  }

	  /**
	   * Gets the number of milliseconds that have elapsed since the Unix epoch
	   * (1 January 1970 00:00:00 UTC).
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @example
	   *
	   * var stamp = _.now();
	   * _.defer(function() { console.log(_.now() - stamp); });
	   * // => logs the number of milliseconds it took for the deferred function to be called
	   */
	  var now = isNative(now = Date.now) && now || function() {
	    return new Date().getTime();
	  };

	  /**
	   * Creates a "_.pluck" style function, which returns the `key` value of a
	   * given object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {string} key The name of the property to retrieve.
	   * @returns {Function} Returns the new function.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'fred',   'age': 40 },
	   *   { 'name': 'barney', 'age': 36 }
	   * ];
	   *
	   * var getName = _.property('name');
	   *
	   * _.map(characters, getName);
	   * // => ['barney', 'fred']
	   *
	   * _.sortBy(characters, getName);
	   * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
	   */
	  function property(key) {
	    return function(object) {
	      return object[key];
	    };
	  }

	  /**
	   * Produces a random number between `min` and `max` (inclusive). If only one
	   * argument is provided a number between `0` and the given number will be
	   * returned. If `floating` is truey or either `min` or `max` are floats a
	   * floating-point number will be returned instead of an integer.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {number} [min=0] The minimum possible value.
	   * @param {number} [max=1] The maximum possible value.
	   * @param {boolean} [floating=false] Specify returning a floating-point number.
	   * @returns {number} Returns a random number.
	   * @example
	   *
	   * _.random(0, 5);
	   * // => an integer between 0 and 5
	   *
	   * _.random(5);
	   * // => also an integer between 0 and 5
	   *
	   * _.random(5, true);
	   * // => a floating-point number between 0 and 5
	   *
	   * _.random(1.2, 5.2);
	   * // => a floating-point number between 1.2 and 5.2
	   */
	  function random(min, max) {
	    if (min == null && max == null) {
	      max = 1;
	    }
	    min = +min || 0;
	    if (max == null) {
	      max = min;
	      min = 0;
	    } else {
	      max = +max || 0;
	    }
	    return min + floor(nativeRandom() * (max - min + 1));
	  }

	  /**
	   * Resolves the value of property `key` on `object`. If `key` is a function
	   * it will be invoked with the `this` binding of `object` and its result returned,
	   * else the property value is returned. If `object` is falsey then `undefined`
	   * is returned.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {Object} object The object to inspect.
	   * @param {string} key The name of the property to resolve.
	   * @returns {*} Returns the resolved value.
	   * @example
	   *
	   * var object = {
	   *   'cheese': 'crumpets',
	   *   'stuff': function() {
	   *     return 'nonsense';
	   *   }
	   * };
	   *
	   * _.result(object, 'cheese');
	   * // => 'crumpets'
	   *
	   * _.result(object, 'stuff');
	   * // => 'nonsense'
	   */
	  function result(object, key) {
	    if (object) {
	      var value = object[key];
	      return isFunction(value) ? object[key]() : value;
	    }
	  }

	  /**
	   * A micro-templating method that handles arbitrary delimiters, preserves
	   * whitespace, and correctly escapes quotes within interpolated code.
	   *
	   * Note: In the development build, `_.template` utilizes sourceURLs for easier
	   * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
	   *
	   * For more information on precompiling templates see:
	   * http://lodash.com/custom-builds
	   *
	   * For more information on Chrome extension sandboxes see:
	   * http://developer.chrome.com/stable/extensions/sandboxingEval.html
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {string} text The template text.
	   * @param {Object} data The data object used to populate the text.
	   * @param {Object} [options] The options object.
	   * @param {RegExp} [options.escape] The "escape" delimiter.
	   * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	   * @param {Object} [options.imports] An object to import into the template as local variables.
	   * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	   * @param {string} [sourceURL] The sourceURL of the template's compiled source.
	   * @param {string} [variable] The data object variable name.
	   * @returns {Function|string} Returns a compiled function when no `data` object
	   *  is given, else it returns the interpolated text.
	   * @example
	   *
	   * // using the "interpolate" delimiter to create a compiled template
	   * var compiled = _.template('hello <%= name %>');
	   * compiled({ 'name': 'fred' });
	   * // => 'hello fred'
	   *
	   * // using the "escape" delimiter to escape HTML in data property values
	   * _.template('<b><%- value %></b>', { 'value': '<script>' });
	   * // => '<b>&lt;script&gt;</b>'
	   *
	   * // using the "evaluate" delimiter to generate HTML
	   * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
	   * _.template(list, { 'people': ['fred', 'barney'] });
	   * // => '<li>fred</li><li>barney</li>'
	   *
	   * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
	   * _.template('hello ${ name }', { 'name': 'pebbles' });
	   * // => 'hello pebbles'
	   *
	   * // using the internal `print` function in "evaluate" delimiters
	   * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
	   * // => 'hello barney!'
	   *
	   * // using a custom template delimiters
	   * _.templateSettings = {
	   *   'interpolate': /{{([\s\S]+?)}}/g
	   * };
	   *
	   * _.template('hello {{ name }}!', { 'name': 'mustache' });
	   * // => 'hello mustache!'
	   *
	   * // using the `imports` option to import jQuery
	   * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
	   * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
	   * // => '<li>fred</li><li>barney</li>'
	   *
	   * // using the `sourceURL` option to specify a custom sourceURL for the template
	   * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
	   * compiled(data);
	   * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	   *
	   * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	   * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
	   * compiled.source;
	   * // => function(data) {
	   *   var __t, __p = '', __e = _.escape;
	   *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
	   *   return __p;
	   * }
	   *
	   * // using the `source` property to inline compiled templates for meaningful
	   * // line numbers in error messages and a stack trace
	   * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	   *   var JST = {\
	   *     "main": ' + _.template(mainText).source + '\
	   *   };\
	   * ');
	   */
	  function template(text, data, options) {
	    var _ = lodash,
	        settings = _.templateSettings;

	    text = String(text || '');
	    options = defaults({}, options, settings);

	    var index = 0,
	        source = "__p += '",
	        variable = options.variable;

	    var reDelimiters = RegExp(
	      (options.escape || reNoMatch).source + '|' +
	      (options.interpolate || reNoMatch).source + '|' +
	      (options.evaluate || reNoMatch).source + '|$'
	    , 'g');

	    text.replace(reDelimiters, function(match, escapeValue, interpolateValue, evaluateValue, offset) {
	      source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	      if (escapeValue) {
	        source += "' +\n_.escape(" + escapeValue + ") +\n'";
	      }
	      if (evaluateValue) {
	        source += "';\n" + evaluateValue + ";\n__p += '";
	      }
	      if (interpolateValue) {
	        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	      }
	      index = offset + match.length;
	      return match;
	    });

	    source += "';\n";
	    if (!variable) {
	      variable = 'obj';
	      source = 'with (' + variable + ' || {}) {\n' + source + '\n}\n';
	    }
	    source = 'function(' + variable + ') {\n' +
	      "var __t, __p = '', __j = Array.prototype.join;\n" +
	      "function print() { __p += __j.call(arguments, '') }\n" +
	      source +
	      'return __p\n}';

	    try {
	      var result = Function('_', 'return ' + source)(_);
	    } catch(e) {
	      e.source = source;
	      throw e;
	    }
	    if (data) {
	      return result(data);
	    }
	    result.source = source;
	    return result;
	  }

	  /**
	   * Executes the callback `n` times, returning an array of the results
	   * of each callback execution. The callback is bound to `thisArg` and invoked
	   * with one argument; (index).
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {number} n The number of times to execute the callback.
	   * @param {Function} callback The function called per iteration.
	   * @param {*} [thisArg] The `this` binding of `callback`.
	   * @returns {Array} Returns an array of the results of each `callback` execution.
	   * @example
	   *
	   * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
	   * // => [3, 6, 4]
	   *
	   * _.times(3, function(n) { mage.castSpell(n); });
	   * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
	   *
	   * _.times(3, function(n) { this.cast(n); }, mage);
	   * // => also calls `mage.castSpell(n)` three times
	   */
	  function times(n, callback, thisArg) {
	    n = (n = +n) > -1 ? n : 0;
	    var index = -1,
	        result = Array(n);

	    callback = baseCreateCallback(callback, thisArg, 1);
	    while (++index < n) {
	      result[index] = callback(index);
	    }
	    return result;
	  }

	  /**
	   * The inverse of `_.escape` this method converts the HTML entities
	   * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
	   * corresponding characters.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {string} string The string to unescape.
	   * @returns {string} Returns the unescaped string.
	   * @example
	   *
	   * _.unescape('Fred, Barney &amp; Pebbles');
	   * // => 'Fred, Barney & Pebbles'
	   */
	  function unescape(string) {
	    return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
	  }

	  /**
	   * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
	   *
	   * @static
	   * @memberOf _
	   * @category Utilities
	   * @param {string} [prefix] The value to prefix the ID with.
	   * @returns {string} Returns the unique ID.
	   * @example
	   *
	   * _.uniqueId('contact_');
	   * // => 'contact_104'
	   *
	   * _.uniqueId();
	   * // => '105'
	   */
	  function uniqueId(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Creates a `lodash` object that wraps the given value with explicit
	   * method chaining enabled.
	   *
	   * @static
	   * @memberOf _
	   * @category Chaining
	   * @param {*} value The value to wrap.
	   * @returns {Object} Returns the wrapper object.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney',  'age': 36 },
	   *   { 'name': 'fred',    'age': 40 },
	   *   { 'name': 'pebbles', 'age': 1 }
	   * ];
	   *
	   * var youngest = _.chain(characters)
	   *     .sortBy('age')
	   *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
	   *     .first()
	   *     .value();
	   * // => 'pebbles is 1'
	   */
	  function chain(value) {
	    value = new lodashWrapper(value);
	    value.__chain__ = true;
	    return value;
	  }

	  /**
	   * Invokes `interceptor` with the `value` as the first argument and then
	   * returns `value`. The purpose of this method is to "tap into" a method
	   * chain in order to perform operations on intermediate results within
	   * the chain.
	   *
	   * @static
	   * @memberOf _
	   * @category Chaining
	   * @param {*} value The value to provide to `interceptor`.
	   * @param {Function} interceptor The function to invoke.
	   * @returns {*} Returns `value`.
	   * @example
	   *
	   * _([1, 2, 3, 4])
	   *  .tap(function(array) { array.pop(); })
	   *  .reverse()
	   *  .value();
	   * // => [3, 2, 1]
	   */
	  function tap(value, interceptor) {
	    interceptor(value);
	    return value;
	  }

	  /**
	   * Enables explicit method chaining on the wrapper object.
	   *
	   * @name chain
	   * @memberOf _
	   * @category Chaining
	   * @returns {*} Returns the wrapper object.
	   * @example
	   *
	   * var characters = [
	   *   { 'name': 'barney', 'age': 36 },
	   *   { 'name': 'fred',   'age': 40 }
	   * ];
	   *
	   * // without explicit chaining
	   * _(characters).first();
	   * // => { 'name': 'barney', 'age': 36 }
	   *
	   * // with explicit chaining
	   * _(characters).chain()
	   *   .first()
	   *   .pick('age')
	   *   .value();
	   * // => { 'age': 36 }
	   */
	  function wrapperChain() {
	    this.__chain__ = true;
	    return this;
	  }

	  /**
	   * Extracts the wrapped value.
	   *
	   * @name valueOf
	   * @memberOf _
	   * @alias value
	   * @category Chaining
	   * @returns {*} Returns the wrapped value.
	   * @example
	   *
	   * _([1, 2, 3]).valueOf();
	   * // => [1, 2, 3]
	   */
	  function wrapperValueOf() {
	    return this.__wrapped__;
	  }

	  /*--------------------------------------------------------------------------*/

	  // add functions that return wrapped values when chaining
	  lodash.after = after;
	  lodash.bind = bind;
	  lodash.bindAll = bindAll;
	  lodash.chain = chain;
	  lodash.compact = compact;
	  lodash.compose = compose;
	  lodash.countBy = countBy;
	  lodash.debounce = debounce;
	  lodash.defaults = defaults;
	  lodash.defer = defer;
	  lodash.delay = delay;
	  lodash.difference = difference;
	  lodash.filter = filter;
	  lodash.flatten = flatten;
	  lodash.forEach = forEach;
	  lodash.functions = functions;
	  lodash.groupBy = groupBy;
	  lodash.indexBy = indexBy;
	  lodash.initial = initial;
	  lodash.intersection = intersection;
	  lodash.invert = invert;
	  lodash.invoke = invoke;
	  lodash.keys = keys;
	  lodash.map = map;
	  lodash.max = max;
	  lodash.memoize = memoize;
	  lodash.min = min;
	  lodash.omit = omit;
	  lodash.once = once;
	  lodash.pairs = pairs;
	  lodash.partial = partial;
	  lodash.pick = pick;
	  lodash.pluck = pluck;
	  lodash.range = range;
	  lodash.reject = reject;
	  lodash.rest = rest;
	  lodash.shuffle = shuffle;
	  lodash.sortBy = sortBy;
	  lodash.tap = tap;
	  lodash.throttle = throttle;
	  lodash.times = times;
	  lodash.toArray = toArray;
	  lodash.union = union;
	  lodash.uniq = uniq;
	  lodash.values = values;
	  lodash.where = where;
	  lodash.without = without;
	  lodash.wrap = wrap;
	  lodash.zip = zip;

	  // add aliases
	  lodash.collect = map;
	  lodash.drop = rest;
	  lodash.each = forEach;
	  lodash.extend = assign;
	  lodash.methods = functions;
	  lodash.object = zipObject;
	  lodash.select = filter;
	  lodash.tail = rest;
	  lodash.unique = uniq;

	  /*--------------------------------------------------------------------------*/

	  // add functions that return unwrapped values when chaining
	  lodash.clone = clone;
	  lodash.contains = contains;
	  lodash.escape = escape;
	  lodash.every = every;
	  lodash.find = find;
	  lodash.has = has;
	  lodash.identity = identity;
	  lodash.indexOf = indexOf;
	  lodash.isArguments = isArguments;
	  lodash.isArray = isArray;
	  lodash.isBoolean = isBoolean;
	  lodash.isDate = isDate;
	  lodash.isElement = isElement;
	  lodash.isEmpty = isEmpty;
	  lodash.isEqual = isEqual;
	  lodash.isFinite = isFinite;
	  lodash.isFunction = isFunction;
	  lodash.isNaN = isNaN;
	  lodash.isNull = isNull;
	  lodash.isNumber = isNumber;
	  lodash.isObject = isObject;
	  lodash.isRegExp = isRegExp;
	  lodash.isString = isString;
	  lodash.isUndefined = isUndefined;
	  lodash.lastIndexOf = lastIndexOf;
	  lodash.mixin = mixin;
	  lodash.noConflict = noConflict;
	  lodash.random = random;
	  lodash.reduce = reduce;
	  lodash.reduceRight = reduceRight;
	  lodash.result = result;
	  lodash.size = size;
	  lodash.some = some;
	  lodash.sortedIndex = sortedIndex;
	  lodash.template = template;
	  lodash.unescape = unescape;
	  lodash.uniqueId = uniqueId;

	  // add aliases
	  lodash.all = every;
	  lodash.any = some;
	  lodash.detect = find;
	  lodash.findWhere = findWhere;
	  lodash.foldl = reduce;
	  lodash.foldr = reduceRight;
	  lodash.include = contains;
	  lodash.inject = reduce;

	  /*--------------------------------------------------------------------------*/

	  // add functions capable of returning wrapped and unwrapped values when chaining
	  lodash.first = first;
	  lodash.last = last;
	  lodash.sample = sample;

	  // add aliases
	  lodash.take = first;
	  lodash.head = first;

	  /*--------------------------------------------------------------------------*/

	  // add functions to `lodash.prototype`
	  mixin(lodash);

	  /**
	   * The semantic version number.
	   *
	   * @static
	   * @memberOf _
	   * @type string
	   */
	  lodash.VERSION = '2.4.1';

	  // add "Chaining" functions to the wrapper
	  lodash.prototype.chain = wrapperChain;
	  lodash.prototype.value = wrapperValueOf;

	    // add `Array` mutator functions to the wrapper
	    forEach(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
	      var func = arrayRef[methodName];
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__;
	        func.apply(value, arguments);

	        // avoid array-like object bugs with `Array#shift` and `Array#splice`
	        // in Firefox < 10 and IE < 9
	        if (!support.spliceObjects && value.length === 0) {
	          delete value[0];
	        }
	        return this;
	      };
	    });

	    // add `Array` accessor functions to the wrapper
	    forEach(['concat', 'join', 'slice'], function(methodName) {
	      var func = arrayRef[methodName];
	      lodash.prototype[methodName] = function() {
	        var value = this.__wrapped__,
	            result = func.apply(value, arguments);

	        if (this.__chain__) {
	          result = new lodashWrapper(result);
	          result.__chain__ = true;
	        }
	        return result;
	      };
	    });

	  /*--------------------------------------------------------------------------*/

	  // some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose Lo-Dash to the global object even when an AMD loader is present in
	    // case Lo-Dash is loaded with a RequireJS shim config.
	    // See http://requirejs.org/docs/api.html#config-shim
	    root._ = lodash;

	    // define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return lodash;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Node.js or RingoJS
	    if (moduleExports) {
	      (freeModule.exports = lodash)._ = lodash;
	    }
	    // in Narwhal or Rhino -require
	    else {
	      freeExports._ = lodash;
	    }
	  }
	  else {
	    // in a browser or Rhino
	    root._ = lodash;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(68)(module), (function() { return this; }())))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides marimekko rectangles layer
	@module ChartEngine
	@submodule Layer
	@class TextLayer
	*/

	var defaultFontSize = 1;

	var TextLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.textLabel').data(points);
		},

		insert: function() {
			return this.append('text').classed('textLabel', true);
		},

		events: {
			enter: function() {
				return this.attr('text-anchor', 'middle');
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('font-size', defaultFontSize + 'px')
					.attr('x', function(point, i, j) {
						return chart.ordinalScale(i) + chart.ordinalScale.rangeBand() / 2;
					})
					.html(function(point, i, j) {
						if (chart.params.options && chart.params.options.split) {
							var regex = new RegExp("(" + chart.params.options.split + ")");
							var aTexts = point.name.split(regex);
							var htmlContent = "";
							_.each(aTexts, function(text) {
								htmlContent += "<tspan x='" + (chart.ordinalScale(i) + chart.ordinalScale.rangeBand() / 2) + "' dy='.73em'>" + text + "</tspan>";
							});
							return htmlContent;
						} else  {
							return point.name;
						}
					})
					.attr('font-size', function(point, i, j) {
						var textLength = this.getComputedTextLength();
						var rangeBand = chart.ordinalScale.rangeBand();
						var size = (rangeBand / textLength) * defaultFontSize;
						return size + 'px';
					})
					.attr('fill', chart.colorManager.colors.highlight)
					.attr('y', function(point, i, j) {
						var textHeight = this.getBBox().height;
						return (chart.height() - textHeight) / 2;
					});

				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}

	};

	module.exports = TextLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides pie chart sectors layer
	@module ChartEngine
	@submodule Layer
	@class PieSectorsLayer
	*/

	var magicStrokeWidthRatio = 30;

	var PieSectorsLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(line) {
			var chart = this.chart();
			return this.selectAll('.slice').data(chart.pie(line.points));
		},

		insert: function() {
			return this.append('path').classed('slice', true);
		},

		over: function(params) {
			var chart = this.chart();
			/* Basic tooltip
			this
				.selectAll(".slice")
				.each(function(point, i, j) {
					if (point.data.id == params.elId) {
						chart.tip.show(point, this);
					}
				});
			*/
		},

		out: function(params) {
			var chart = this.chart();
			/* Basic tooltip
			chart.tip.hide();
			*/
		},

		events: {
			enter: function() {
				var chart = this.chart();
				this
					.on('mouseover', function(point, i, j) {
						chart.trigger('over', {
							chart: chart.params,
							elId: point.data.id
						});
					})
					.on('mouseout', function(point, i, j) {
						chart.trigger('out', {
							chart: chart.params,
							elId: point.data.id
						});
					});

				this.attr('d', chart.arc);
				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('d', chart.arc)
					.attr('stroke-width', chart.radius / magicStrokeWidthRatio)
					.attr('fill', function(point) {
						return point.data.color;
					});
				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}

	};

	module.exports = PieSectorsLayer;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides pie chart sectors layer
	@module ChartEngine
	@submodule Layer
	@class PieLabelLayer
	*/

	var Formatter = __webpack_require__(26);

	var PieLabelLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(line) {
			var chart = this.chart();
			this.line = line
			return this.selectAll('.pieLabels').data(chart.pie(line.points));
		},

		insert: function() {
			var group = this.append('g').classed('pieLabels', true);

			/* labels that will be placed out of the pie */
			var outerGroup = group.append('g').classed('outerLabels', true)
			outerGroup.append('text').classed('pieLabel', true);
			outerGroup.append('text').classed('pieTip', true);

			/* labels that will be placed in the pie sectors */
			var sectorGroup = group.append('g').classed('sectorLabels', true)
			sectorGroup.append('text').classed('piePercentage', true);

			return group
		},

		over: function(params) {
			var _this = this,
				chart = this.chart();
			/* Integrated tooltip */
			_(['.pieTip', '.piePercentage']).map(function(selector) {
				_this
					.selectAll(selector)
					.each(function(point, i, j) {
						if (point.data.id == params.elId) {
							d3.select(this).attr('visibility', 'visible')
						}
					});
			});
		},

		out: function(params) {
			var _this = this,
				chart = this.chart();

			/* Integrated tooltip */
			_(['.pieTip', '.piePercentage']).map(function(selector) {
				_this
					.selectAll(selector)
					.attr('visibility', 'hidden')
			})

		},

		events: {
			enter: function() {
				// var chart = this.chart();
				// this
				// 	.on('mouseover', function(point, i, j) {
				// 		chart.trigger('over', {
				// 			chart: chart.params,
				// 			elId: point.data.id
				// 		});
				// 	})
				// 	.on('mouseout', function(point, i, j) {
				// 		chart.trigger('out', {
				// 			chart: chart.params,
				// 			elId: point.data.id
				// 		});
				// 	});
				// return this.attr('d', chart.arc);
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {

				var pi = Math.PI;
				var chart = this.chart();
				var labelsDistance = chart.radius + 45;
				var percentagesDistance = (chart.radius + chart.innerRadius) / 2;

				function translateGroup(distance) {
					return function(point) {
						var bisectAngle = (point.startAngle + point.endAngle) / 2;

						var x = chart.width() / 2 + Math.cos(bisectAngle - pi / 2) * distance;
						var y = chart.height() / 2 + Math.sin(bisectAngle - pi / 2) * distance;
						return 'translate(' + x + ',' + y + ')';
					}
				}

				function chooseTextAnchor() {
					return function(point) {
						var bisectAngle = (point.startAngle + point.endAngle) / 2;
						if (Math.sin(bisectAngle) > Math.sin(pi / 4)) {
							return 'start';
						}
						if (Math.sin(bisectAngle) < Math.sin(7 * pi / 4)) {
							return 'end';
						}
						return 'middle'
					}
				}
				/* Some math to position and style the labels ! */

				this.selectAll('.outerLabels').each(function(point, i, j) {
					var s = d3.select(this)

					s.attr('transform', translateGroup(labelsDistance))
					s.attr('text-anchor', chooseTextAnchor())

					s.selectAll('.pieLabel').html(function(point) {
						return point.data.name;
					})

					s.selectAll('.pieTip')
						.attr('dy', '25')
						.text(function(point) {
							return Formatter.format(point.value, 'ShortValueFormatter')
						})
						.attr('visibility', 'hidden')
				})

				this.selectAll('.sectorLabels').each(function(point, i, j) {
					var s = d3.select(this)

					s.attr('transform', translateGroup(percentagesDistance))
					s.attr('text-anchor', 'middle')

					d3.selectAll('.piePercentage')
						.attr('alignment-baseline', 'middle')
						.text(function(point) {
							var percent = point.value / chart.data.lines[0].total
							return Math.round(percent * 100) + '%'
						})
						.attr('visibility', 'hidden')
				})

				return this.attr('d', chart.arc);
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}

	};

	module.exports = PieLabelLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides pie chart center layer
	@module ChartEngine
	@submodule Layer
	@class PieCenterLayer
	*/

	var colors = ['#333', '#666', '#999', '#aaa', '#ccc', '#eee', '#fafafa'];

	var highlight = '#BE5E2A';

	var Formatter = __webpack_require__(26);

	var PieCenterLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(line) {
			return this.selectAll('.pieCenter').data([line]);
		},

		insert: function() {
			return this.append('text').classed('pieCenter', true)
		},

		over: function(params) {

		},

		out: function(params) {

		},

		events: {
			enter: function() {
				var chart = this.chart();
				// 	.on('mouseover', function(point, i, j) {
				// 		chart.trigger('over', {
				// 			chart: chart.params,
				// 			elId: point.data.id
				// 		});
				// 	})
				// 	.on('mouseout', function(point, i, j) {
				// 		chart.trigger('out', {
				// 			chart: chart.params,
				// 			elId: point.data.id
				// 		});
				// 	});
				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				return this
					.attr('x', chart.width() / 2)
					.attr('y', chart.height() / 2)
					.style('font-size', chart.innerRadius / 2.65)
					.attr('alignment-baseline', 'central')
					.html(function(line) {
						return Formatter.format(line.total, 'ShortValueFormatter');
					});
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = PieCenterLayer;


/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides marimekko rectangles layer
	@module ChartEngine
	@submodule Layer
	@class MarimekkoRectangleLayer
	*/

	var MarimekkoRectangleLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(data) {
			return this
				.selectAll(".marimekkoLine")
				.data(data.lines, function(line) {
					return line.id;
				});
		},

		insert: function() {
			return this.append("g").classed('marimekkoLine', true);
		},

		over: function(params) {
			var chart = this.chart();
			this.selectAll(".marimekkoLine")
				.selectAll(".marimekkoRect")
				.each(function(point, i, j) {
					if (point.uniqueId == params.point.uniqueId) {
						d3.select(this).style('opacity', 0.95)
					}
				});
		},

		out: function(params) {
			var chart = this.chart();
			this.selectAll(".marimekkoLine")
				.selectAll(".marimekkoRect")
				.each(function(point, i, j) {
					d3.select(this).style('opacity', 1)
				});
		},

		events: {
			enter: function() {
				var chart = this.chart();
				this.selectAll(".marimekkoRect")
					.data(function(line) {
						return line.points;
					}, function(point) {
						return point.id;
					})
					.enter()
					.append('rect')
					.classed('marimekkoRect', true)
					.on('mouseover', function(d, i, j) {
						chart.trigger('over', {
							chart: chart.params,
							elId: d.id,
							point: d
						});
					})
					.on('mouseout', function(d, i, j) {
						chart.trigger('out', {
							chart: chart.params,
							elId: d.id,
							point: d
						});
					});
				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();

				this.attr('transform', function(line) {
					return 'translate(' + chart.xscale(line.offset) + ',0)';
				});

				this.selectAll(".marimekkoRect")
					.attr('y', function(point) {
						var y = chart.yscale(0) - chart.yscale((point.offset / point.parent.sum) * 100) //chart.yscale(0) - ;
						return y;
					})
					.attr('width', function(point) {
						var width = chart.xscale(point.parent.sum) - chart.xscale(0);
						return width;
					})
					.attr('height', function(point) {
						var height = chart.yscale(0) - chart.yscale((point.value / point.parent.sum) * 100);
						return height;
					})
					.attr('fill', function(point) {
						return point.color;
					});

				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = MarimekkoRectangleLayer;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides marimekko highlight labels layer
	@module ChartEngine
	@submodule Layer
	@class MarimekkoHighlightLayer
	*/

	var MarimekkoHighlightLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(data) {
			return this.selectAll(".marimekkoHighlightedPoints").data(data.lines, function(line) {
				return line.id;
			});
		},

		insert: function() {
			return this.append("g").classed('marimekkoHighlightedPoints', true);
		},

		events: {
			enter: function() {
				this.selectAll(".marimekkoHighlightedPoints")
					.data(function(line) {
						return line.points;
					}, function(point) {
						return point.id;
					})
					.enter()
					.append('text')
					.attr('text-anchor', 'left')
					.classed('marimekkoHighlight', true);
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();

				this
					.selectAll('.marimekkoHighlight')
					.text(function(point) {
						return _.contains(point.classes, 'highlight') ? point.value : '';
					})
					.attr('y', function(point) {
						var height = this.getBBox().height;
						return chart.yscale(0) - chart.yscale(((point.value / 2 + point.offset) / point.parent.sum) * 100) + height / 4;
					})
					.attr('x', function(point) {
						return 20;
					})
					.attr('font-size', '40px') //function(point) {
				// 	switch (chart.mode()) {
				// 		case 'large':
				// 			return '20px';
				// 			break;
				// 		case 'medium':
				// 			return '18px';
				// 			break;
				// 		case 'small':
				// 		default:
				// 			return '16px';
				// 	}
				// })
				// .attr('fill', highlight);

				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = MarimekkoHighlightLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides marimekko labels layer
	@module ChartEngine
	@submodule Layer
	@class MarimekkoLabelLayer
	*/

	var Formatter = __webpack_require__(26);

	var formatValue = function(point) {
		return point.value;
	};

	var formatLabel = function(point) {
		if (_.contains(point.status, 'highlight')) {
			return formatHtmlLabelWithData(point);
		} else {
			return point.name;
		}
	};

	var samePoints = function(p1, p2){
		return p1.uniqueId === p2.uniqueId
	}

	var placeLabel = function(chart) {
		return function(point){
			/* Place labels in their right position	*/
				d3.select(this)
					.attr('y', function() {
						var height = this.getBBox().height;
						var y = chart.yscale(0) - chart.yscale(((point.value / 2 + point.offset) / point.parent.sum) * 100) + height / 4;
						return y
					})
					.attr('x', function() {
						return chart.xscale(point.parent.sum / 2) - chart.xscale(0);
					})
		}
	};

	/* Check a posteriori the text size and hide it if too big */
	var checkLabelSize = function(rects, fitDy) {
		return function(point){
			/* Get the rect that contains the text */
			var rect = rects.filter(function(d, i){
				return samePoints(d, point)
			})

			d3.select(this)
				.style('font-size', '20px')
				.fitIn(rect.node(), 5, 12, fitDy)
		}

	}

	// will give you big tips that fill the rect !
	var fitTip = function(rects){
		return function(point){

			/* Get the rect that contains the text */
			var rect = rects.filter(function(d, i){
				return samePoints(d, point)
			})

			d3.select(this)
				.style('font-size', '5px')
				.attr('text-anchor', 'middle')
				.attr('dominant-baseline', 'central')
				.style('opacity', 0.1)
				.fillRect(rect.node(), 5)
		}
	}

	var MarimekkoLabelLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(data) {
			return this.selectAll(".marimekkoLabels").data(data.lines, function(line) {
				return line.id;
			});
		},

		over: function(params) {
			var chart = this.chart(),
					_this = this;
			this
				.selectAll(".marimekkoRectTip")
				.each(function(point, i, j) {

					if (samePoints(point, params.point)) {
						var s = d3.select(this)
						//retrieve the corresponding label
						var label = _this.selectAll('.marimekkoRectLabel').filter(function(p){
							return samePoints(p, point)
						})
						if (label.attr('data-tooSmall') === 'true' || s.attr('data-tooSmall') === 'true'){
							//show the classical d3.tip
							chart.tip.show(point)
						} else {
							// show the tip, that has been placed just under the rect label
							s.attr('visibility', 'visible')
						}
					}
				});
		},

		out: function(params) {
			this
				.selectAll(".marimekkoRectTip")
				.attr('visibility', 'hidden')

			this.chart().tip.hide()
		},

		insert: function() {
			return this.append("g").classed('marimekkoLabels', true);
		},

		events: {
			enter: function() {
				var chart = this.chart();

				var rectLabels = this
					.selectAll(".marimekkoRectLabels")
					.data(function(line) {
						return line.points;
					}, function(point) {
						return point.id;
					})
					.enter()
					.append('g').classed('marimekkoRectLabels', true) //container for label, tooltip ...


				rectLabels
					.append('text')
					.attr('text-anchor', 'middle')
					.classed('marimekkoRectLabel', true);

				rectLabels
					.append('text')
					.attr('text-anchor', 'middle')
					.classed('marimekkoRectTip', true);

			},
			merge: function() {
				var chart = this.chart();

				//TODO Accessing the layer like this is not a good practice ?
				var rects = chart.marimekkoRectangleLayerInstance.selectAll('.marimekkoRect')

				this.attr('transform', function(line) {
					return 'translate(' + chart.xscale(line.offset) + ',0)';
				});

				this.selectAll('.marimekkoRectLabel')
					.text(formatLabel)
					.each(placeLabel(chart))
					.each(checkLabelSize(rects))

				this.selectAll('.marimekkoRectTip')
					.text(function(point){
						return Formatter.format(point.value, 'ShortValueFormatter');
					})
					.each(placeLabel(chart))
					.each(checkLabelSize(rects, true))
					.attr('visibility', 'hidden');

				return this;
			}
		}
	};

	module.exports = MarimekkoLabelLayer;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides marimekko rectangles layer
	@module ChartEngine
	@submodule Layer
	@class BarRectangleLayer
	*/

	var BarRectangleLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.barRect').data(points, function(point) {
				return point.id;
			});
		},

		insert: function() {
			return this.append('rect').classed('barRect', true);
		},

		over: function(params) {
			var chart = this.chart();
			this
				.selectAll(".barRect")
			// .attr('fill', 'black')
			// 	function(point, i) {
			// 	return (point.id == params.elId) ? highlight : colors[i];
			// });
		},

		out: function(params) {
			var chart = this.chart();
			chart.tip.hide();
		},

		events: {
			enter: function() {
				var chart = this.chart();
				this
					.on('mouseover', function(d, i, j) {
						chart.trigger('over', {
							chart: chart.params,
							elId: d.id
						});
					})
					.on('mouseout', function(d, i, j) {
						chart.trigger('out', {
							chart: chart.params,
							elId: d.id
						});
					});
				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('x', function(point, i) {
						if (point.value >= 0) {
							return chart.xscale(0);
						} else {
							return chart.xscale(point.value);
						}
					})
					.attr('width', function(point, i) {
						if (point.value >= 0) {
							return chart.xscale(point.value) - chart.xscale(0);
						} else {
							return chart.xscale(0) - chart.xscale(point.value);
						}
					})
					.attr('y', function(point) {
						return chart.yscale(point.name);
					})
					.attr('height', chart.yscale.rangeBand())
					.attr('fill', function(point) {
						return point.color;
					});
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = BarRectangleLayer;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides marimekko labels layer
	@module ChartEngine
	@submodule Layer
	@class BarLabelLayer
	*/

	var Formatter = __webpack_require__(26);

	var BarLabelLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.barLabel').data(points, function(point) {
				return point.id;
			});
		},

		insert: function() {
			return this.append('text').classed('barLabel', true);
		},

		over: function(params) {

		},

		out: function(params) {

		},

		events: {
			enter: function() {
				var chart = this.chart();
				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('x', function(point, i) {
						var padding = point.value > 0 ? 2 : -2;
						return chart.xscale(point.value) + padding;
					})
					.html(function(point) {
						return Formatter.format(point.value, 'ShortValueFormatter');
					})
					.attr('y', function(point) {
						return chart.yscale(point.name) + chart.yscale.rangeBand() / 2 + this.getBBox().height / 2;
					})
					.attr('text-anchor', function(point) {
						if (point.value > 0) {
							return 'start';
						} else {
							return 'end';
						}
					});
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = BarLabelLayer;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides chart people mobile layer
	@module ChartEngine
	@submodule Layer
	@class OsShapeLayer
	*/

	var OsShapeLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.os').data(points);
		},

		insert: function() {
			return this.append('g').classed('os', true);
		},

		events: {
			enter: function() {
				this.each(function(point) {
					var svgShape = d3.selectAll('#os-defs #os-shape-' + point.id).node();
					this.appendChild(svgShape.cloneNode(true));
				});
				return this;
			},
			merge: function() {
				var chart = this.chart();
				this
					.attr('transform', function(point, i, j) {
						var bbox = this.getBBox();
						// Scale width
						var bandWidth = chart.ordinalScale.rangeBand();
						var ratioWidth = bandWidth / bbox.width;
						// Scale height
						var ratioHeight = chart.height() / bbox.height;
						var ratio = _.min([ratioWidth, ratioHeight]);

						var scale = ' scale(' + ratio + ') ';

						var x = +chart.ordinalScale(i);
						var y = (chart.height() - (bbox.height * ratio)) / 2;
						//var y = +chart.height() / 2;
						var translate = ' translate(' + x + ',' + y + ') ';
						return translate + scale;
					});

				// Fill with highlight color
				this
					.selectAll('.highlight')
					.attr('fill', chart.colorManager.colors.highlight);
				this
					.selectAll('.highlightStroke')
					.attr('stroke', chart.colorManager.colors.highlight);

				return this;
			}
		}
	};

	module.exports = OsShapeLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides chart people mobile layer
	@module ChartEngine
	@submodule Layer
	@class PeopleMobileLayer
	*/

	var PeopleMobileLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.people').data(points);
		},

		insert: function() {
			return this.append('g').classed('people', true);
		},

		events: {
			enter: function() {
				this.each(function(point, i) {
					var svgShape = '';
					if (point.value == "mobile") {
						var mobilesShapes = d3.selectAll('#mobile-defs .mobile-shape');
						svgShape = d3.select('#mobile-defs #mobile-shape-' + (i + 1)).node(); // _.random(1, mobilesShapes[0].length)).node();
						d3.select(this).classed('mobile', true);
					} else {
						var nonMobilesShapes = d3.selectAll('#mobile-defs .no-mobile-shape');
						svgShape = d3.select('#mobile-defs #no-mobile-shape-' + (i + 1)).node(); // + _.random(1, nonMobilesShapes[0].length)).node();
						d3.select(this).classed('other', true);
					}
					this.appendChild(svgShape.cloneNode(true));
				});

				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('transform', function(point, i, j) {
						var bbox = this.getBBox();
						// Scale width
						var bandWidth = chart.ordinalScale.rangeBand();
						var ratioWidth = bandWidth / bbox.width;
						// Scale height
						var ratioHeight = chart.height() / bbox.height;
						var ratio = _.min([ratioWidth, ratioHeight]);
						var scale = ' scale(' + ratioWidth + ') ';
						var offset = 0;
						var x = +chart.ordinalScale(i) + offset;
						var translate = ' translate(' + x + ',0) ';



						// Animations
						// var head = d3.select(this).select('.head');
						// var rotate = false;
						// setInterval(function() {
						// 	head
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', function()  {
						// 			if (!rotate) {
						// 				rotate = true;
						// 				return 'rotate(1) ';
						// 			} else {
						// 				rotate = false;
						// 				return 'rotate(0)';
						// 			}
						// 		});
						// }, 1000 * (i + 1));

						// var hiddenArm = d3.select(this).select('.hiddenArm');
						// var rotate = false;
						// setInterval(function() {
						// 	hiddenArm
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', function()  {
						// 			if (!rotate) {
						// 				rotate = true;
						// 				return ' translate(0,5) ';
						// 			} else {
						// 				rotate = false;
						// 				return '  translate(0,0)  ';
						// 			}
						// 		});
						// }, 1000);

						// var visibleArm = d3.select(this).select('.visibleArm');
						// var rotate = false;
						// setInterval(function() {
						// 	visibleArm
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', function()  {
						// 			if (!rotate) {
						// 				rotate = true;
						// 				return ' translate(0,5) ';
						// 			} else {
						// 				rotate = false;
						// 				return '  translate(0,0) ';
						// 			}
						// 		});
						// }, 5000);

						// var tablet = d3.select(this).select('.tablet');
						// var rotate = false;
						// setInterval(function() {
						// 	tablet
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', function()  {
						// 			if (!rotate) {
						// 				rotate = true;
						// 				return ' translate(0,5) ';
						// 			} else {
						// 				rotate = false;
						// 				return '  translate(0,0) ';
						// 			}
						// 		});
						// }, 3000);

						// var leftArm = d3.select(this).select('.leftArm');
						// setInterval(function() {
						// 	leftArm
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(5,5) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(0,0) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(5,5) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(0,0) ')
						// }, 5000);

						// var rightArm = d3.select(this).select('.rightArm');
						// setInterval(function() {
						// 	rightArm
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(5,5) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(0,0) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(5,5) ')
						// 		.transition()
						// 		.duration(500)
						// 		.attr('transform', ' translate(0,0) ')
						// }, 5000);
						return translate + scale;
					});

				// Fill with highlight color
				this
					.selectAll('.highlight')
					.attr('fill', chart.colorManager.colors.highlight);
				this
					.selectAll('.highlightStroke')
					.attr('stroke', chart.colorManager.colors.highlight);

				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = PeopleMobileLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(_) {/**
	Provides chart people mobile layer
	@module ChartEngine
	@submodule Layer
	@class BrowserShapeLayer
	*/

	var BrowserShapeLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.browser').data(points);
		},

		insert: function() {
			return this.append('g').classed('browser', true);
		},

		events: {
			enter: function() {
				this.each(function(point) {
					var svgShape = d3.selectAll('#browser-defs #browser-shape-' + point.id).node();
					this.appendChild(svgShape.cloneNode(true));
				});
				return this;
			},
			merge: function() {
				var chart = this.chart();
				this
					.attr('transform', function(point, i, j) {
						var bbox = this.getBBox();
						// Scale width
						var bandWidth = chart.ordinalScale.rangeBand();
						var ratioWidth = bandWidth / bbox.width;
						// Scale height
						var ratioHeight = chart.height() / bbox.height;
						var ratio = _.min([ratioWidth, ratioHeight]);

						var scale = ' scale(' + ratio + ') ';
						var x = +chart.ordinalScale(i);
						var y = (chart.height() - (bbox.height * ratio)) / 2;
						var translate = ' translate(' + x + ',' + y + ') ';
						return translate + scale;
					});

				// Fill with highlight color
				this
					.selectAll('.highlight')
					.attr('fill', chart.colorManager.colors.highlight);
				this
					.selectAll('.highlightStroke')
					.attr('stroke', chart.colorManager.colors.highlight);

				return this;
			}
		}
	};

	module.exports = BrowserShapeLayer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(31)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides chart people layer
	@module ChartEngine
	@submodule Layer
	@class ScreenShapeLayer
	*/

	var ScreenShapeLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.screen').data(points);
		},

		insert: function() {
			return this.append('g').classed('screen', true);
		},

		events: {
			enter: function() {
				this.each(function(point) {
					var svgShape = d3.select('#screen-desktop-shape').node();
					this.appendChild(svgShape.cloneNode(true));
					// d3.select(this).classed('desktop', true);
				});

				return this;
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				this
					.attr('transform', function(point, i, j) {
						var bbox = this.getBBox();
						var bandWidth = chart.ordinalScale.rangeBand();
						var scale = ' scale(' + bandWidth / bbox.width + ') ';
						var translate = ' translate(' + chart.ordinalScale(i) + ',0) ';
						return translate + scale;
					});
				return this;
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = ScreenShapeLayer;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides chart people layer
	@module ChartEngine
	@submodule Layer
	@class ScreenLabelsLayer
	*/

	var ScreenLabelsLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(points) {
			return this.selectAll('.screenLabel').data(points);
		},

		insert: function() {
			return this.append('text').classed('screenLabel', true);
		},

		events: {
			enter: function() {
				return this.attr('text-anchor', 'middle');
			},
			'enter:transition': function() {
				return this;
			},

			update: function() {
				return this;
			},
			'update:transition': function() {
				return this;
			},

			merge: function() {
				var chart = this.chart();
				return this
					.attr('x', function(point, i, j) {
						return chart.ordinalScale(i) + chart.ordinalScale.rangeBand() / 2;
					})
					.attr('y', 50)
					.html(function(point) {
						return point.name;
					});
			},
			'merge:transition': function() {
				return this;
			},

			exit: function() {
				this.remove();
			},
			'exit:transition': function() {
				return this;
			}
		}
	};

	module.exports = ScreenLabelsLayer;

/***/ },
/* 46 */,
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(69);

	var status = ['forcast', 'highlight', 'inprogress', 'default'];

	var ChartSchema = schema({
		type: String,
		height: ['auto', Number],
		width: ['auto', Number],
		"?params": Object
	});

	var PointSchema = schema({
		id: String,
		name: String,
		value: Number,
		x: String,
		'?color': String,
		'?status': status,
		'?drilldownId': String
	});

	var LineSchema = schema({
		id: String,
		name: String,
		points: Array,
		'?status': status,
		'?drilldownId': String
	});

	var DatasetSchema = schema({
		lines: Array,
		'?drilldown': Array
	});

	exports.ChartSchema = ChartSchema;
	exports.LineSchema = LineSchema;
	exports.PointSchema = PointSchema;
	exports.DatasetSchema = DatasetSchema;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		if (window.execScript)
			window.execScript(src);
		else
			eval.call(null, src);
	}

/***/ },
/* 49 */,
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
		var list = [];
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
		return list;
	}

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(48)(__webpack_require__(52))

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "/*!\n * Modernizr v2.8.3\n * www.modernizr.com\n *\n * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton\n * Available under the BSD and MIT licenses: www.modernizr.com/license/\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in\n * the current UA and makes the results available to you in two ways:\n * as properties on a global Modernizr object, and as classes on the\n * <html> element. This information allows you to progressively enhance\n * your pages with a granular level of control over the experience.\n *\n * Modernizr has an optional (not included) conditional resource loader\n * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).\n * To get a build that includes Modernizr.load(), as well as choosing\n * which tests to include, go to www.modernizr.com/download/\n *\n * Authors        Faruk Ates, Paul Irish, Alex Sexton\n * Contributors   Ryan Seddon, Ben Alman\n */\n\nwindow.Modernizr = (function( window, document, undefined ) {\n\n    var version = '2.8.3',\n\n    Modernizr = {},\n\n    /*>>cssclasses*/\n    // option for enabling the HTML classes to be added\n    enableClasses = true,\n    /*>>cssclasses*/\n\n    docElement = document.documentElement,\n\n    /**\n     * Create our \"modernizr\" element that we do most feature tests on.\n     */\n    mod = 'modernizr',\n    modElem = document.createElement(mod),\n    mStyle = modElem.style,\n\n    /**\n     * Create the input element for various Web Forms feature tests.\n     */\n    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,\n\n    /*>>smile*/\n    smile = ':)',\n    /*>>smile*/\n\n    toString = {}.toString,\n\n    // TODO :: make the prefixes more granular\n    /*>>prefixes*/\n    // List of property values to set for css tests. See ticket #21\n    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),\n    /*>>prefixes*/\n\n    /*>>domprefixes*/\n    // Following spec is to expose vendor-specific style properties as:\n    //   elem.style.WebkitBorderRadius\n    // and the following would be incorrect:\n    //   elem.style.webkitBorderRadius\n\n    // Webkit ghosts their properties in lowercase but Opera & Moz do not.\n    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\n    //   erik.eae.net/archives/2008/03/10/21.48.10/\n\n    // More here: github.com/Modernizr/Modernizr/issues/issue/21\n    omPrefixes = 'Webkit Moz O ms',\n\n    cssomPrefixes = omPrefixes.split(' '),\n\n    domPrefixes = omPrefixes.toLowerCase().split(' '),\n    /*>>domprefixes*/\n\n    /*>>ns*/\n    ns = {'svg': 'http://www.w3.org/2000/svg'},\n    /*>>ns*/\n\n    tests = {},\n    inputs = {},\n    attrs = {},\n\n    classes = [],\n\n    slice = classes.slice,\n\n    featureName, // used in testing loop\n\n\n    /*>>teststyles*/\n    // Inject element with style element and some CSS rules\n    injectElementWithStyles = function( rule, callback, nodes, testnames ) {\n\n      var style, ret, node, docOverflow,\n          div = document.createElement('div'),\n          // After page load injecting a fake body doesn't work so check if body exists\n          body = document.body,\n          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.\n          fakeBody = body || document.createElement('body');\n\n      if ( parseInt(nodes, 10) ) {\n          // In order not to give false positives we create a node for each test\n          // This also allows the method to scale for unspecified uses\n          while ( nodes-- ) {\n              node = document.createElement('div');\n              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n              div.appendChild(node);\n          }\n      }\n\n      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed\n      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element\n      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.\n      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx\n      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277\n      style = ['&#173;','<style id=\"s', mod, '\">', rule, '</style>'].join('');\n      div.id = mod;\n      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n      (body ? div : fakeBody).innerHTML += style;\n      fakeBody.appendChild(div);\n      if ( !body ) {\n          //avoid crashing IE8, if background image is used\n          fakeBody.style.background = '';\n          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n          fakeBody.style.overflow = 'hidden';\n          docOverflow = docElement.style.overflow;\n          docElement.style.overflow = 'hidden';\n          docElement.appendChild(fakeBody);\n      }\n\n      ret = callback(div, rule);\n      // If this is done after page load we don't want to remove the body so check if body exists\n      if ( !body ) {\n          fakeBody.parentNode.removeChild(fakeBody);\n          docElement.style.overflow = docOverflow;\n      } else {\n          div.parentNode.removeChild(div);\n      }\n\n      return !!ret;\n\n    },\n    /*>>teststyles*/\n\n    /*>>mq*/\n    // adapted from matchMedia polyfill\n    // by Scott Jehl and Paul Irish\n    // gist.github.com/786768\n    testMediaQuery = function( mq ) {\n\n      var matchMedia = window.matchMedia || window.msMatchMedia;\n      if ( matchMedia ) {\n        return matchMedia(mq) && matchMedia(mq).matches || false;\n      }\n\n      var bool;\n\n      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {\n        bool = (window.getComputedStyle ?\n                  getComputedStyle(node, null) :\n                  node.currentStyle)['position'] == 'absolute';\n      });\n\n      return bool;\n\n     },\n     /*>>mq*/\n\n\n    /*>>hasevent*/\n    //\n    // isEventSupported determines if a given element supports the given event\n    // kangax.github.com/iseventsupported/\n    //\n    // The following results are known incorrects:\n    //   Modernizr.hasEvent(\"webkitTransitionEnd\", elem) // false negative\n    //   Modernizr.hasEvent(\"textInput\") // in Webkit. github.com/Modernizr/Modernizr/issues/333\n    //   ...\n    isEventSupported = (function() {\n\n      var TAGNAMES = {\n        'select': 'input', 'change': 'input',\n        'submit': 'form', 'reset': 'form',\n        'error': 'img', 'load': 'img', 'abort': 'img'\n      };\n\n      function isEventSupported( eventName, element ) {\n\n        element = element || document.createElement(TAGNAMES[eventName] || 'div');\n        eventName = 'on' + eventName;\n\n        // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and \"resize\", whereas `in` \"catches\" those\n        var isSupported = eventName in element;\n\n        if ( !isSupported ) {\n          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element\n          if ( !element.setAttribute ) {\n            element = document.createElement('div');\n          }\n          if ( element.setAttribute && element.removeAttribute ) {\n            element.setAttribute(eventName, '');\n            isSupported = is(element[eventName], 'function');\n\n            // If property was created, \"remove it\" (by setting value to `undefined`)\n            if ( !is(element[eventName], 'undefined') ) {\n              element[eventName] = undefined;\n            }\n            element.removeAttribute(eventName);\n          }\n        }\n\n        element = null;\n        return isSupported;\n      }\n      return isEventSupported;\n    })(),\n    /*>>hasevent*/\n\n    // TODO :: Add flag for hasownprop ? didn't last time\n\n    // hasOwnProperty shim by kangax needed for Safari 2.0 support\n    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;\n\n    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {\n      hasOwnProp = function (object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    }\n    else {\n      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\n      };\n    }\n\n    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\n    // es5.github.com/#x15.3.4.5\n\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function bind(that) {\n\n        var target = this;\n\n        if (typeof target != \"function\") {\n            throw new TypeError();\n        }\n\n        var args = slice.call(arguments, 1),\n            bound = function () {\n\n            if (this instanceof bound) {\n\n              var F = function(){};\n              F.prototype = target.prototype;\n              var self = new F();\n\n              var result = target.apply(\n                  self,\n                  args.concat(slice.call(arguments))\n              );\n              if (Object(result) === result) {\n                  return result;\n              }\n              return self;\n\n            } else {\n\n              return target.apply(\n                  that,\n                  args.concat(slice.call(arguments))\n              );\n\n            }\n\n        };\n\n        return bound;\n      };\n    }\n\n    /**\n     * setCss applies given styles to the Modernizr DOM node.\n     */\n    function setCss( str ) {\n        mStyle.cssText = str;\n    }\n\n    /**\n     * setCssAll extrapolates all vendor-specific css strings.\n     */\n    function setCssAll( str1, str2 ) {\n        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));\n    }\n\n    /**\n     * is returns a boolean for if typeof obj is exactly type.\n     */\n    function is( obj, type ) {\n        return typeof obj === type;\n    }\n\n    /**\n     * contains returns a boolean for if substr is found within str.\n     */\n    function contains( str, substr ) {\n        return !!~('' + str).indexOf(substr);\n    }\n\n    /*>>testprop*/\n\n    // testProps is a generic CSS / DOM property test.\n\n    // In testing support for a given CSS property, it's legit to test:\n    //    `elem.style[styleName] !== undefined`\n    // If the property is supported it will return an empty string,\n    // if unsupported it will return undefined.\n\n    // We'll take advantage of this quick test and skip setting a style\n    // on our modernizr element, but instead just testing undefined vs\n    // empty string.\n\n    // Because the testing of the CSS property names (with \"-\", as\n    // opposed to the camelCase DOM properties) is non-portable and\n    // non-standard but works in WebKit and IE (but not Gecko or Opera),\n    // we explicitly reject properties with dashes so that authors\n    // developing in WebKit or IE first don't end up with\n    // browser-specific content by accident.\n\n    function testProps( props, prefixed ) {\n        for ( var i in props ) {\n            var prop = props[i];\n            if ( !contains(prop, \"-\") && mStyle[prop] !== undefined ) {\n                return prefixed == 'pfx' ? prop : true;\n            }\n        }\n        return false;\n    }\n    /*>>testprop*/\n\n    // TODO :: add testDOMProps\n    /**\n     * testDOMProps is a generic DOM property test; if a browser supports\n     *   a certain property, it won't return undefined for it.\n     */\n    function testDOMProps( props, obj, elem ) {\n        for ( var i in props ) {\n            var item = obj[props[i]];\n            if ( item !== undefined) {\n\n                // return the property name as a string\n                if (elem === false) return props[i];\n\n                // let's bind a function\n                if (is(item, 'function')){\n                  // default to autobind unless override\n                  return item.bind(elem || obj);\n                }\n\n                // return the unbound function or obj or value\n                return item;\n            }\n        }\n        return false;\n    }\n\n    /*>>testallprops*/\n    /**\n     * testPropsAll tests a list of DOM properties we want to check against.\n     *   We specify literally ALL possible (known and/or likely) properties on\n     *   the element including the non-vendor prefixed one, for forward-\n     *   compatibility.\n     */\n    function testPropsAll( prop, prefixed, elem ) {\n\n        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),\n            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\n\n        // did they call .prefixed('boxSizing') or are we just testing a prop?\n        if(is(prefixed, \"string\") || is(prefixed, \"undefined\")) {\n          return testProps(props, prefixed);\n\n        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\n        } else {\n          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\n          return testDOMProps(props, prefixed, elem);\n        }\n    }\n    /*>>testallprops*/\n\n\n    /**\n     * Tests\n     * -----\n     */\n\n    // The *new* flexbox\n    // dev.w3.org/csswg/css3-flexbox\n\n    tests['flexbox'] = function() {\n      return testPropsAll('flexWrap');\n    };\n\n    // The *old* flexbox\n    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/\n\n    tests['flexboxlegacy'] = function() {\n        return testPropsAll('boxDirection');\n    };\n\n    // On the S60 and BB Storm, getContext exists, but always returns undefined\n    // so we actually have to call getContext() to verify\n    // github.com/Modernizr/Modernizr/issues/issue/97/\n\n    tests['canvas'] = function() {\n        var elem = document.createElement('canvas');\n        return !!(elem.getContext && elem.getContext('2d'));\n    };\n\n    tests['canvastext'] = function() {\n        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));\n    };\n\n    // webk.it/70117 is tracking a legit WebGL feature detect proposal\n\n    // We do a soft detect which may false positive in order to avoid\n    // an expensive context creation: bugzil.la/732441\n\n    tests['webgl'] = function() {\n        return !!window.WebGLRenderingContext;\n    };\n\n    /*\n     * The Modernizr.touch test only indicates if the browser supports\n     *    touch events, which does not necessarily reflect a touchscreen\n     *    device, as evidenced by tablets running Windows 7 or, alas,\n     *    the Palm Pre / WebOS (touch) phones.\n     *\n     * Additionally, Chrome (desktop) used to lie about its support on this,\n     *    but that has since been rectified: crbug.com/36415\n     *\n     * We also test for Firefox 4 Multitouch Support.\n     *\n     * For more info, see: modernizr.github.com/Modernizr/touch.html\n     */\n\n    tests['touch'] = function() {\n        var bool;\n\n        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {\n          bool = true;\n        } else {\n          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {\n            bool = node.offsetTop === 9;\n          });\n        }\n\n        return bool;\n    };\n\n\n    // geolocation is often considered a trivial feature detect...\n    // Turns out, it's quite tricky to get right:\n    //\n    // Using !!navigator.geolocation does two things we don't want. It:\n    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513\n    //   2. Disables page caching in WebKit: webk.it/43956\n    //\n    // Meanwhile, in Firefox < 8, an about:config setting could expose\n    // a false positive that would throw an exception: bugzil.la/688158\n\n    tests['geolocation'] = function() {\n        return 'geolocation' in navigator;\n    };\n\n\n    tests['postmessage'] = function() {\n      return !!window.postMessage;\n    };\n\n\n    // Chrome incognito mode used to throw an exception when using openDatabase\n    // It doesn't anymore.\n    tests['websqldatabase'] = function() {\n      return !!window.openDatabase;\n    };\n\n    // Vendors had inconsistent prefixing with the experimental Indexed DB:\n    // - Webkit's implementation is accessible through webkitIndexedDB\n    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB\n    // For speed, we don't test the legacy (and beta-only) indexedDB\n    tests['indexedDB'] = function() {\n      return !!testPropsAll(\"indexedDB\", window);\n    };\n\n    // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n    tests['hashchange'] = function() {\n      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);\n    };\n\n    // Per 1.6:\n    // This used to be Modernizr.historymanagement but the longer\n    // name has been deprecated in favor of a shorter and property-matching one.\n    // The old API is still available in 1.6, but as of 2.0 will throw a warning,\n    // and in the first release thereafter disappear entirely.\n    tests['history'] = function() {\n      return !!(window.history && history.pushState);\n    };\n\n    tests['draganddrop'] = function() {\n        var div = document.createElement('div');\n        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);\n    };\n\n    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10\n    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.\n    // FF10 still uses prefixes, so check for it until then.\n    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/\n    tests['websockets'] = function() {\n        return 'WebSocket' in window || 'MozWebSocket' in window;\n    };\n\n\n    // css-tricks.com/rgba-browser-support/\n    tests['rgba'] = function() {\n        // Set an rgba() color and check the returned value\n\n        setCss('background-color:rgba(150,255,150,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba');\n    };\n\n    tests['hsla'] = function() {\n        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,\n        //   except IE9 who retains it as hsla\n\n        setCss('background-color:hsla(120,40%,100%,.5)');\n\n        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');\n    };\n\n    tests['multiplebgs'] = function() {\n        // Setting multiple images AND a color on the background shorthand property\n        //  and then querying the style.background property value for the number of\n        //  occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\n\n        setCss('background:url(https://),url(https://),red url(https://)');\n\n        // If the UA supports multiple backgrounds, there should be three occurrences\n        //   of the string \"url(\" in the return value for elemStyle.background\n\n        return (/(url\\s*\\(.*?){3}/).test(mStyle.background);\n    };\n\n\n\n    // this will false positive in Opera Mini\n    //   github.com/Modernizr/Modernizr/issues/396\n\n    tests['backgroundsize'] = function() {\n        return testPropsAll('backgroundSize');\n    };\n\n    tests['borderimage'] = function() {\n        return testPropsAll('borderImage');\n    };\n\n\n    // Super comprehensive table about all the unique implementations of\n    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance\n\n    tests['borderradius'] = function() {\n        return testPropsAll('borderRadius');\n    };\n\n    // WebOS unfortunately false positives on this test.\n    tests['boxshadow'] = function() {\n        return testPropsAll('boxShadow');\n    };\n\n    // FF3.0 will false positive on this test\n    tests['textshadow'] = function() {\n        return document.createElement('div').style.textShadow === '';\n    };\n\n\n    tests['opacity'] = function() {\n        // Browsers that actually have CSS Opacity implemented have done so\n        //  according to spec, which means their return values are within the\n        //  range of [0.0,1.0] - including the leading zero.\n\n        setCssAll('opacity:.55');\n\n        // The non-literal . in this regex is intentional:\n        //   German Chrome returns this value as 0,55\n        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632\n        return (/^0.55$/).test(mStyle.opacity);\n    };\n\n\n    // Note, Android < 4 will pass this test, but can only animate\n    //   a single property at a time\n    //   goo.gl/v3V4Gp\n    tests['cssanimations'] = function() {\n        return testPropsAll('animationName');\n    };\n\n\n    tests['csscolumns'] = function() {\n        return testPropsAll('columnCount');\n    };\n\n\n    tests['cssgradients'] = function() {\n        /**\n         * For CSS Gradients syntax, please see:\n         * webkit.org/blog/175/introducing-css-gradients/\n         * developer.mozilla.org/en/CSS/-moz-linear-gradient\n         * developer.mozilla.org/en/CSS/-moz-radial-gradient\n         * dev.w3.org/csswg/css3-images/#gradients-\n         */\n\n        var str1 = 'background-image:',\n            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',\n            str3 = 'linear-gradient(left top,#9f9, white);';\n\n        setCss(\n             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)\n              (str1 + '-webkit- '.split(' ').join(str2 + str1) +\n             // standard syntax             // trailing 'background-image:'\n              prefixes.join(str3 + str1)).slice(0, -str1.length)\n        );\n\n        return contains(mStyle.backgroundImage, 'gradient');\n    };\n\n\n    tests['cssreflections'] = function() {\n        return testPropsAll('boxReflect');\n    };\n\n\n    tests['csstransforms'] = function() {\n        return !!testPropsAll('transform');\n    };\n\n\n    tests['csstransforms3d'] = function() {\n\n        var ret = !!testPropsAll('perspective');\n\n        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\n        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\n        //   some conditions. As a result, Webkit typically recognizes the syntax but\n        //   will sometimes throw a false positive, thus we must do a more thorough check:\n        if ( ret && 'webkitPerspective' in docElement.style ) {\n\n          // Webkit allows this media query to succeed only if the feature is enabled.\n          // `@media (transform-3d),(-webkit-transform-3d){ ... }`\n          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {\n            ret = node.offsetLeft === 9 && node.offsetHeight === 3;\n          });\n        }\n        return ret;\n    };\n\n\n    tests['csstransitions'] = function() {\n        return testPropsAll('transition');\n    };\n\n\n    /*>>fontface*/\n    // @font-face detection routine by Diego Perini\n    // javascript.nwbox.com/CSSSupport/\n\n    // false positives:\n    //   WebOS github.com/Modernizr/Modernizr/issues/342\n    //   WP7   github.com/Modernizr/Modernizr/issues/538\n    tests['fontface'] = function() {\n        var bool;\n\n        injectElementWithStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function( node, rule ) {\n          var style = document.getElementById('smodernizr'),\n              sheet = style.sheet || style.styleSheet,\n              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\n\n          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\n        });\n\n        return bool;\n    };\n    /*>>fontface*/\n\n    // CSS generated content detection\n    tests['generatedcontent'] = function() {\n        var bool;\n\n        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:\"',smile,'\";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {\n          bool = node.offsetHeight >= 3;\n        });\n\n        return bool;\n    };\n\n\n\n    // These tests evaluate support of the video/audio elements, as well as\n    // testing what types of content they support.\n    //\n    // We're using the Boolean constructor here, so that we can extend the value\n    // e.g.  Modernizr.video     // true\n    //       Modernizr.video.ogg // 'probably'\n    //\n    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845\n    //                     thx to NielsLeenheer and zcorpan\n\n    // Note: in some older browsers, \"no\" was a return value instead of empty string.\n    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2\n    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5\n\n    tests['video'] = function() {\n        var elem = document.createElement('video'),\n            bool = false;\n\n        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('video/ogg; codecs=\"theora\"')      .replace(/^no$/,'');\n\n                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546\n                bool.h264 = elem.canPlayType('video/mp4; codecs=\"avc1.42E01E\"') .replace(/^no$/,'');\n\n                bool.webm = elem.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/^no$/,'');\n            }\n\n        } catch(e) { }\n\n        return bool;\n    };\n\n    tests['audio'] = function() {\n        var elem = document.createElement('audio'),\n            bool = false;\n\n        try {\n            if ( bool = !!elem.canPlayType ) {\n                bool      = new Boolean(bool);\n                bool.ogg  = elem.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/^no$/,'');\n                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');\n\n                // Mimetypes accepted:\n                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements\n                //   bit.ly/iphoneoscodecs\n                bool.wav  = elem.canPlayType('audio/wav; codecs=\"1\"')     .replace(/^no$/,'');\n                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||\n                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');\n            }\n        } catch(e) { }\n\n        return bool;\n    };\n\n\n    // In FF4, if disabled, window.localStorage should === null.\n\n    // Normally, we could not test that directly and need to do a\n    //   `('localStorage' in window) && ` test first because otherwise Firefox will\n    //   throw bugzil.la/365772 if cookies are disabled\n\n    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\n    // will throw the exception:\n    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.\n    // Peculiarly, getItem and removeItem calls do not throw.\n\n    // Because we are forced to try/catch this, we'll go aggressive.\n\n    // Just FWIW: IE8 Compat mode supports these features completely:\n    //   www.quirksmode.org/dom/html5.html\n    // But IE8 doesn't support either with local files\n\n    tests['localstorage'] = function() {\n        try {\n            localStorage.setItem(mod, mod);\n            localStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n    tests['sessionstorage'] = function() {\n        try {\n            sessionStorage.setItem(mod, mod);\n            sessionStorage.removeItem(mod);\n            return true;\n        } catch(e) {\n            return false;\n        }\n    };\n\n\n    tests['webworkers'] = function() {\n        return !!window.Worker;\n    };\n\n\n    tests['applicationcache'] = function() {\n        return !!window.applicationCache;\n    };\n\n\n    // Thanks to Erik Dahlstrom\n    tests['svg'] = function() {\n        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;\n    };\n\n    // specifically for SVG inline in HTML, not within XHTML\n    // test page: paulirish.com/demo/inline-svg\n    tests['inlinesvg'] = function() {\n      var div = document.createElement('div');\n      div.innerHTML = '<svg/>';\n      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;\n    };\n\n    // SVG SMIL animation\n    tests['smil'] = function() {\n        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));\n    };\n\n    // This test is only for clip paths in SVG proper, not clip paths on HTML content\n    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\n\n    // However read the comments to dig into applying SVG clippaths to HTML content here:\n    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491\n    tests['svgclippaths'] = function() {\n        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));\n    };\n\n    /*>>webforms*/\n    // input features and input types go directly onto the ret object, bypassing the tests loop.\n    // Hold this guy to execute in a moment.\n    function webforms() {\n        /*>>input*/\n        // Run through HTML5's new input attributes to see if the UA understands any.\n        // We're using f which is the <input> element created early on\n        // Mike Taylr has created a comprehensive resource for testing these attributes\n        //   when applied to all input types:\n        //   miketaylr.com/code/input-type-attr.html\n        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary\n\n        // Only input placeholder is tested while textarea's placeholder is not.\n        // Currently Safari 4 and Opera 11 have support only for the input placeholder\n        // Both tests are available in feature-detects/forms-placeholder.js\n        Modernizr['input'] = (function( props ) {\n            for ( var i = 0, len = props.length; i < len; i++ ) {\n                attrs[ props[i] ] = !!(props[i] in inputElem);\n            }\n            if (attrs.list){\n              // safari false positive's on datalist: webk.it/74252\n              // see also github.com/Modernizr/Modernizr/issues/146\n              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);\n            }\n            return attrs;\n        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));\n        /*>>input*/\n\n        /*>>inputtypes*/\n        // Run through HTML5's new input types to see if the UA understands any.\n        //   This is put behind the tests runloop because it doesn't return a\n        //   true/false like all the other tests; instead, it returns an object\n        //   containing each input type with its corresponding true/false value\n\n        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/\n        Modernizr['inputtypes'] = (function(props) {\n\n            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {\n\n                inputElem.setAttribute('type', inputElemType = props[i]);\n                bool = inputElem.type !== 'text';\n\n                // We first check to see if the type we give it sticks..\n                // If the type does, we feed it a textual value, which shouldn't be valid.\n                // If the value doesn't stick, we know there's input sanitization which infers a custom UI\n                if ( bool ) {\n\n                    inputElem.value         = smile;\n                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';\n\n                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {\n\n                      docElement.appendChild(inputElem);\n                      defaultView = document.defaultView;\n\n                      // Safari 2-4 allows the smiley as a value, despite making a slider\n                      bool =  defaultView.getComputedStyle &&\n                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&\n                              // Mobile android web browser has false positive, so must\n                              // check the height to see if the widget is actually there.\n                              (inputElem.offsetHeight !== 0);\n\n                      docElement.removeChild(inputElem);\n\n                    } else if ( /^(search|tel)$/.test(inputElemType) ){\n                      // Spec doesn't define any special parsing or detectable UI\n                      //   behaviors so we pass these through as true\n\n                      // Interestingly, opera fails the earlier test, so it doesn't\n                      //  even make it here.\n\n                    } else if ( /^(url|email)$/.test(inputElemType) ) {\n                      // Real url and email support comes with prebaked validation.\n                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;\n\n                    } else {\n                      // If the upgraded input compontent rejects the :) text, we got a winner\n                      bool = inputElem.value != smile;\n                    }\n                }\n\n                inputs[ props[i] ] = !!bool;\n            }\n            return inputs;\n        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));\n        /*>>inputtypes*/\n    }\n    /*>>webforms*/\n\n\n    // End of test definitions\n    // -----------------------\n\n\n\n    // Run through all tests and detect their support in the current UA.\n    // todo: hypothetically we could be doing an array of tests and use a basic loop here.\n    for ( var feature in tests ) {\n        if ( hasOwnProp(tests, feature) ) {\n            // run the test, throw the return value into the Modernizr,\n            //   then based on that boolean, define an appropriate className\n            //   and push it into an array of classes we'll join later.\n            featureName  = feature.toLowerCase();\n            Modernizr[featureName] = tests[feature]();\n\n            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);\n        }\n    }\n\n    /*>>webforms*/\n    // input tests need to run.\n    Modernizr.input || webforms();\n    /*>>webforms*/\n\n\n    /**\n     * addTest allows the user to define their own feature tests\n     * the result will be added onto the Modernizr object,\n     * as well as an appropriate className set on the html element\n     *\n     * @param feature - String naming the feature\n     * @param test - Function returning true if feature is supported, false if not\n     */\n     Modernizr.addTest = function ( feature, test ) {\n       if ( typeof feature == 'object' ) {\n         for ( var key in feature ) {\n           if ( hasOwnProp( feature, key ) ) {\n             Modernizr.addTest( key, feature[ key ] );\n           }\n         }\n       } else {\n\n         feature = feature.toLowerCase();\n\n         if ( Modernizr[feature] !== undefined ) {\n           // we're going to quit if you're trying to overwrite an existing test\n           // if we were to allow it, we'd do this:\n           //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n           //   docElement.className = docElement.className.replace( re, '' );\n           // but, no rly, stuff 'em.\n           return Modernizr;\n         }\n\n         test = typeof test == 'function' ? test() : test;\n\n         if (typeof enableClasses !== \"undefined\" && enableClasses) {\n           docElement.className += ' ' + (test ? '' : 'no-') + feature;\n         }\n         Modernizr[feature] = test;\n\n       }\n\n       return Modernizr; // allow chaining.\n     };\n\n\n    // Reset modElem.cssText to nothing to reduce memory footprint.\n    setCss('');\n    modElem = inputElem = null;\n\n    /*>>shiv*/\n    /**\n     * @preserve HTML5 Shiv prev3.7.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed\n     */\n    ;(function(window, document) {\n        /*jshint evil:true */\n        /** version */\n        var version = '3.7.0';\n\n        /** Preset options */\n        var options = window.html5 || {};\n\n        /** Used to skip problem elements */\n        var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;\n\n        /** Not all elements can be cloned in IE **/\n        var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;\n\n        /** Detect whether the browser supports default html5 styles */\n        var supportsHtml5Styles;\n\n        /** Name of the expando, to work with multiple documents or to re-shiv one document */\n        var expando = '_html5shiv';\n\n        /** The id for the the documents expando */\n        var expanID = 0;\n\n        /** Cached data for each document */\n        var expandoData = {};\n\n        /** Detect whether the browser supports unknown elements */\n        var supportsUnknownElements;\n\n        (function() {\n          try {\n            var a = document.createElement('a');\n            a.innerHTML = '<xyz></xyz>';\n            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles\n            supportsHtml5Styles = ('hidden' in a);\n\n            supportsUnknownElements = a.childNodes.length == 1 || (function() {\n              // assign a false positive if unable to shiv\n              (document.createElement)('a');\n              var frag = document.createDocumentFragment();\n              return (\n                typeof frag.cloneNode == 'undefined' ||\n                typeof frag.createDocumentFragment == 'undefined' ||\n                typeof frag.createElement == 'undefined'\n              );\n            }());\n          } catch(e) {\n            // assign a false positive if detection fails => unable to shiv\n            supportsHtml5Styles = true;\n            supportsUnknownElements = true;\n          }\n\n        }());\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Creates a style sheet with the given CSS text and adds it to the document.\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @param {String} cssText The CSS text.\n         * @returns {StyleSheet} The style element.\n         */\n        function addStyleSheet(ownerDocument, cssText) {\n          var p = ownerDocument.createElement('p'),\n          parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;\n\n          p.innerHTML = 'x<style>' + cssText + '</style>';\n          return parent.insertBefore(p.lastChild, parent.firstChild);\n        }\n\n        /**\n         * Returns the value of `html5.elements` as an array.\n         * @private\n         * @returns {Array} An array of shived element node names.\n         */\n        function getElements() {\n          var elements = html5.elements;\n          return typeof elements == 'string' ? elements.split(' ') : elements;\n        }\n\n        /**\n         * Returns the data associated to the given document\n         * @private\n         * @param {Document} ownerDocument The document.\n         * @returns {Object} An object of data.\n         */\n        function getExpandoData(ownerDocument) {\n          var data = expandoData[ownerDocument[expando]];\n          if (!data) {\n            data = {};\n            expanID++;\n            ownerDocument[expando] = expanID;\n            expandoData[expanID] = data;\n          }\n          return data;\n        }\n\n        /**\n         * returns a shived element for the given nodeName and document\n         * @memberOf html5\n         * @param {String} nodeName name of the element\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived element.\n         */\n        function createElement(nodeName, ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createElement(nodeName);\n          }\n          if (!data) {\n            data = getExpandoData(ownerDocument);\n          }\n          var node;\n\n          if (data.cache[nodeName]) {\n            node = data.cache[nodeName].cloneNode();\n          } else if (saveClones.test(nodeName)) {\n            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();\n          } else {\n            node = data.createElem(nodeName);\n          }\n\n          // Avoid adding some elements to fragments in IE < 9 because\n          // * Attributes like `name` or `type` cannot be set/changed once an element\n          //   is inserted into a document/fragment\n          // * Link elements with `src` attributes that are inaccessible, as with\n          //   a 403 response, will cause the tab/window to crash\n          // * Script elements appended to fragments will execute when their `src`\n          //   or `text` property is set\n          return node.canHaveChildren && !reSkip.test(nodeName) && !node.tagUrn ? data.frag.appendChild(node) : node;\n        }\n\n        /**\n         * returns a shived DocumentFragment for the given document\n         * @memberOf html5\n         * @param {Document} ownerDocument The context document.\n         * @returns {Object} The shived DocumentFragment.\n         */\n        function createDocumentFragment(ownerDocument, data){\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          if(supportsUnknownElements){\n            return ownerDocument.createDocumentFragment();\n          }\n          data = data || getExpandoData(ownerDocument);\n          var clone = data.frag.cloneNode(),\n          i = 0,\n          elems = getElements(),\n          l = elems.length;\n          for(;i<l;i++){\n            clone.createElement(elems[i]);\n          }\n          return clone;\n        }\n\n        /**\n         * Shivs the `createElement` and `createDocumentFragment` methods of the document.\n         * @private\n         * @param {Document|DocumentFragment} ownerDocument The document.\n         * @param {Object} data of the document.\n         */\n        function shivMethods(ownerDocument, data) {\n          if (!data.cache) {\n            data.cache = {};\n            data.createElem = ownerDocument.createElement;\n            data.createFrag = ownerDocument.createDocumentFragment;\n            data.frag = data.createFrag();\n          }\n\n\n          ownerDocument.createElement = function(nodeName) {\n            //abort shiv\n            if (!html5.shivMethods) {\n              return data.createElem(nodeName);\n            }\n            return createElement(nodeName, ownerDocument, data);\n          };\n\n          ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +\n                                                          'var n=f.cloneNode(),c=n.createElement;' +\n                                                          'h.shivMethods&&(' +\n                                                          // unroll the `createElement` calls\n                                                          getElements().join().replace(/[\\w\\-]+/g, function(nodeName) {\n            data.createElem(nodeName);\n            data.frag.createElement(nodeName);\n            return 'c(\"' + nodeName + '\")';\n          }) +\n            ');return n}'\n                                                         )(html5, data.frag);\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * Shivs the given document.\n         * @memberOf html5\n         * @param {Document} ownerDocument The document to shiv.\n         * @returns {Document} The shived document.\n         */\n        function shivDocument(ownerDocument) {\n          if (!ownerDocument) {\n            ownerDocument = document;\n          }\n          var data = getExpandoData(ownerDocument);\n\n          if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {\n            data.hasCSS = !!addStyleSheet(ownerDocument,\n                                          // corrects block display not defined in IE6/7/8/9\n                                          'article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}' +\n                                            // adds styling not present in IE6/7/8/9\n                                            'mark{background:#FF0;color:#000}' +\n                                            // hides non-rendered elements\n                                            'template{display:none}'\n                                         );\n          }\n          if (!supportsUnknownElements) {\n            shivMethods(ownerDocument, data);\n          }\n          return ownerDocument;\n        }\n\n        /*--------------------------------------------------------------------------*/\n\n        /**\n         * The `html5` object is exposed so that more elements can be shived and\n         * existing shiving can be detected on iframes.\n         * @type Object\n         * @example\n         *\n         * // options can be changed before the script is included\n         * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };\n         */\n        var html5 = {\n\n          /**\n           * An array or space separated string of node names of the elements to shiv.\n           * @memberOf html5\n           * @type Array|String\n           */\n          'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output progress section summary template time video',\n\n          /**\n           * current version of html5shiv\n           */\n          'version': version,\n\n          /**\n           * A flag to indicate that the HTML5 style sheet should be inserted.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivCSS': (options.shivCSS !== false),\n\n          /**\n           * Is equal to true if a browser supports creating unknown/HTML5 elements\n           * @memberOf html5\n           * @type boolean\n           */\n          'supportsUnknownElements': supportsUnknownElements,\n\n          /**\n           * A flag to indicate that the document's `createElement` and `createDocumentFragment`\n           * methods should be overwritten.\n           * @memberOf html5\n           * @type Boolean\n           */\n          'shivMethods': (options.shivMethods !== false),\n\n          /**\n           * A string to describe the type of `html5` object (\"default\" or \"default print\").\n           * @memberOf html5\n           * @type String\n           */\n          'type': 'default',\n\n          // shivs the document according to the specified `html5` object options\n          'shivDocument': shivDocument,\n\n          //creates a shived element\n          createElement: createElement,\n\n          //creates a shived documentFragment\n          createDocumentFragment: createDocumentFragment\n        };\n\n        /*--------------------------------------------------------------------------*/\n\n        // expose html5\n        window.html5 = html5;\n\n        // shiv the document\n        shivDocument(document);\n\n    }(this, document));\n    /*>>shiv*/\n\n    // Assign private properties to the return object with prefix\n    Modernizr._version      = version;\n\n    // expose these for the plugin API. Look in the source for how to join() them against your input\n    /*>>prefixes*/\n    Modernizr._prefixes     = prefixes;\n    /*>>prefixes*/\n    /*>>domprefixes*/\n    Modernizr._domPrefixes  = domPrefixes;\n    Modernizr._cssomPrefixes  = cssomPrefixes;\n    /*>>domprefixes*/\n\n    /*>>mq*/\n    // Modernizr.mq tests a given media query, live against the current state of the window\n    // A few important notes:\n    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false\n    //   * A max-width or orientation query will be evaluated against the current state, which may change later.\n    //   * You must specify values. Eg. If you are testing support for the min-width media query use:\n    //       Modernizr.mq('(min-width:0)')\n    // usage:\n    // Modernizr.mq('only screen and (max-width:768)')\n    Modernizr.mq            = testMediaQuery;\n    /*>>mq*/\n\n    /*>>hasevent*/\n    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on\n    // Modernizr.hasEvent('gesturestart', elem)\n    Modernizr.hasEvent      = isEventSupported;\n    /*>>hasevent*/\n\n    /*>>testprop*/\n    // Modernizr.testProp() investigates whether a given style property is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testProp('pointerEvents')\n    Modernizr.testProp      = function(prop){\n        return testProps([prop]);\n    };\n    /*>>testprop*/\n\n    /*>>testallprops*/\n    // Modernizr.testAllProps() investigates whether a given style property,\n    //   or any of its vendor-prefixed variants, is recognized\n    // Note that the property names must be provided in the camelCase variant.\n    // Modernizr.testAllProps('boxSizing')\n    Modernizr.testAllProps  = testPropsAll;\n    /*>>testallprops*/\n\n\n    /*>>teststyles*/\n    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards\n    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })\n    Modernizr.testStyles    = injectElementWithStyles;\n    /*>>teststyles*/\n\n\n    /*>>prefixed*/\n    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input\n    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'\n\n    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.\n    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:\n    //\n    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');\n\n    // If you're trying to ascertain which transition end event to bind to, you might do something like...\n    //\n    //     var transEndEventNames = {\n    //       'WebkitTransition' : 'webkitTransitionEnd',\n    //       'MozTransition'    : 'transitionend',\n    //       'OTransition'      : 'oTransitionEnd',\n    //       'msTransition'     : 'MSTransitionEnd',\n    //       'transition'       : 'transitionend'\n    //     },\n    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];\n\n    Modernizr.prefixed      = function(prop, obj, elem){\n      if(!obj) {\n        return testPropsAll(prop, 'pfx');\n      } else {\n        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'\n        return testPropsAll(prop, obj, elem);\n      }\n    };\n    /*>>prefixed*/\n\n\n    /*>>cssclasses*/\n    // Remove \"no-js\" class from <html> element, if it exists:\n    docElement.className = docElement.className.replace(/(^|\\s)no-js(\\s|$)/, '$1$2') +\n\n                            // Add the new classes to the <html> element.\n                            (enableClasses ? ' js ' + classes.join(' ') : '');\n    /*>>cssclasses*/\n\n    return Modernizr;\n\n})(this, this.document);\n"

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	var InvalidDatasetException = function() {};

	exports.InvalidDatasetException = InvalidDatasetException;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(31);

	var defaultColors = {
		highlight: '#656298',
		other: '#C4C0C0',
		greyScale: ['#242222', '#3B3838', '#545353', '#777676', '#969494', '#AEABAB', '#C4C0C0'],
		colorScale: ['#252343', '#36335D', '#4E4B7C', '#656298', '#7F7CA9', '#9C99BE', '#C2C0DD']
	};

	var hasHighlight = function(dataset) {
		var hasHighlight = false;
		_.each(dataset.lines, function(line) {
			_.each(line.points, function(point) {
				if (point.status && point.status == 'highlight') {
					hasHighlight = true;
				}
			});
		});
		return hasHighlight;
	};

	var ColorManager = function(colors) {
		this.colors = _.extend(defaultColors, colors);
	};

	ColorManager.prototype.setColors = function(colors) {
		if (colors) {
			this.colors = _.extend(defaultColors, colors);
		}
	};

	ColorManager.prototype.attributesColors = function(dataset) {
		var self = this;

		var alreadyColoredPoints = {};
		var colorSet = hasHighlight(dataset) ? this.colors.greyScale : this.colors.colorScale;

		_.each(dataset.lines, function(line, indexLine) {
			_.each(line.points, function(point, indexPoint) {
				if (point.status) {
					switch (point.status) {
						case 'highlight':
							point.color = self.colors.highlight;
							break;
						case 'other':
							point.color = self.colors.other;
							break;
					}
				} else {
					if (alreadyColoredPoints[point.id]) {
						point.color = alreadyColoredPoints[point.id];
					} else {
						point.color = colorSet[indexPoint % colorSet.length];
						alreadyColoredPoints[point.id] = point.color;
					}
				}
			});
		});

		return dataset;
	};

	module.exports = ColorManager;

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 Computes lines based on the model's projections
	 @class AbstractAdapter
	 @constructor
	 @param model the chart model
	 @module ChartEngine
	 @abstract
	 */

	function AbstractAdapter() {};

	/**
	     Compute the lines from the chart model
	     @method computeLines
	    */
	AbstractAdapter.prototype.computeLines = function(data) {
		console.log('AbstractAdapter compute lines');
		return data;
	};

	/**
	     Attribute colors 
	     @method attributeColors
	    */
	AbstractAdapter.prototype.attributeColors = function(aDataset) {
		// if highlight
		// else attribute one color by node id
	};

	module.exports = AbstractAdapter;

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var LineSchema = __webpack_require__(47).LineSchema;

	var Line = function(id, name, points) {
		this.id = id || '';
		this.name = name || '';
		this.points = points || [];
	};

	Line.prototype.validate = function() {
		var errors = LineSchema.errors(this);
		if (errors) {
			console.error(errors);
			return false;
		} else {
			return true;
		}
	};

	module.exports = Line;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var PointSchema = __webpack_require__(47).PointSchema;

	var Point = function(id, name, value, x, color) {
		this.id = id || '';
		this.name = name || '';
		this.value = value || 0;
		this.x = x || '';
		this.color = color || '';
	};

	module.exports = Point;

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.1.1
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-05-01T17:11Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper window is present,
			// execute the factory and get jQuery
			// For environments that do not inherently posses a window with a document
			// (such as Node.js), expose a jQuery-making factory as module.exports
			// This accentuates the need for the creation of a real window
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Can't do this because several apps including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	// Support: Firefox 18+
	//

	var arr = [];

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,

		version = "2.1.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray,

		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
		},

		isPlainObject: function( obj ) {
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			if ( obj.constructor &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
				return false;
			}

			// If the function hasn't returned already, we're confident that
			// |obj| is a plain object, created by {} or constructed with new Object
			return true;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			// Support: Android < 4.0, iOS < 6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;

			code = jQuery.trim( code );

			if ( code ) {
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf("use strict") === 1 ) {
					script = document.createElement("script");
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
				// Otherwise, avoid the DOM node creation, insertion
				// and removal by using an indirect global eval
					indirect( code );
				}
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );

			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				}

			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});

	function isArraylike( obj ) {
		var length = obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.nodeType === 1 && length ) {
			return true;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v1.10.19
	 * http://sizzlejs.com/
	 *
	 * Copyright 2013 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-04-18
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + -(new Date()),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		strundefined = typeof undefined,
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf if we can't use a native one
		indexOf = arr.indexOf || function( elem ) {
			var i = 0,
				len = this.length;
			for ( ; i < len; i++ ) {
				if ( this[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}

		context = context || document;
		results = results || [];

		if ( !selector || typeof selector !== "string" ) {
			return results;
		}

		if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
			return [];
		}

		if ( documentIsHTML && !seed ) {

			// Shortcuts
			if ( (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}

				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType === 9 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== strundefined && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare,
			doc = node ? node.ownerDocument || node : preferredDoc,
			parent = doc.defaultView;

		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Set our document
		document = doc;
		docElem = doc.documentElement;

		// Support tests
		documentIsHTML = !isXML( doc );

		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", function() {
					setDocument();
				}, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", function() {
					setDocument();
				});
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Check if getElementsByClassName can be trusted
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
			div.innerHTML = "<div class='a'></div><div class='a i'></div>";

			// Support: Safari<4
			// Catch class over-caching
			div.firstChild.className = "i";
			// Support: Opera<10
			// Catch gEBCN failure to find non-leading classes
			return div.getElementsByClassName("i").length === 2;
		});

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowclip^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return doc;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch(e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];

							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf.call( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf.call( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is no seed and only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome<14
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
		});
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				truncate = until !== undefined;

			while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
				if ( elem.nodeType === 1 ) {
					if ( truncate && jQuery( elem ).is( until ) ) {
						break;
					}
					matched.push( elem );
				}
			}
			return matched;
		},

		sibling: function( n, elem ) {
			var matched = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					matched.push( n );
				}
			}

			return matched;
		}
	});

	jQuery.fn.extend({
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter(function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling( cur, dir ) {
		while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.unique( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	});
	var rnotwhite = (/\S+/g);



	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );

		var // Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// Flag to know if list is currently firing
			firing,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	});

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );
		jQuery.ready();
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );

			} else {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[0], key ) : emptyGet;
	};


	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( owner ) {
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};


	function Data() {
		// Support: Android < 4,
		// Old WebKit does not have Object.preventExtensions/freeze method,
		// return new empty object instead with no [[set]] accessor
		Object.defineProperty( this.cache = {}, 0, {
			get: function() {
				return {};
			}
		});

		this.expando = jQuery.expando + Math.random();
	}

	Data.uid = 1;
	Data.accepts = jQuery.acceptData;

	Data.prototype = {
		key: function( owner ) {
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return the key for a frozen object.
			if ( !Data.accepts( owner ) ) {
				return 0;
			}

			var descriptor = {},
				// Check if the owner object already has a cache key
				unlock = owner[ this.expando ];

			// If not, create one
			if ( !unlock ) {
				unlock = Data.uid++;

				// Secure it in a non-enumerable, non-writable property
				try {
					descriptor[ this.expando ] = { value: unlock };
					Object.defineProperties( owner, descriptor );

				// Support: Android < 4
				// Fallback to a less secure definition
				} catch ( e ) {
					descriptor[ this.expando ] = unlock;
					jQuery.extend( owner, descriptor );
				}
			}

			// Ensure the cache object
			if ( !this.cache[ unlock ] ) {
				this.cache[ unlock ] = {};
			}

			return unlock;
		},
		set: function( owner, data, value ) {
			var prop,
				// There may be an unlock assigned to this node,
				// if there is no entry for this "owner", create one inline
				// and set the unlock as though an owner entry had always existed
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;

			// Handle: [ owner, { properties } ] args
			} else {
				// Fresh assignments by object are shallow copied
				if ( jQuery.isEmptyObject( cache ) ) {
					jQuery.extend( this.cache[ unlock ], data );
				// Otherwise, copy the properties one-by-one to the cache object
				} else {
					for ( prop in data ) {
						cache[ prop ] = data[ prop ];
					}
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			// Either a valid cache is found, or will be created.
			// New caches will be created and the unlock returned,
			// allowing direct access to the newly created
			// empty data object. A valid owner object must be provided.
			var cache = this.cache[ this.key( owner ) ];

			return key === undefined ?
				cache : cache[ key ];
		},
		access: function( owner, key, value ) {
			var stored;
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					((key && typeof key === "string") && value === undefined) ) {

				stored = this.get( owner, key );

				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase(key) );
			}

			// [*]When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				unlock = this.key( owner ),
				cache = this.cache[ unlock ];

			if ( key === undefined ) {
				this.cache[ unlock ] = {};

			} else {
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}

				i = name.length;
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
		},
		hasData: function( owner ) {
			return !jQuery.isEmptyObject(
				this.cache[ owner[ this.expando ] ] || {}
			);
		},
		discard: function( owner ) {
			if ( owner[ this.expando ] ) {
				delete this.cache[ owner[ this.expando ] ];
			}
		}
	};
	var data_priv = new Data();

	var data_user = new Data();



	/*
		Implementation Summary

		1. Enforce API surface and semantic compatibility with 1.9.x branch
		2. Improve the module's maintainability by reducing the storage
			paths to a single mechanism.
		3. Use the same single mechanism to support "private" and "user" data.
		4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
		5. Avoid exposing implementation details on user objects (eg. expando properties)
		6. Provide a clear path for implementation upgrade to WeakMap in 2014
	*/
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}

				// Make sure we set the data so it isn't changed later
				data_user.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function( elem ) {
			return data_user.hasData( elem ) || data_priv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return data_user.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			data_user.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to data_priv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return data_priv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			data_priv.remove( elem, name );
		}
	});

	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = data_user.get( elem );

					if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice(5) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						data_priv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					data_user.set( this, key );
				});
			}

			return access( this, function( value ) {
				var data,
					camelKey = jQuery.camelCase( key );

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
					// Attempt to get data from the cache
					// with the key as-is
					data = data_user.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to get data from the cache
					// with the key camelized
					data = data_user.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function() {
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = data_user.get( this, camelKey );

					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					data_user.set( this, camelKey, value );

					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf("-") !== -1 && data !== undefined ) {
						data_user.set( this, key, value );
					}
				});
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each(function() {
				data_user.remove( this, key );
			});
		}
	});


	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = data_priv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = data_priv.access( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return data_priv.get( elem, key ) || data_priv.access( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					data_priv.remove( elem, [ type + "queue", key ] );
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}

			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );

					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = data_priv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};

	var rcheckableType = (/^(?:checkbox|radio)$/i);



	(function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// #11217 - WebKit loses check when the name is after the checked attribute
		// Support: Windows Web Apps (WWA)
		// `name` and `type` need .setAttribute for WWA
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE9-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	})();
	var strundefined = typeof undefined;



	support.focusinBubbles = "onfocusin" in window;


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = data_priv.hasData( elem ) && data_priv.get( elem );

			if ( !elemData || !(events = elemData.events) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;
				data_priv.remove( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.disabled !== true || event.type !== "click" ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}

			return handlerQueue;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}

			// Support: Safari 6.0+, Chrome < 28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	};

	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
					// Support: Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && e.preventDefault ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && e.stopPropagation ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// Support: Chrome 15+
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// Create "bubbling" focus and blur events
	// Support: Firefox, Chrome, Safari
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = data_priv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						data_priv.remove( doc, fix );

					} else {
						data_priv.access( doc, fix, attaches );
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var origFn, type;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}

			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},

		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});


	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {

			// Support: IE 9
			option: [ 1, "<select multiple='multiple'>", "</select>" ],

			thead: [ 1, "<table>", "</table>" ],
			col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			_default: [ 0, "", "" ]
		};

	// Support: IE 9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: 1.x compatibility
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );

		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			data_priv.set(
				elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
			);
		}
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( data_priv.hasData( src ) ) {
			pdataOld = data_priv.access( src );
			pdataCur = data_priv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( data_user.hasData( src ) ) {
			udataOld = data_user.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			data_user.set( dest, udataCur );
		}
	}

	function getAll( context, tag ) {
		var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
				context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
				[];

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}

	// Support: IE >= 9
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Support: IE >= 9
			// Fix Cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		buildFragment: function( elems, context, scripts, selection ) {
			var elem, tmp, tag, wrap, contains, j,
				fragment = context.createDocumentFragment(),
				nodes = [],
				i = 0,
				l = elems.length;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						// Support: QtWebKit
						// jQuery.merge because push.apply(_, arraylike) throws
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
					} else {
						tmp = tmp || fragment.appendChild( context.createElement("div") );

						// Deserialize a standard representation
						tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;
						tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

						// Descend through wrappers to the right content
						j = wrap[ 0 ];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Support: QtWebKit
						// jQuery.merge because push.apply(_, arraylike) throws
						jQuery.merge( nodes, tmp.childNodes );

						// Remember the top-level container
						tmp = fragment.firstChild;

						// Fixes #12346
						// Support: Webkit, IE
						tmp.textContent = "";
					}
				}
			}

			// Remove wrapper from fragment
			fragment.textContent = "";

			i = 0;
			while ( (elem = nodes[ i++ ]) ) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( fragment.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			return fragment;
		},

		cleanData: function( elems ) {
			var data, elem, type, key,
				special = jQuery.event.special,
				i = 0;

			for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
				if ( jQuery.acceptData( elem ) ) {
					key = elem[ data_priv.expando ];

					if ( key && (data = data_priv.cache[ key ]) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
						if ( data_priv.cache[ key ] ) {
							// Discard any remaining `private` data
							delete data_priv.cache[ key ];
						}
					}
				}
				// Discard any remaining `user` data
				delete data_user.cache[ elem[ data_user.expando ] ];
			}
		}
	});

	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each(function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					});
			}, null, value, arguments.length );
		},

		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},

		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},

		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},

		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},

		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;

			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}

			return this;
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; (elem = this[i]) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = value.replace( rxhtmlTag, "<$1></$2>" );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var arg = arguments[ 0 ];

			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;

				jQuery.cleanData( getAll( this ) );

				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function( selector ) {
			return this.remove( selector, true );
		},

		domManip: function( args, callback ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var fragment, first, scripts, hasScripts, node, doc,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[ 0 ],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[ 0 ] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}

			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								// Support: QtWebKit
								// jQuery.merge because push.apply(_, arraylike) throws
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( this[ i ], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
								}
							}
						}
					}
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	});


	var iframe,
		elemdisplay = {};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var style,
			elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

				// Use of this method is a temporary fix (more like optmization) until something better comes along,
				// since it was removed from specification and supported only in FF
				style.display : jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		};



	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// Support: IE9
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
		}

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// Support: iOS < 6
			// A tribute to the "awesome hack by Dean Edwards"
			// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?
			// Support: IE
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
					// Hook not needed (or it's not possible to use it due to missing dependency),
					// remove it.
					// Since there are no other hooks for marginRight, remove the whole object.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.

				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}


	(function() {
		var pixelPositionVal, boxSizingReliableVal,
			docElem = document.documentElement,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		if ( !div.style ) {
			return;
		}

		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
			"position:absolute";
		container.appendChild( div );

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computePixelPositionAndBoxSizingReliable() {
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
				"border:1px;padding:1px;width:4px;position:absolute";
			div.innerHTML = "";
			docElem.appendChild( container );

			var divStyle = window.getComputedStyle( div, null );
			pixelPositionVal = divStyle.top !== "1%";
			boxSizingReliableVal = divStyle.width === "4px";

			docElem.removeChild( container );
		}

		// Support: node.js jsdom
		// Don't assume that getComputedStyle is a property of the global object
		if ( window.getComputedStyle ) {
			jQuery.extend( support, {
				pixelPosition: function() {
					// This test is executed only once but we still do memoizing
					// since we can use the boxSizingReliable pre-computing.
					// No need to check if the test was already performed, though.
					computePixelPositionAndBoxSizingReliable();
					return pixelPositionVal;
				},
				boxSizingReliable: function() {
					if ( boxSizingReliableVal == null ) {
						computePixelPositionAndBoxSizingReliable();
					}
					return boxSizingReliableVal;
				},
				reliableMarginRight: function() {
					// Support: Android 2.3
					// Check if div with explicit width and no margin-right incorrectly
					// gets computed margin-right based on width of container. (#3333)
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// This support function is only executed once so no memoizing is needed.
					var ret,
						marginDiv = div.appendChild( document.createElement( "div" ) );

					// Reset CSS: box-sizing; display; margin; border; padding
					marginDiv.style.cssText = div.style.cssText =
						// Support: Firefox<29, Android 2.3
						// Vendor-prefix box-sizing
						"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
						"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
					marginDiv.style.marginRight = marginDiv.style.width = "0";
					div.style.width = "1px";
					docElem.appendChild( container );

					ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

					docElem.removeChild( container );

					return ret;
				}
			});
		}
	})();


	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var
		// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {

		// shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}

		return origName;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = data_priv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display !== "none" || !hidden ) {
					data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// convert relative number strings (+= or -=) to relative numbers. #7345
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}

				// Fixes #8908, it can be done more correctly by specifying setters in cssHooks,
				// but it would mean to define eight (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
					style[ name ] = value;
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});

	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;

				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}

				return tween;
			} ]
		};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = data_priv.get( elem, "fxshow" );

		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function() {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}

		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = data_priv.access( elem, "fxshow", {} );
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;

				data_priv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ]);

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {

			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || data_priv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = data_priv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = data_priv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};


	(function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: iOS 5.1, Android 4.x, Android 2.3
		// Check the default checkbox/radio value ("" on old WebKit; "on" elsewhere)
		support.checkOn = input.value !== "";

		// Must access the parent to make an option select properly
		// Support: IE9, IE10
		support.optSelected = opt.selected;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Check if an input maintains its value after becoming a radio
		// Support: IE9, IE10
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();


	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});

	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {

				if ( value === null ) {
					jQuery.removeAttr( elem, name );

				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;

				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}

			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						elem[ propName ] = false;
					}

					elem.removeAttribute( name );
				}
			}
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	});




	var rfocusable = /^(?:input|select|textarea|button)$/i;

	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each(function() {
				delete this[ jQuery.propFix[ name ] || name ];
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;

			// don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );

			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {
					return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
						elem.tabIndex :
						-1;
				}
			}
		}
	});

	// Support: IE9+
	// Selectedness for an option in an optgroup can be inaccurate
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});




	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}

			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				proceed = arguments.length === 0 || typeof value === "string" && value,
				i = 0,
				len = this.length;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}

			return this.each(function() {
				if ( type === "string" ) {
					// toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];

					while ( (className = classNames[ i++ ]) ) {
						// check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						data_priv.set( this, "__className__", this.className );
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
				}
			});
		},

		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}

			return false;
		}
	});




	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each(function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// IE6-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];
						if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
							optionSet = true;
						}
					}

					// force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				// Support: Webkit
				// "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	// Return jQuery for attributes-only inclusion


	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});

	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});


	var nonce = jQuery.now();

	var rquery = (/\?/);



	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE9
		try {
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		// Document location
		ajaxLocParts,
		ajaxLocation,

		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*");

	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch( e ) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement( "a" );
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType[0] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,
				// URL without anti-cache param
				cacheURL,
				// Response headers
				responseHeadersString,
				responseHeaders,
				// timeout handle
				timeoutTimer,
				// Cross-domain detection vars
				parts,
				// To know if global events are to be dispatched
				fireGlobals,
				// Loop variable
				i,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			fireGlobals = s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function( html ) {
			var wrap;

			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapAll( html.call(this, i) );
				});
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map(function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function( i ) {
					jQuery( this ).wrapInner( html.call(this, i) );
				});
			}

			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			});
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each(function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},

		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
	};
	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );

				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});


	jQuery.ajaxSettings.xhr = function() {
		try {
			return new XMLHttpRequest();
		} catch( e ) {}
	};

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSuccessStatus = {
			// file protocol always yields status code 0, assume 200
			0: 200,
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE9
	// Open requests must be manually aborted on unload (#5280)
	if ( window.ActiveXObject ) {
		jQuery( window ).on( "unload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]();
			}
		});
	}

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function( options ) {
		var callback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								delete xhrCallbacks[ id ];
								callback = xhr.onload = xhr.onerror = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
									complete(
										// file: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
										// Support: IE9
										// Accessing binary-data responseText throws an exception
										// (#11426)
										typeof xhr.responseText === "string" ? {
											text: xhr.responseText
										} : undefined,
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					xhr.onerror = callback("error");

					// Create the abort callback
					callback = xhrCallbacks[ id ] = callback("abort");

					try {
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery("<script>").prop({
						async: true,
						charset: s.scriptCharset,
						src: s.url
					}).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;

				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf(" ");

		if ( off >= 0 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}

		return this;
	};




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};




	var docElem = window.document.documentElement;

	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

			// Need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}

			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// We assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();

			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : window.pageXOffset,
						top ? val : window.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});

	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});


	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;

	}));


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// function HCF(u, v) {
	// 	var U = u,
	// 		V = v
	// 	while (true) {
	// 		if (!(U %= V)) return V
	// 		if (!(V %= U)) return U
	// 	}
	// }
	// getUsualFraction: function(decimal) {

	// 	if (!decimal) {
	// 		decimal = this;
	// 	}
	// 	whole = String(decimal).split('.')[0];
	// 	decimal = parseFloat("." + String(decimal).split('.')[1]);
	// 	num = "1";
	// 	for (z = 0; z < String(decimal).length - 2; z++) {
	// 		num += "0";
	// 	}
	// 	decimal = decimal * num;
	// 	num = parseInt(num);
	// 	for (z = 2; z < decimal + 1; z++) {
	// 		if (decimal % z == 0 && num % z == 0) {
	// 			decimal = decimal / z;
	// 			num = num / z;
	// 			z = 2;
	// 		}
	// 	}
	// 	//if format of fraction is xx/xxx
	// 	if (decimal.toString().length == 2 &&
	// 		num.toString().length == 3) {
	// 		//reduce by removing trailing 0's
	// 		decimal = Math.round(Math.round(decimal) / 10);
	// 		num = Math.round(Math.round(num) / 10);
	// 	}
	// 	//if format of fraction is xx/xx
	// 	else if (decimal.toString().length == 2 &&
	// 		num.toString().length == 2) {
	// 		decimal = Math.round(decimal / 10);
	// 		num = Math.round(num / 10);
	// 	}
	// 	//get highest common factor to simplify
	// 	var t = HCF(decimal, num);

	// 	//return the fraction after simplifying it
	// 	return ((whole == 0) ? "" : whole + " ") + decimal / t + "/" + num / t;
	// }
	//convert a decimal into a fraction

	var usualFractions = __webpack_require__(67)();

	var Fraction = function() {};

	Fraction.prototype.getUsualFraction = function(value) {
		var nearestDelta = 1;
		var nearestFraction;

		for (var i = 0; i < usualFractions.length; i++) {
			var fraction = usualFractions[i];
			var delta = value - (fraction.numerator / fraction.denominator);
			if (Math.abs(delta) < Math.abs(nearestDelta)) {
				nearestFraction = fraction;
				nearestFraction.delta = delta;
				nearestFraction.value = value;
				nearestDelta = delta;
			}
		}

		return nearestFraction;
	};

	module.exports = new Fraction();

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var numeral = __webpack_require__(70);

	// numeral.zeroFormat('N/A');
	// numeral.language('qunb', {
	// 	delimiters: {
	// 		thousands: ',',
	// 		decimal: '.'
	// 	},
	// 	abbreviations: {
	// 		thousand: 'k',
	// 		million: 'm',
	// 		billion: 'b',
	// 		trillion: 't'
	// 	}
	// });
	// numeral.language('qunb');

	var formatMiniValue = function(value) {
		var result = "0";
		var exposant = 0;
		var i = 1
		if (value && typeof value !== 'undefined' && value !== 0) {
			while (value < 1) {
				value = value * 10;
				exposant = exposant + 1;
			}
			value = "" + value;
			value = value.substring(0, 3);
			result = value + "e-" + exposant;
		}
		return result;
	};

	var ValueFormatter = function() {};

	ValueFormatter.prototype.formatShort = function(value) {
		var formatted = value;
		var absValue = Math.abs(value);
		if (absValue > 1000000000) {
			formatted = numeral(value).format("0.[0]a");
		} else if (absValue <= 1000000000 && absValue >= 1000) {
			formatted = numeral(value).format("0.[0]a");
		} else if (absValue <= 999 && value >= 100) {
			formatted = numeral(value).format("0");
		} else if (absValue <= 100 && absValue >= 10) {
			formatted = numeral(value).format("0");
		} else if (absValue <= 10 && absValue >= 1) {
			formatted = numeral(value).format("0.[0]");
		} else if (absValue < 1 && absValue >= 0.00001) {
			formatted = numeral(value).format("0.[00]");
		} else if (absValue < 0.00001 && absValue > 0) {
			formatted = formatMiniValue(value); //numeral(value).format("0.[00000]");
		} else if (absValue == 0) {
			formatted = "";
		}
		return String(formatted);
	};

	ValueFormatter.prototype.formatPercent = function(value) {
		if (value == 0) {
			return '0';
		} else {
			return value != 100 ? '' : '100 %'
		}
	};

	module.exports = new ValueFormatter();


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(30);

	var monthNameFormat = d3.time.format('%B');
	var monthNameMediumFormat = d3.time.format('%b');
	var monthNameSmallFormat = d3.time.format('%m');

	var TimeFormatter = function() {};

	TimeFormatter.formatMonth = function(date) {
		// console.log('format long');
		return monthNameFormat(date);
	};

	TimeFormatter.formatMonthMedium = function(date) {
		return monthNameMediumFormat(date);
	};

	TimeFormatter.formatMonthShort = function(date) {
		// console.log('format short');
		return monthNameSmallFormat(date);
	};

	module.exports = new TimeFormatter();

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<svg id=\"os-defs\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs>\n\n        <!-- Mac -->\n        <g id=\"os-shape-macintosh\">\n            <path d=\"M24.734 17.003c-0.040-4.053 3.305-5.996 3.454-6.093-1.88-2.751-4.808-3.127-5.851-3.171-2.492-0.252-4.862 1.467-6.127 1.467-1.261 0-3.213-1.43-5.28-1.392-2.716 0.040-5.221 1.579-6.619 4.012-2.822 4.897-0.723 12.151 2.028 16.123 1.344 1.944 2.947 4.127 5.051 4.049 2.026-0.081 2.793-1.311 5.242-1.311s3.138 1.311 5.283 1.271c2.18-0.041 3.562-1.981 4.897-3.931 1.543-2.255 2.179-4.439 2.216-4.551-0.048-0.022-4.252-1.632-4.294-6.473zM20.705 5.11c1.117-1.355 1.871-3.235 1.665-5.11-1.609 0.066-3.559 1.072-4.713 2.423-1.036 1.199-1.942 3.113-1.699 4.951 1.796 0.14 3.629-0.913 4.747-2.264z\" class=\"highlight\"></path>\n        </g>\n\n        <!-- Linux -->\n        <g id=\"os-shape-linux\">\n            <path d=\"M17.739 23.029c-2.561 1.191-4.942 1.179-6.542 1.063-1.908-0.138-3.442-0.66-4.117-1.117-0.416-0.281-0.981-0.173-1.262 0.243s-0.173 0.981 0.243 1.262c1.084 0.734 3.002 1.28 5.005 1.424 0.34 0.024 0.712 0.040 1.114 0.040 1.743 0 3.957-0.166 6.326-1.268 0.455-0.212 0.652-0.752 0.441-1.207s-0.752-0.652-1.208-0.441zM27.842 21.682c0.087-7.896 0.899-22.819-14.218-21.613-14.925 1.201-10.968 16.968-11.19 22.248-0.197 2.793-1.124 6.208-2.434 9.683h4.034c0.415-1.473 0.72-2.929 0.851-4.317 0.243 0.17 0.503 0.334 0.781 0.491 0.452 0.266 0.84 0.62 1.251 0.995 0.961 0.876 2.050 1.868 4.179 1.992 0.143 0.008 0.287 0.012 0.427 0.012 2.153 0 3.625-0.942 4.809-1.699 0.567-0.363 1.057-0.676 1.518-0.827 1.31-0.41 2.454-1.072 3.309-1.914 0.134-0.131 0.258-0.267 0.374-0.405 0.476 1.746 1.129 3.711 1.853 5.672h8.614c-2.068-3.195-4.201-6.324-4.158-10.318zM3.878 17.386c0-0 0-0.001-0-0.001-0.148-2.577 1.085-4.745 2.754-4.842s3.142 1.913 3.291 4.49c0 0 0 0.001 0 0.001 0.008 0.139 0.011 0.276 0.012 0.413-0.529 0.133-1.006 0.326-1.434 0.551-0.002-0.019-0.003-0.038-0.005-0.057 0-0 0-0.001 0-0.001-0.143-1.463-0.924-2.567-1.745-2.467s-1.371 1.367-1.228 2.83c0 0 0 0.001 0 0.001 0.062 0.638 0.246 1.207 0.501 1.639-0.064 0.050-0.243 0.182-0.45 0.333-0.155 0.114-0.344 0.252-0.572 0.42-0.621-0.815-1.047-1.987-1.123-3.309zM20.789 23.756c-0.059 1.362-1.841 2.643-3.487 3.158l-0.009 0.003c-0.684 0.222-1.295 0.613-1.941 1.026-1.085 0.695-2.208 1.413-3.829 1.413-0.106 0-0.215-0.003-0.323-0.009-1.485-0.087-2.179-0.72-3.059-1.521-0.464-0.423-0.943-0.86-1.562-1.223l-0.013-0.008c-1.335-0.753-2.163-1.69-2.216-2.506-0.026-0.406 0.154-0.757 0.537-1.044 0.832-0.624 1.39-1.032 1.759-1.302 0.41-0.3 0.533-0.39 0.625-0.477 0.066-0.062 0.136-0.131 0.213-0.205 0.764-0.743 2.043-1.986 4.005-1.986 1.2 0 2.528 0.462 3.943 1.372 0.666 0.434 1.246 0.634 1.981 0.887 0.505 0.174 1.077 0.372 1.843 0.7l0.012 0.005c0.715 0.294 1.559 0.83 1.521 1.717zM20.395 20.556c-0.137-0.069-0.28-0.135-0.43-0.196-0.691-0.296-1.245-0.496-1.704-0.656 0.254-0.497 0.411-1.116 0.426-1.789 0-0 0-0.001 0-0.001 0.035-1.637-0.79-2.966-1.844-2.968s-1.936 1.322-1.971 2.959c0 0 0 0.001 0 0.001-0.001 0.054-0.001 0.107-0.001 0.16-0.649-0.299-1.287-0.515-1.911-0.649-0.003-0.061-0.006-0.123-0.008-0.185 0-0 0-0.001 0-0.002-0.061-2.982 1.769-5.45 4.086-5.513s4.245 2.303 4.305 5.285c0 0.001 0 0.001 0 0.002 0.027 1.348-0.333 2.59-0.949 3.552z\" class=\"highlight\"></path>\n        </g>\n\n        <!-- Windows -->\n        <g id=\"os-shape-windows\">\n        \t<path d=\"M0.011 16l-0.011-9.752 12-1.63v11.382zM14 4.328l15.996-2.328v14h-15.996zM30 18l-0.004 14-15.996-2.25v-11.75zM12 29.495l-11.99-1.644-0.001-9.851h11.991z\" class=\"highlight\"></path>\n        </g>\n\n    </defs>\n</svg>\n"

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<svg id=\"mobile-defs\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n  \n    <defs>\n        <path id=\"path-1\" d=\"M125.328125,286.250001 C189.945441,286.250001 250.65625,224.349295 250.65625,151.999993 C250.65625,118.936072 256.375,88.507812 225.8125,44.2109375 C195.25,-0.0859369832 160.415069,-0.0859369832 125.328125,-0.0859369832 C60.7108093,-0.0859369832 0,79.6506978 0,152 C0,224.349302 60.7108093,286.250001 125.328125,286.250001 Z\"></path>\n        <path id=\"path-3\" d=\"M0.0156249946,268.066392 C0.0156249946,268.066392 156.277338,187.51173 171.85351,140.755863 C187.429682,93.9999962 216.82226,31.6269531 216.82226,31.6269531 C216.82226,31.6269531 211.570312,17.734375 180.914062,9.359375 C150.257812,0.984375 106.281247,-7.20312499 83.6249971,9.35937501 C60.9687471,25.921875 -15.2304675,70.6484439 5.08203156,151.839848 C25.3945307,233.031251 0.0156249946,268.066392 0.0156249946,268.066392 Z\"></path>\n        <path id=\"path-5\" d=\"M0.357422345,117.869144 C0.357422345,117.869144 31.28125,165.929688 54.734375,177.609375 C78.1875,189.289062 98.929688,187.18359 110.328125,187.18359 C121.726563,187.18359 141.726563,164.128903 141.726563,164.128903 C141.726563,164.128903 131.558594,153.312496 131.558594,126.187496 C131.558594,99.0624963 140.054687,60.921875 110.328125,33.1953125 C80.6015625,5.46875 65.6425786,3.35546884 61.8125005,3.35546884 C57.9824223,3.35546885 54.2460937,-16.1132796 29.0742187,42.0898454 C3.90234375,100.29297 0.357422345,117.869144 0.357422345,117.869144 Z\"></path>\n        <path id=\"path-7\" d=\"M95.5078125,0.330078125 C92.2332061,-0.767901776 90.7558594,72.46875 90.7558594,72.46875 C90.7558594,72.46875 82.7231445,99.8959948 80.0419922,103.310547 C77.3608398,106.725099 72.8911133,107.412109 65.9233398,106.015625 C58.9555664,104.619141 50.1592921,94.5152398 42.9980469,86.6113281 C35.8368016,78.7074164 31.4726562,67.9921875 31.4726562,67.9921875 L0.45703125,62.6767578 C0.45703125,62.6767578 13.9692383,86.6113268 25.6445312,103.310547 C37.3198241,120.009767 51.625,131.581544 54.015625,133.769531 C56.40625,135.957518 69.2163086,142.691406 70.2514648,142.691406 C71.2866211,142.691406 87.734684,147.149581 95.5078125,136.933594 C98.9057617,132.467772 132.93457,86.6113281 132.93457,86.6113281 C132.93457,86.6113281 106.292776,3.94629093 95.5078125,0.330078125 Z\"></path>\n        <path id=\"path-9\" d=\"M31.9882813,4.4765625 C31.9882813,4.4765625 79.4400015,-5.03004136 130.578125,4.56738292 C135.564106,5.50313448 146.630686,9.61840615 151.574219,11.0722657 C208.050781,27.6816407 215.117188,23.1367202 222.539063,44.8164062 C229.960938,66.4960923 283.257813,203.050781 283.257813,203.050781 C283.257813,203.050781 295.492188,210.128908 279.164063,216.964844 C262.835938,223.80078 270.458006,223.120121 235.400389,230.011723 C200.342772,236.903324 217.458006,246.928715 217.458006,246.928715 L239.015625,254.414062 C239.015625,254.414062 256.367188,314.210939 263,346.171875 C269.632813,378.132811 279.402344,483.308595 279.402344,500.824219 C279.402344,518.339842 287.875,521.132814 263.445313,526.667969 C239.015625,532.203124 135.214844,561.808595 72.3359375,534.890625 C9.45703125,507.972655 13.5078125,508.488283 19.484375,493.667969 C25.4609375,478.847655 36.2343751,422.222658 36.234375,406.40625 C36.2343749,390.589842 38.3281251,326.82422 38.328125,313.308594 C38.3281249,299.792967 43.8710938,198.437501 37.9296875,183.875 C31.9882812,169.312499 8.1093751,171.714849 2.57421875,164.875004 C-2.9609376,158.035159 2.57421875,126.878908 2.57421875,126.878906 C2.57421875,126.878905 6.0625,60.8164058 10.109375,44.9023438 C14.15625,28.9882817 14.1616209,18.9868162 16.5283203,13.7851562 C18.8950197,8.58349628 19.3071287,7.64453106 22.8613281,6.5390625\"></path>\n        <path id=\"path-11\" d=\"M293.641588,105.073241 L309.978516,140.828125 C309.978516,140.828125 316.386719,148.130859 292.228516,135.244141 C268.070313,122.357422 152.310547,83.6699219 133.666016,75.6445312 C115.021484,67.6191406 108.435547,65.3496094 99.7597656,53.3574219 C91.0839844,41.3652344 89.2109375,33.7128906 89.2109375,25.3847656 C89.2109375,17.0566406 90.2578125,9.77539062 90.2578125,9.77539062 C90.2578125,9.77539062 83.1035156,3.54101562 80.8828125,6.65820312 C78.6621094,9.77539062 75.3457031,17.0566409 75.3457031,21.2207031 C75.3457031,25.3847654 80.9316406,45.8554671 78.1386719,45.8554687 C75.3457031,45.8554704 49.9902344,28.0839844 41.1152344,18.9296875 C32.2402344,9.77539063 27.3554688,0.02734375 27.3554688,0.02734375 C27.3554688,0.02734375 17.0742188,-1.51757813 22.2148438,6.4140625 C27.3554688,14.3457031 34.3320294,27.3593757 43.8828125,36.6074219 C53.4335956,45.855468 46.2089844,45.9589844 46.2089844,45.9589844 C46.2089844,45.9589844 27.794922,33.6855467 20.4335938,21.7304688 C13.0722655,9.77539083 11.1523438,4.38867167 8.10546875,8.26171875 C5.05859375,12.1347658 10.03125,20.6728516 10.03125,20.6728516 C10.03125,20.6728516 22.3554686,38.4931648 28.9501953,44.5644531 C35.544922,50.6357414 35.1718748,53.4794929 33.9863281,53.4794922 C32.8007814,53.4794914 34.7441405,56.7597664 30.2539062,54.1542969 C25.763672,51.5488274 11.4443359,35.1542976 8.42675781,28.4423828 C5.40917972,21.730468 3.56542954,18.6894539 2.03027344,21.1494141 C0.495117338,23.6093743 1.81542969,27.796875 1.81542969,27.796875 C1.81542969,27.796875 3.75781209,34.4960945 11.3994141,44.3251953 C19.041016,54.1542961 21.0947262,55.7050789 23.1767578,57.8632812 C25.2587895,60.0214836 23.375,61.96875 23.375,61.96875 C23.375,61.96875 20.8642579,64.8828132 14.6455078,55.4208984 C8.42675774,45.9589836 2.92675781,36.2705078 2.92675781,36.2705078 C2.92675781,36.2705078 -0.649414051,35.5205086 0.583007812,39.9228516 C1.81542968,44.3251946 6.34082037,55.363282 12.3369141,61.8828125 C18.3330078,68.402343 24.0380841,76.7890632 44.6669922,86.7226562 C65.2959003,96.6562493 73.7578106,93.7763679 91.8447266,103.623047 C109.931642,113.469726 204.787108,150.291985 215.407227,156.287109 C226.027346,162.282233 293.93849,189.025384 304.982422,196.428711 C316.026354,203.832038 336.178724,213.055657 339.65625,215.847656 C343.133776,218.639655 356.254883,216.260742 356.254883,216.260742 C356.254883,216.260742 370.689467,217.568352 370.689453,195.148438 C370.68944,172.728523 374.402357,137.607423 366.724609,113.041016 C359.046862,88.4746086 358.873047,86.9277344 358.873047,86.9277344 L293.641588,105.073241 Z\"></path>\n        <path id=\"path-13\" d=\"M-0.427734375,169.369141 L4.28320312,99.8242187 C4.28320312,99.8242187 6.32421875,78.7265696 14.2695312,62.0000033 C22.2148438,45.273437 29.8636427,29.6899541 57.3789062,12.1464842 C85.1660156,-5.5703121 172.984375,-2.75585935 214.34375,12.0292969 C255.703125,26.8144531 268.03125,39.7226556 277.923828,62.0000031 C284.078588,75.8600636 277.923828,171.568359 277.923828,171.568359 L259.650391,162.693359 L259.626953,95.0800781 C259.626953,95.0800781 257.550781,62.0000031 240.404297,48.7265618 C223.562732,35.6891651 210.130859,25.7558599 188.939453,20.171875 C167.748047,14.5878901 136.984375,12.1464838 110.542969,12.1464844 C84.1015625,12.1464849 62.1655607,23.0806411 50.1542969,33.9082026 C37.7675781,45.0742182 28.6679687,67.0449219 25.5507813,75.6992182 C22.4335938,84.3535145 20.0957031,157.679688 20.0957031,157.679688 L-0.427734375,169.369141 Z\" class=\"highlight\"></path>\n        <path id=\"path-15\" d=\"M71.53125,258.265625 C89.0816904,266.813993 115.645287,269.992188 136.550781,269.992188 C209.176226,269.992188 263,208.020875 263,136.5 C263,104.95946 252.240641,71.2161143 233.210938,48.7539062 C209.089159,20.2811341 172.097792,0.04296875 131.5,0.04296875 C58.8745554,0.04296875 0,64.9791249 0,136.5 C0,187.433335 28.1116639,237.117062 71.53125,258.265625 Z\"></path>\n        <path id=\"path-17\" d=\"M161.852535,0.5625 C157.921871,-1.33300778 152.12793,4.35742188 152.12793,4.35742188 C152.12793,4.35742188 123.361328,16.6914062 112.335938,22.4257812 C101.310547,28.1601563 68.5078125,46.9570312 68.5078125,46.9570312 C68.5078125,46.9570312 64.6699219,48.8300781 62.0996094,55.7851563 C59.5292969,62.7402344 39.9394531,146.013672 36.671875,152.375 C33.4042969,158.736328 35.8066409,176.275391 33.433594,176.275391 C31.0605471,176.275391 26.9453127,178.21875 30.1894534,182.8125 C33.433594,187.40625 29.8164065,191.931641 27.1464846,197.119141 C24.4765627,202.306641 22.1855476,204.214844 18.8945315,208.681641 C15.6035153,213.148438 4.07226605,220.091797 4.07226605,220.091797 C4.07226605,220.091797 -6.859375,218.501953 8.25976563,229.423828 C23.3789063,240.345703 40.3867183,253.583984 61.7773438,259.515625 C83.1679692,265.447266 84.4355465,263.273437 88.9257813,265.970703 C93.416016,268.667969 99.2773433,267.470703 99.2773438,267.470703 C99.2773442,267.470703 107.708984,250.408203 107.708984,250.408203 C107.708984,250.408203 104.568359,284.779297 104.568359,290.966797 C104.56836,297.154297 93.4667965,343.873047 93.4667969,354.271484 C93.4667973,364.669922 93.2929683,390.0625 93.2929688,408.091797 C93.2929692,426.121094 78.6568828,473.564453 75.6933594,478.775391 C72.7298359,483.986328 63.4238277,482.345703 67.0410156,488.603516 C70.6582035,494.861328 80.7636715,501.933594 94.2363281,505.027344 C107.708985,508.121094 185.083999,526.589844 233.796875,523.296875 C282.509751,520.003906 346.132827,500.556641 354.658203,496.462891 C363.183579,492.369141 386.238266,482.25 386.238281,482.25 C386.238297,482.25 375.07228,473.677734 371.582031,464.873047 C368.091782,456.068359 347.3535,340.912109 347.353516,323.464844 C347.353531,306.017578 349.271499,297.771484 349.271484,288.466797 C349.27147,279.162109 346.876953,277.242188 346.876953,277.242188 C346.876953,277.242188 350.865249,282.232422 356.576172,282.232422 C362.287095,282.232422 392.917984,273.191406 413.166016,259.630859 C433.414048,246.070312 440.417984,238.779297 442.964844,234.101562 C445.511704,229.423828 442.148452,226.703125 437.833984,222.109375 C433.519516,217.515625 407.332046,138.701172 400.703125,123.068359 C394.074204,107.435547 368.060562,44.2285156 362.318359,37.0175781 C356.576157,29.8066406 357.025405,27.3398438 345.650391,23.5253906 C334.275376,19.7109375 310.797878,7.57421864 299.422863,4.35742177 C288.047848,1.14062489 287.970703,8.89257812 287.970703,8.89257812 C287.970703,8.89257812 165.7832,2.45800778 161.852535,0.5625 Z\"></path>\n        <path id=\"path-19\" d=\"M28.0976563,4.125 C28.0976563,4.125 41.4296875,28.046875 31.890625,45.2109375 C22.3515625,62.375 8.4453125,71.3554688 2.953125,71.3554688 C-2.5390625,71.3554688 -0.5546875,94.8710938 6.328125,104.457031 C13.2109375,114.042969 24.7792969,128.152346 35.8535158,136.433596 C46.9277348,144.714846 60.1520087,145.656296 74.6289062,145.65625 C78.8037111,145.656237 89.6092669,143.415565 94.5820314,140.632814 C110.962638,131.466255 127.413599,117.613795 132.160156,111.902344 C138.347656,104.457031 140.316984,90.13315 138.470947,79.3376485 C138.133789,77.3659688 137.202149,74.8325292 137.202149,74.8325292 C137.202149,74.8325292 112.831386,72.2930343 107.269531,61.6328125 C101.175781,49.953125 100.476562,31.484375 100.476562,11.640625 C100.476563,-8.203125 28.0976563,4.125 28.0976563,4.125 Z\"></path>\n        <path id=\"path-21\" d=\"M27.6601562,32.8251953 C27.6601562,32.8251953 46.7773437,87.078125 46.7773438,93.9140625 C46.7773438,100.552272 55.2083571,133.992437 50.8535156,152.545898 C46.7773438,169.912109 42.1474609,197.90332 13.2773438,246.472656 C5.71589356,259.193582 0.15625,260.988281 0.15625,260.988281 C0.15625,260.988281 4.08937645,273.992188 14.0234375,285.066406 C23.9574986,296.140625 25.7324219,297.59668 25.7324219,297.59668 C25.7324219,297.59668 57.6738281,263.038086 65.5888672,251.168945 C73.5039062,239.299805 97.6230469,179.677734 106.033203,155.314453 C114.443359,130.951172 116.378906,121.488281 115.070312,116.615234 C113.761719,111.742188 108.893555,101.420898 107.84668,94.8144531 C106.799805,88.2080078 94.7197266,29.1865251 91.1313477,19.311036 C87.5429688,9.43554688 82.8847656,0.272460938 82.8847656,0.272460938 C82.8847656,0.272460938 78.5288086,3.95849609 76.6967773,5.34228516 C74.8647461,6.72607422 66.5883713,13.3198242 62.65625,15.8266602 C58.7241287,18.3334961 51.6396484,22.300293 47.5024414,24.2768555 C43.3652344,26.253418 27.6601562,32.8251953 27.6601562,32.8251953 Z\"></path>\n        <path id=\"path-23\" d=\"M101.220703,196.78125 C101.220703,196.78125 87.3105469,219.337891 82.8203125,224.523437 C78.3300781,229.708984 75.2148437,233.025391 75.2148437,233.025391 C75.2148437,233.025391 70.0292961,225.672848 67.1894531,212.111328 C64.3496101,198.549809 64.3051789,193.333981 62.3833039,172.711423 C60.4614289,152.088864 57.055175,116.139157 56.4521477,102.182614 C56.40116,101.002548 54.8822413,92.7771024 55.2949211,91.2617156 C57.0375484,84.8626759 65.5793203,81.2245072 68.3183625,76.7807586 C69.2550113,75.2611646 72.2974784,72.8519247 72.9243195,71.5024383 C74.5646481,67.9710787 71.8712302,62.6385876 72.3779339,61.6298824 C73.9309158,58.5383297 77.8701095,50.5009761 76.8901333,46.2358394 C75.910157,41.9707027 73.3571743,37.7512203 70.577145,42.1850582 C69.7176512,43.5558553 70.5804436,40.6362302 71.2690395,39.6635738 C72.8332443,37.4541011 72.7583015,32.2116695 72.3779305,30.3571773 C71.819824,27.6361396 70.7868649,25.0048824 69.1765144,25.0048824 C67.5661639,25.0048824 65.1096199,28.4077144 65.1096199,28.4077144 C65.1096199,28.4077144 67.1894566,22.1398922 67.1894539,19.3479 C67.1894511,16.5559078 73.129393,9.63476541 71.2690425,6.52929666 C69.4086919,3.42382791 65.6386714,-1.09008791 65.1096186,0.109374991 C63.4666953,3.8341939 48.4533405,19.050413 46.2812492,21.0566402 C41.3320304,25.6279293 15.0425464,47.1762702 9.86230491,47.1762702 C4.3231387,47.1762702 3.77895278,43.9794168 3.60815426,40.682862 C3.50631866,38.7173496 3.1821387,36.5122682 2.99145504,36.3498542 C2.05062963,35.2497334 0.926269509,37.5703132 0.511718729,46.2358405 C0.0971679499,54.9013679 -0.116210926,54.1259772 4.34130839,65.9033172 C9.28795074,78.9729831 9.862305,100.670779 9.86230469,102.780273 C9.86230355,110.497067 29.1328125,320.957031 29.1328125,320.957031 C29.1328125,320.957031 33.2290259,335.447513 39.3359374,340.394528 C45.6443905,345.504805 66.3789062,351.128906 66.3789062,351.128906 C66.3789062,351.128906 80.7353636,343.079301 86.6284561,336.613278 C104.347343,317.171749 137.214844,273.40625 137.214844,273.40625 L172.949219,228.34375 L101.220703,196.78125 Z\"></path>\n        <path id=\"path-25\" d=\"M9.81454933,96.6300719 C13.5438978,99.9289412 30.0183646,97.9124892 34.4852908,97.9124892 C49.6731214,97.9124892 62.7287184,78.5950278 62.7287184,52.0853598 C62.7287184,25.5756918 49.6731214,1.91248919 34.4852908,1.91248919 C28.453551,1.91248919 17.0759311,4.0432609 12.542392,9.79056288 C5.66054747,18.5148814 2.65276567,32.6362212 2.65276567,49.1538413 C2.65276566,67.8666926 0.863877919,88.7125776 9.81454933,96.6300719 Z\" class=\"highlight\"></path>\n        <path id=\"path-27\" d=\"M17.2167969,188.972656 C17.2167969,188.972656 71.0820312,125.613281 96.8808594,90.4394531 C122.679687,55.265625 143.162109,16.5449219 143.162109,16.5449219 L125.5625,4.70507812 C125.5625,4.70507812 51.0878906,90.9179688 32.1152344,107.947266 C13.1425781,124.976562 5.640625,131.257812 5.640625,131.257812 L17.2167969,188.972656 Z\"></path>\n        <path id=\"path-29\" d=\"M22.84375,201.074219 C43.9124767,221.703147 70.4608729,235.925781 101.542969,235.925781 C133.685644,235.925781 168.859654,224.233275 191.527344,201.074219 C212.481728,179.665607 222.1875,147.978513 222.1875,118 C222.1875,55.5918233 172.902767,0.03125 111.046875,0.03125 C49.190983,0.03125 -0.09375,55.5918233 -0.09375,118 C-0.09375,149.048562 1.98400162,180.649906 22.84375,201.074219 Z\"></path>\n        <path id=\"path-31\" d=\"M11.9765625,-0.458984375 C11.9765625,-0.458984375 13.0234375,34.7050781 13.0234375,39.7988281 C13.0234375,44.8925781 3.97265625,49.9980469 0.03125,53.0683594 C-3.91015625,56.1386719 25.2167969,96.0957031 38.953125,108.785156 C52.6894531,121.474609 72.0546853,131.441406 78.4179688,135.384766 C84.7812522,139.328125 87.875,141.271484 87.875,141.271484 C87.875,141.271484 81.848635,88.3129883 76.6835938,68.0839844 C71.3510316,47.198881 71.2968772,43.8457031 69.8222656,43.8457031 C66.9634553,43.8457031 60.1389361,39.5488111 59.6445312,30.9101562 C59.0563414,20.6328125 63.3124984,-0.458984375 63.3124984,-0.458984375 L11.9765625,-0.458984375 Z\"></path>\n        <path id=\"path-33\" d=\"M1.62011719,156.201172 C1.62011719,156.201172 -0.37109375,218.490234 -0.37109375,221.910156 C-0.37109375,225.330078 0.896484375,241.175781 5.01367188,246.09375 C9.13085937,251.011719 26.5546875,253.023438 29.4511719,255.943359 C32.3476562,258.863281 54.9238281,244.509766 62.2050781,241.392578 C69.4863281,238.275391 166.751953,163.599609 197.808594,135.427734 C228.865234,107.255859 244.392578,95.9394531 244.392578,95.9394531 C244.392578,95.9394531 283.468262,71.6333008 290.947754,64.1547852 C295.273714,59.82939 300.01113,54.2152093 303.56543,49.3916016 C306.156438,45.8752949 307.729492,41.3241184 307.729492,40.3359375 C307.729492,37.9921875 305.685547,37.6953125 305.685547,37.6953125 C305.685547,37.6953125 303.734086,40.4033039 301.078125,44.8168946 C298.918457,48.4057617 292.794922,55.0615235 290.375977,56.9375 C289.026187,57.9843088 286.272283,59.9043446 285.629395,60.1821289 C284.368899,60.7267736 284.807617,59.0102539 284.807617,59.0102539 C284.807617,59.0102539 296.525879,48.2329102 300.253418,42.7602539 C302.227064,39.8626081 304.278121,36.2926361 306.453125,30.6030274 C307.674805,27.4072266 308.538574,20.721684 308.538574,19.9365235 C308.538574,18.8520508 307.045898,15.1826172 305.685547,16.3798828 C304.965135,17.0139279 304.19043,19.9365235 302.915039,24.2514649 C301.877688,27.761063 299.859893,31.6358533 297.825684,34.5576172 C293.501465,40.7685547 286.866211,47.8212897 284.807617,49.3916016 C282.749023,50.9619134 278.763672,53.2343757 280.683105,50.8999023 C281.795669,49.5467685 289.782701,40.7440886 294.652344,33.6210938 C298.183978,28.4552511 298.949163,24.606311 299.704102,23.0302735 C301.216437,19.8730676 302.230356,16.9461366 302.915039,14.6035157 C303.900249,11.2326547 304.19043,8.98430548 304.19043,8.26416019 C304.19043,6.90673879 302.997559,0.866699248 301.078125,3.7714844 C300.368891,4.84480762 299.704102,3.7714844 296.165039,13.9438477 C294.42642,18.9411768 286.42041,31.050293 284.807617,33.6210938 C280.822068,39.9740816 276.54248,42.7602539 276.54248,42.7602539 C276.54248,42.7602539 275.442871,40.7011719 277.254395,38.4775391 C279.803319,35.348751 284.195801,29.4946289 286.42041,25.237793 C287.53783,23.099587 291.009425,17.3233882 292.794922,12.4716797 C294.564072,7.66439039 294.652344,3.77148441 294.652344,3.7714844 C294.652344,3.7714844 294.053711,-0.00341793993 292.794922,-0.00341793993 C291.536133,-0.00341793993 290.375977,-0.407714815 290.375977,-0.407714815 C290.375977,-0.407714815 288.752441,2.61962894 287.59082,6.90673879 C285.34523,15.1943739 273.581266,25.3628102 270.433594,29.4960934 C265.573323,35.8782313 254.532715,43.0336911 249.272461,41.2016598 C244.012207,39.3696286 244.769531,36.8955078 244.769531,34.5576172 C244.769531,32.2197266 245.887207,13.943848 245.887207,13.943848 C245.887207,13.943848 246.46875,11.6933597 244.267578,9.73632844 C242.066406,7.77929719 239.847656,6.90673859 239.847656,6.90673859 C239.847656,6.90673859 238.588379,6.27539094 238.588379,8.26416047 C238.588379,10.25293 237.722168,15.3012695 236.474609,17.115723 C235.227051,18.9301764 221.760254,44.7521525 221.760254,51.5097653 C221.760254,55.6103512 220.273926,63.8930661 212.007812,70.4238282 C210.793846,71.3829398 209.08196,74.8078832 204.394531,78.5253907 C172.396979,103.902019 66.8046898,181.869141 62.4316406,181.869141 C57.4179688,181.86914 52.3212891,184.695313 52.3212891,174.425781 L52.3212891,152.552734 L1.62011719,156.201172 Z\"></path>\n        <path id=\"path-35\" d=\"M110.828125,361.164063 C110.828125,310.960938 109.246094,293.144531 121.0625,274.300781 C132.878906,255.457031 186.59766,238.107422 211.976563,216.392578 C237.355465,194.677734 259.492191,167.740234 268.041016,148.267578 C276.58984,128.794922 278.880859,125.050781 278.880859,125.050781 C278.880859,125.050781 276.414066,138.464844 280.951172,150.978516 C285.488278,163.492188 293.037113,166.958984 299.271484,172.693359 C305.505856,178.427734 308.123051,184.859375 308.123047,193.734375 C308.123043,202.609375 318.218754,183.964844 321.359375,156.269531 C324.499996,128.574219 325.873051,101.611328 316.998047,88.0957031 C308.123043,74.5800781 304.414066,69.3457031 299.470703,69.3457031 C294.52734,69.3457031 292.306641,72.765625 292.306641,72.765625 C292.306641,72.765625 296.548832,63.1035156 282.294922,43.7832031 C268.041012,24.4628906 260.37582,7.86328125 238.816406,4.74609375 C217.256992,1.62890625 166.136719,-3.92968751 144.994141,2.43359374 C123.851563,8.79687499 60.3222655,41.7851563 50.7246094,99.4121122 C41.1269533,157.039068 46.1875,200.364716 50.7246094,236.817828 C55.2617188,273.270941 54.5570783,334.619885 43.7695313,382.826159 C38.9648438,404.29685 13.1542969,433.34375 9.83984375,436.308581 C6.52539063,439.273413 0.41796875,442.554675 0.41796875,442.554675 C0.41796875,442.554675 0.685546875,445.195312 7.17578125,449.335925 C13.6660156,453.476538 36.7089844,464.275403 50.7246094,467.740234 C64.7402344,471.205066 70.2519531,471.205078 70.2519531,471.205078 C70.2519531,471.205078 100.747559,474.816907 117.430176,472.580566 C134.112793,470.344226 144.994141,463.318848 144.994141,463.318848 C144.994141,463.318848 110.828125,411.367188 110.828125,361.164063 Z\"></path>\n        <path id=\"path-37\" d=\"M16.1132812,14.1210938 L0.15625,17.9609375 C0.15625,17.9609375 0.94921875,37.8046875 17,58.9960937 C33.0507812,80.1875 54.5898438,95.2851562 65.6640625,101.078125 C76.7382812,106.871094 98.6821035,95.9634647 111.539062,82.9335938 C118.074219,76.3105469 141.457031,43.453125 141.457031,26.4960937 C141.457031,9.5390625 133.285156,-0.23046875 118.074219,-0.23046875 C102.863281,-0.23046875 16.1132812,14.1210938 16.1132812,14.1210938 Z\"></path>\n        <path id=\"path-39\" d=\"M8.61328125,104.300781 C8.61328125,104.300781 0.984375,184.371094 0.984375,190.605469 C0.984375,196.839844 -3.06640625,205.21875 2.7734375,212.148438 C8.61328125,219.078125 11.8710941,227.105469 22.734375,227.105469 C33.5976559,227.105469 54.9335941,229.5 62.609375,220.824219 C70.2851559,212.148438 91.3632816,192.273438 101.085937,175.109375 C110.808593,157.945312 127.49891,120.344954 139.355476,105.668945 C148.677742,94.1298828 169.010742,88.0058594 174.547859,83.8652344 C180.084976,79.7246094 192.171868,72.2519531 195.242188,64.7734375 C198.312507,57.2949219 212.501946,34.9375 212.501953,30.6699219 C212.50196,26.4023438 209.663086,25.6816406 209.663086,25.6816406 C209.663086,25.6816406 212.081047,23.5419922 210.87207,20.796875 C209.663093,18.0517578 208.37793,16.5048828 208.37793,16.5048828 L205.574219,16.7148438 C205.574219,16.7148438 209.524407,13.8701172 208.139648,10.6660156 C206.75489,7.46191406 203.614258,5.77636719 203.614258,5.77636719 L201.108398,6.46191406 C201.108398,6.46191406 201.446282,3.75878906 199.712891,2.36230469 C197.979499,0.965820312 194.350586,0.442382812 194.350586,0.442382812 C194.350586,0.442382812 186.238274,4.58300781 183.533203,6.18847656 C180.828132,7.79394531 149.108391,30.0683594 145.927734,30.0683594 C142.747078,30.0683594 132.551751,33.5820312 130.469727,27.1894531 C128.387703,20.796875 124.811523,4.51660156 124.811523,4.51660156 C124.811523,4.51660156 124.125,2.609375 120.507812,2.609375 C116.890625,2.609375 114.97168,5.04003906 114.97168,5.04003906 C114.97168,5.04003906 116.332032,7.69335937 116.332031,12.03125 C116.332031,16.3691406 113.822754,27.4765625 115.567871,36.9267578 C117.312988,46.3769531 122.316894,58.2626953 118.500977,64.96875 C111.443757,77.3710364 79.0097659,119.630859 73.1992188,122.986328 C67.3886716,126.341797 56.2773438,135.664062 56.2773438,135.664062 L59.0341797,121.578125 L8.61328125,104.300781 Z\"></path>\n        <path d=\"M83.1859952,216.579305 L83.5800781,223.207031 C83.5800781,223.207031 123.90625,229.488281 145.623047,229.488281 C167.339844,229.488281 189.3125,227.720703 202.78125,224.080078 C216.25,220.439453 222.263672,217.542969 222.263672,217.542969 L222.818764,210.331154 C225.722474,216.695803 228.069407,223.89938 228.890625,231.535156 C231.681641,257.486328 238.613281,269.550781 227.667969,299.082031 C216.722656,328.613281 208.371094,337.605469 208.371094,337.605469 C208.371094,337.605469 232.798828,341.546875 258.923828,333.021484 C285.048828,324.496094 302.958984,311.771484 302.958984,311.771484 C302.958984,311.771484 311.833984,229.359375 308.716797,178.658203 C305.599609,127.957031 297.726562,76.7148438 267.716797,50.8574219 C237.707031,25 185.794922,0.353515625 170.185547,0.353515625 C154.576172,0.353515625 142.015625,5.73828125 139.816406,5.73828125 C137.617188,5.73828125 132.927734,6.34375 120.460937,6.34375 C107.994141,6.34375 97.1757812,2.57617187 83.0664062,10.2050781 C68.9570312,17.8339844 37.8769531,30.7695313 20.6035156,77.4824219 C3.33007813,124.195312 -9.69531251,222.542969 10.796875,302.964844 C10.796875,302.964844 18.9492188,321.785156 61.2773438,328.613281 C103.605469,335.441406 110.910156,336.859375 110.910156,336.859375 C110.910156,336.859375 74.2460938,296.382812 74.2460938,269.908203 C74.2460938,244.797089 79.1115755,223.590308 83.1859952,216.579305 Z\" id=\"path-41\"></path>\n        <path id=\"path-43\" d=\"M42.2226563,0.29296875 C42.2226563,0.29296875 17.0546875,69.0820312 11.2148438,81.203125 C5.375,93.3242188 -3.80859375,103.839844 0.98046875,112.074219 C5.76953125,120.308594 80.2578153,200.726562 97.5664063,220.175781 C114.874997,239.625 151.421875,270.980469 151.421875,270.980469 L166.308599,282.691406 L207.937505,282.691406 L169.773438,242.953125 C169.773438,242.953125 131.531253,191.957031 119.316406,170.8125 C107.10156,149.667969 71.1601562,98.4648437 71.1601562,98.4648437 C71.1601562,98.4648437 65.6367188,91.6640625 76.7070284,73.3554688 C87.7773381,55.046875 100.425781,23.9296875 100.425781,23.9296875 L42.2226563,0.29296875 Z\"></path>\n        <path id=\"path-45\" d=\"M158.918949,16.1337891 C146.262699,16.1337891 134.636715,14.1337891 111.398434,27.6025391 C88.1601528,41.0712891 66.8085937,55.6367188 66.8085937,55.6367188 C66.8085937,55.6367188 54.2460937,59.0312504 49.0117187,78.5742188 C43.7773437,98.1171871 16.8632812,225.828118 12.3710937,239.695312 C7.87890625,253.562507 0.04296875,270.21875 0.04296875,270.21875 C0.04296875,270.21875 -1.4921875,277.195305 17.6992187,286.222656 C36.890625,295.250007 73.2304722,312.347649 83.90625,312.347656 C94.5820278,312.347663 105.46875,311.601562 105.46875,311.601562 C105.46875,311.601562 105.464847,299.74218 111.398438,282.734375 C117.332028,265.72657 129.195308,228.785149 129.195312,228.785156 C129.195317,228.785163 133.570308,223.226555 137.78125,237.347656 C141.992192,251.468757 149.765621,344.691399 149.765625,389.234375 C149.765629,433.777351 133.062503,505.316399 128.875,516.039062 C124.687497,526.761726 113.472652,529.507805 138.597656,539.976562 C163.72266,550.44532 189.917965,565.496087 262.382812,565.496094 C334.84766,565.496101 346.363277,549.445305 366.601562,541.464844 C386.839848,533.484382 384.742183,463.671868 375.671875,407.585938 C366.601567,351.500007 343.343746,236.894524 337.808594,226.613281 C332.273442,216.332038 341.808594,210.191406 341.808594,210.191406 C341.808594,210.191406 347.042965,208.191407 337.273438,173.691406 C327.50391,139.191406 308.359371,68.6484375 295.097656,43.71875 C281.835942,18.7890625 276.554683,6.87109416 265.132812,6.87109375 C253.710942,6.87109334 220.682621,-14.1074221 158.918949,16.1337891 Z\"></path>\n        <path id=\"path-47\" d=\"M50.6171875,225.218753 C70.4544228,243.900928 116.903952,247.339847 143.898438,247.339847 C202.440621,247.339847 246.050781,214.033194 246.050781,144.445316 C246.050781,100.317801 228.482011,34.4905608 199.589844,11.984375 C182.919857,-1.00107606 160.419036,0 139,0 C112.389522,0 75.5787281,8.10858552 56.9648438,27.359375 C34.6287896,50.4596946 -0.144532418,61.5239163 -0.144532418,99.480472 C-0.144532418,136.980566 27.4339669,203.38542 50.6171875,225.218753 Z\"></path>\n        <path id=\"path-49\" d=\"M10.265625,21.3125 C10.265625,21.3125 20.640625,43.7382812 20.640625,61.046875 C20.640625,78.3554687 19.5546875,89.0449221 12.359375,90.5234375 C5.1640625,92.0019529 -0.48046875,94.0117187 -0.48046875,94.0117187 C-0.48046875,94.0117187 7.546875,110.621094 31.9726562,125.578125 C56.3984375,140.535156 62.3789062,146.328125 76.8476562,146.328125 C91.3164062,146.328125 104.179688,141.652344 109.414062,129.578125 C114.648438,117.503906 110.855469,92.6171875 110.855469,82.5429687 C110.855469,72.46875 98.6210938,71.421875 98.6210938,71.421875 C98.6210938,71.421875 83.1523438,77.3125 76.9648438,63.4921875 C70.7773438,49.671875 63.6367188,21.0585937 72.8710938,4.44921875 C82.1054688,-12.1601563 10.265625,21.3125 10.265625,21.3125 Z\"></path>\n        <path d=\"M123.32784,107.116497 L123.421875,107.055664 C123.421875,107.055664 115.585938,165.722656 111.421875,174.003906 C107.257812,182.285156 84.4023438,263.544922 76.5507813,290.041016 C68.6992188,316.537109 22.3613281,459.552734 22.3613281,459.552734 C22.3613281,459.552734 11.9511719,414.736328 -0.447265625,364.080078 C2.90039063,352.402344 22.3613281,297.835938 26.9785156,287.007812 C31.3581424,276.73681 74.6183283,149.648398 79.0583278,136.597837 C79.7767017,133.387083 80.4987741,129.442295 80.7705076,125.644532 C75.8975685,112.841388 77.7379204,104.372037 74.5940418,100.43916 C66.4311536,90.2276857 56.9199221,63.5078141 56.9199221,63.5078141 C56.7773949,62.1517582 54.9503131,59.1931365 56.0874103,55.5869934 C56.6287397,52.1539325 59.7729494,53.070801 59.7729494,53.070801 C59.7729494,53.070801 58.8917516,52.0501646 56.7895506,49.5756818 C54.6873495,47.1011989 56.0995595,45.4447598 57.4555665,41.2065436 C58.8115734,36.9683274 59.2746583,38.0017089 60.2502444,37.6425789 C61.197487,37.5430197 63.1747311,38.2776925 63.1747311,38.2776925 C63.1747311,38.2776925 64.616771,37.4123293 63.6933596,36.1064461 C62.7699483,34.8005629 62.6000977,35.7568366 61.2739258,32.5986326 C59.9477539,29.4404286 63.666992,23.331055 63.666992,23.331055 C64.4092608,22.7230364 68.8907495,23.7471669 68.8907495,23.7471669 C68.8907495,23.7471669 68.049701,19.311306 65.7314453,16.1171874 C63.4131897,12.9230687 65.7147388,11.3590731 66.385742,7.72802725 C67.0567452,4.09698144 70.5991216,4.88085939 70.5991216,4.88085939 C70.5991216,4.88085939 82.2207024,11.7148434 94.2998057,26.0390628 C102.251336,35.4685263 117.48571,46.3002732 122.373538,55.2631829 C124.910768,59.9157546 125.763186,62.7954101 125.644043,67.9223644 C125.311944,82.2131428 124.033206,87.4863301 123.996443,95.2467585 C122.840465,104.171414 123.754458,103.989866 123.32784,107.116497 Z\" id=\"path-51\"></path>\n    </defs>\n\n    <defs>\n    <g id=\"Page-1\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g id=\"mobile-illus\" sketch:type=\"MSLayerGroup\">\n            <g id=\"mobile\">\n                <g id=\"mobile-shape-1\" class=\"mobile-shape\">\n                    <rect class='rectbg' id=\"bg-1\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <g id=\"mobile-shape-1-head\" class=\"head\" transform=\"translate(124.000000, 128.000000)\">\n                        <mask id=\"mask-2\" sketch:name=\"head\" fill=\"white\">\n                            <use xlink:href=\"#path-1\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-1\"></use>\n                        <path d=\"M67.1601563,98.5039062 C67.1601563,98.5039062 68.8789062,197.722656 112.570312,221.984375 C156.261719,246.246094 202.5,256.835938 249.078125,215.054688 C295.65625,173.273438 185.105469,278.101562 185.105469,278.101562 L125.527344,297.59375 L34.3554688,264.1875 L-23.8710938,187.117188 L-7.8203125,114.722656 L67.1601563,98.5039062 Z\" id=\"head-shadow\" fill-opacity=\"0.0599999987\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-2)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-hair-1\" class=\"hair-1\" transform=\"translate(89.000000, 55.000000)\">\n                        <mask id=\"mask-4\" sketch:name=\"hair-1\" fill=\"white\">\n                            <use xlink:href=\"#path-3\"></use>\n                        </mask>\n                        <use fill=\"#333333\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-3\"></use>\n                        <path d=\"M-2.67382812,269.201172 C-2.67382812,269.201172 12.7050781,246.519531 16.5195312,236.097656 C20.3339844,225.675781 27.6386719,185.222656 25.5683594,170.810547 C23.4980469,156.398438 14.8789062,94.3085937 60.765625,76.3378906 C106.652344,58.3671875 149.865234,76.0742188 160.634766,85.0371094 C171.404297,94 179.126953,95.1552732 183.651367,92.1894531 C188.175781,89.2236331 201.366211,57.4287109 201.366211,57.4287109 L215.902344,26.8242188 L220.526367,28.6445312 L171.858398,153.820312 L142.40332,184.833984 L85.1230469,226.162109 L8.10351562,266.640625 L-3.65039062,272.875 L-2.67382812,269.201172 Z\" id=\"hair-1-shadow\" fill-opacity=\"0.12\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-4)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-hair-2\" class=\"hair-2\" transform=\"translate(262.000000, 79.000000)\">\n                        <mask id=\"mask-6\" sketch:name=\"hair-2\" fill=\"white\">\n                            <use xlink:href=\"#path-5\"></use>\n                        </mask>\n                        <use fill=\"#333333\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-5\"></use>\n                        <path d=\"M50.1035156,0.943359375 C50.1035156,0.943359375 28.6660156,63.8476563 26.3984375,72.9785156 C24.1308594,82.109375 44.3007812,117.980469 67.1328125,133.160156 C89.9648438,148.339844 99.4121098,164.414062 127.478516,164.414062 C155.544921,164.414062 176.982422,162.693359 176.982422,162.693359 L112.601562,190.238281 L69.15625,188.621094 L34.2851562,176.755859 L-2.15820312,131.240234 L-1.28515625,110.769531 L28.0039062,26.265625 L50.1035156,0.943359375 Z\" id=\"hair-2-shadow\" fill-opacity=\"0.12\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-6)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-neck\" class=\"neck\" transform=\"translate(288.000000, 344.000000)\" fill=\"#DADADA\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M18.2578125,49.8359375 C18.2578125,49.8359375 34.8203125,67.4765625 26.5390625,84.734375 C18.2578125,101.992188 0.203125,81.9375 0.203125,81.9375 C0.203125,81.9375 4.390625,109.617188 4.390625,153.726562 C4.390625,197.835938 23.234375,277.109375 23.234375,324.289062 C23.234375,371.46875 7.1875,563.203125 7.1875,563.203125 C7.1875,563.203125 151.234375,605.78125 188.921875,596.007812 C226.609375,586.234375 240.984375,577.257812 240.984375,577.257812 C240.984375,577.257812 205.296875,330.015625 205.296875,251.804688 C205.296875,173.59375 208.5,127.8125 185.148438,110.554688 C161.796875,93.296875 99.078125,73.2421875 99.078125,73.2421875 C99.078125,73.2421875 80.0839844,66.2099609 75.0234375,54.3984375 C69.9628906,42.5869141 57.859375,-0.265625 57.859375,-0.265625 L18.2578125,49.8359375 Z\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-right-arm\" class=\"right-arm\" transform=\"translate(190.000000, 573.000000)\">\n                        <mask id=\"mask-8\" sketch:name=\"right-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-7\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-7\"></use>\n                        <path d=\"M97.1064453,11.8955078 C97.1064453,11.8955078 95.2910156,73.8349609 92.4121094,84.6523438 C89.5332031,95.4697266 85.7011719,104.019531 81.6533203,107.823242 C77.6054687,111.626953 62.9960938,112.40625 56.1914062,105.561523 C49.3867188,98.7167969 29.2236328,80.0927734 23.6396484,57.4580078 C18.0556641,34.8232422 -16.0537109,37.4101562 -16.0537109,37.4101562 L-1.48535156,89.1474609 L36.5390625,126.298828 L58.9589844,142.525391 L73.4296875,149.330078 L92.4121094,146.201172 L102.572266,137.326172 L124.806641,122.606445 L126.289062,23.9521484 L97.1064453,11.8955078 Z\" id=\"right-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-8)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-mobile\" class=\"mobile\" transform=\"translate(143.000000, 487.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M19.7462136,6.77206241 C16.0203827,5.74767304 13,8.05565818 13,11.9171578 L13,134.338015 C13,138.203962 16.0201962,142.168311 19.7462136,143.192752 L96.2537864,164.227938 C99.9796173,165.252327 103,162.944342 103,159.082842 L103,36.6619854 C103,32.7960383 99.9798038,28.8316886 96.2537864,27.8072479 L19.7462136,6.77206241 Z\" fill=\"#D0011B\" transform=\"translate(58.000000, 85.500000) rotate(-10.000000) translate(-58.000000, -85.500000) \" class=\"highlight\"></path>\n                        <path d=\"M19.4448107,10.0534206 C15.7499756,8.93178761 12.7669566,11.1575471 12.7820403,15.0220148 L13.2483442,134.4893 C13.2634328,138.355012 16.2931242,142.325077 20.0189131,143.357675 L94.5628005,164.017438 C98.2869938,165.049594 101.238698,162.757281 101.155477,158.890907 L98.6187644,41.0377903 C98.5356059,37.174329 95.467863,33.1315714 91.7781019,32.0114787 L19.4448107,10.0534206 Z\" id=\"mobile-shadow\" fill-opacity=\"0.160000011\" fill=\"#000000\" transform=\"translate(57.275665, 87.150860) rotate(-10.000000) translate(-57.275665, -87.150860) \"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-t-shirt\" class=\"t-shirt\" transform=\"translate(259.000000, 414.000000)\">\n                        <mask id=\"mask-10\" sketch:name=\"t-shirt\" fill=\"white\">\n                            <use xlink:href=\"#path-9\"></use>\n                        </mask>\n                        <use fill=\"#999999\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-9\"></use>\n                        <path d=\"M265.067871,217.826172 C265.067871,217.826172 278.336914,213.937988 280.471191,213.164551 C282.605469,212.391113 285.984375,211.263184 284.338379,212.871094 C282.692383,214.479004 276.367676,217.046387 274.297363,218.180664 C272.227051,219.314941 266.286621,222.132812 266.286621,222.132812 L265.067871,217.826172 Z\" id=\"t-shirt-shadow-1\" fill-opacity=\"0.22\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-10)\"></path>\n                        <path d=\"M199.650391,236.679688 C199.650391,236.679688 195.052734,237.63916 193.767578,238.281738 C192.482422,238.924316 194.625,239.977051 197.137695,239.453613 C199.650391,238.930176 201.016602,238.936035 201.016602,238.936035 L199.650391,236.679688 Z\" id=\"t-shirt-shadow-2\" fill-opacity=\"0.22\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-10)\"></path>\n                        <path d=\"M188.095703,86.3066406 C188.095703,86.3066406 184.257812,144.279297 188.619141,178.208984 C192.980469,212.138672 193.647461,229.673828 193.647461,231.930664 C193.647461,234.1875 192.088867,235.908203 192.088867,237.368164 C192.088867,238.828125 192.736328,239.184082 192.736328,239.184082 C192.736328,239.184082 192.802735,236.973629 194.341309,235.464351 C195.879883,233.955074 202.150879,231.319088 204.161621,230.948238 C206.172363,230.577389 215.499513,227.354488 221.434572,226.10107 C227.369631,224.847652 242.313966,220.181148 247.803713,218.840328 C253.293459,217.499508 261.610353,215.716793 264.329103,215.030758 C267.047853,214.344723 273.021484,212.633789 273.021484,212.633789 C273.021484,212.633789 216.107422,225.80127 213.882812,205.012207 C211.658203,184.223145 201.191407,114.714844 201.191406,103.287109 C201.191406,91.859375 201.413086,88.7822266 198.795898,82.7226563 C196.178711,76.6630859 196.413086,51.4882813 197.604492,48.8945313 C198.795898,46.3007813 188.095703,86.3066406 188.095703,86.3066406 Z\" id=\"t-shirt-shadow-3\" fill-opacity=\"0.0900000036\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-10)\"></path>\n                        <path d=\"M125.248047,38.9257812 C125.248047,38.9257812 119.676758,48.3466797 111.848633,55.5761719 C104.020508,62.8056641 91.6494141,73.1123047 84.9150391,75.3681641 C78.1806641,77.6240234 63.0371094,81.9628906 56.3427734,79.8691406 C49.6484375,77.7753906 48.2329102,74.7705078 47.4858398,71.5166016 C46.7387695,68.2626953 45.7675781,59.6137695 45.7675781,54.6767578 C45.7675781,49.7397461 46.6391602,38.5449219 46.6391602,32.9853516 C46.6391602,27.4257812 50.8383789,15.0234375 50.8383789,15.0234375 L55.1474609,3.89111328 C55.1474609,3.89111328 48.7963867,4.50732422 40.090332,6.15917969 C31.3842773,7.81103516 24.3295898,10.046875 22.7099609,14.7084961 C21.090332,19.3701172 19.2128906,39.8569336 18.6953125,42.5498047 C18.1777344,45.2426758 16.6508789,58.5581055 15.996582,65.3334961 C15.3422852,72.1088867 11.9301758,117.509277 11.9301758,122.065918 C11.9301758,126.622559 10.2929688,141.963379 10.2929688,141.963379 C10.2929688,141.963379 6.67138672,153.179199 11.3339844,159.361328 C15.996582,165.543457 16.937011,166.759277 23.5615234,169.681641 C30.1860359,172.604004 36.2221673,179.541504 36.9575195,183.723145 C37.6928718,187.904785 37.2133789,171.777344 37.2133789,171.777344 C37.2133789,171.777344 35.9482434,156.667969 35.9482422,150.98877 C35.948241,145.30957 37.2133796,134.631836 37.2133796,134.631836 C37.2133796,134.631836 40.5151367,168.504395 41.6113288,174.639648 C42.7075209,180.774902 44.6440423,206.761719 44.644043,212.077637 C44.6440437,217.393555 47.1777337,273.311035 46.4726562,285.384766 C45.7675788,297.458496 45.0795891,339.64502 45.0795898,345.43457 C45.0795905,351.224121 45.0073235,391.571777 45.0073242,396.924805 C45.0073249,402.277832 44.6049798,419.62793 43.5146484,426.147461 C42.4243171,432.666992 37.0737298,470.954102 35.2910156,478.532227 C33.5083015,486.110352 24.6596673,496.13916 26.671875,501.367676 C28.6840827,506.596191 83.1357453,536.157715 105.681152,540.126953 C128.226559,544.096191 206.073242,540.36084 206.073242,540.36084 C206.073242,540.36084 129.601566,529.089844 122.447266,446.5625 C115.292966,364.035156 91.6084016,216.360352 93.0273438,183.09375 C94.4462859,149.827148 93.7812531,120.032227 109.514648,84.171875 C125.248044,48.3115234 125.248047,38.9257812 125.248047,38.9257812 Z\" id=\"t-shirt-shadow-4\" fill-opacity=\"0.09\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-10)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-left-arm\" class=\"left-arm\" transform=\"translate(165.000000, 545.000000)\">\n                        <mask id=\"mask-12\" sketch:name=\"left-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-11\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-11\"></use>\n                        <path d=\"M328.935059,95.0629883 C328.935059,95.0629883 343.62207,125.854492 346.850586,155.678711 C350.079102,185.50293 351.811523,202.939453 350.514648,209.557617 C349.217773,216.175781 343.772461,216.920898 335.552734,214.390625 C327.333008,211.860352 221.055664,162.506836 221.055664,162.506836 L78.9990234,100.176758 C78.9990234,100.176758 36.3876953,86.6845703 28.1992187,82.2705078 C20.0107422,77.8564453 9.22851562,61.7519531 9.22851562,61.7519531 L0.668945312,42.9365234 L0.212890625,39.2172852 C0.212890625,39.2172852 0.779296875,37.5454102 1.59667969,37.5454102 C2.4140625,37.5454102 2.21923828,39.1567383 3.63525391,41.8955078 C5.05126953,44.6342773 6.32568359,47.8198242 7.45361328,49.5092773 C8.58154297,51.1987305 11.0449219,55.4116211 12.5161133,57.362793 C13.9873047,59.3139648 17.5092773,62.4487305 19.2797852,62.4487305 C21.050293,62.4487305 23.3183594,62.4804687 23.3183594,61.5761719 C23.3183594,60.671875 11.1489258,45.1435547 11.1489258,45.1435547 L3.05322266,33.5585937 L1.25878906,29.4321289 C1.25878906,29.4321289 1.27636719,21.7114258 2.70996094,23.3691406 C4.14355469,25.0268555 8.03173828,33.1713867 9.59033203,35.7451172 C11.1489258,38.3188476 19.4301758,48.1386719 22.5273438,51.3608398 C25.6245117,54.5830078 30.1933594,56.3623047 31.9755859,55.4902344 C33.7578125,54.618164 32.4233398,50.6225586 32.4233398,50.6225586 L22.8212891,41.2299805 L10.1279297,24.8789062 L6.67041016,16.7280273 C6.67041016,16.7280273 7.65673828,7.58642578 9.40283203,10.1542969 C11.1489258,12.722168 13.675293,21.8662119 20.3891602,28.8056641 C27.1030273,35.7451163 31.3725586,40.4804697 36.2021484,43.8828125 C41.0317383,47.2851553 45.4057617,47.4677744 46.8652344,46.3056641 C48.324707,45.1435538 48.487793,42.2856455 46.984375,40.7514648 C45.480957,39.2172842 35.5854492,29.4541016 35.5854492,29.4541016 L29.3276367,19.8320312 L22.7963867,9.99755859 C22.7963867,9.99755859 20.6420898,3.66650388 22.5668945,2.9921875 C24.4916992,2.31787112 26.0185547,2.08544922 26.0185547,2.08544922 C26.0185547,2.08544922 27.8505859,7.58203125 30.4619141,11.3706055 C33.0732422,15.1591797 41.1015625,25.6884766 45.059082,29.4541016 C49.0166016,33.2197266 61.9277344,43.6010742 66.0283203,46.3056641 C70.1289062,49.0102539 75.1958008,50.3994141 77.9755859,50.3994141 C80.7553711,50.3994141 81.6020508,46.8095703 79.4267578,40.184082 C77.2514648,33.5585938 73.5380859,22.050293 73.5380859,22.050293 L75.184082,14.1230469 L77.6708984,9.53466797 C77.6708984,9.53466797 80.2441406,7.43701172 83.0737305,9.40380859 C85.9033203,11.3706055 86.6450195,12.8671875 86.6450195,12.8671875 C86.6450195,12.8671875 83.7280273,26.3735352 85.6416016,32.7954102 C87.5551758,39.2172852 95.6625977,56.5507812 97.7998047,60.2143555 C99.9370117,63.8779297 104.772949,71.3808594 116.494629,77.9555664 C128.216309,84.5302734 238.231445,122.712891 253.549805,130.826172 C268.868164,138.939453 304.141602,153.008789 308.055664,153.008789 C311.969727,153.008789 318.135254,149.27832 314.959961,144.686523 C311.784668,140.094727 302.90332,125.319824 302.90332,125.319824 L297.014648,112.408691 L293.65625,105.162109 L306.558105,101.495117 L326.797363,95.7636719\" id=\"left-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-12)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-1-neck-2\" class=\"neck-2\" transform=\"translate(307.000000, 366.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M9.79785128,49.0620117 C9.79785128,49.0620117 0.64453125,68.2949219 0.64453125,83.7773438 C0.64453125,99.2597656 -1.34374988,117.357422 5.23828137,120.998047 C11.8203126,124.638672 36.3984372,120.998047 57.7089841,99.640625 C79.019531,78.2832031 89.3063962,61.2143555 89.3063962,54.456543 C89.3063962,53.456543 60.1152344,45.0429688 60.1152344,45.0429688 L9.79785128,49.0620117 Z\" fill=\"#DADADA\"></path>\n                        <path d=\"M27.6035156,-0.395996094 C27.6035156,-0.395996094 26.1699219,23.1030273 28.1762695,29.2910156 C30.1826172,35.4790039 36.4692387,47.1367188 38.8569336,49.9169922 C41.2446285,52.6972656 56.1874994,61.6967773 63.9458008,65.3549805 C71.7041021,69.0131836 81.1376948,71.1713867 81.9985352,71.1713867 C82.8593756,71.1713867 70.6635742,85.4145508 70.6635742,85.4145508 C70.6635742,85.4145508 54.7509766,103.900391 47.8012695,108.207031 C47.8012695,108.207031 36.4067383,116.817871 24.28125,120.470215 C24.28125,120.470215 14.6694336,123.044922 7.14648437,122.047363 C7.14648437,122.047363 1.1875,122.047363 0.536621094,108.207031 C0.536621094,108.207031 -0.0947265625,95.5883789 0.536621094,87.4667969 C0.536621094,87.4667969 0.536621104,75.3544922 3.20263664,67.7216797 C3.20263664,67.7216797 6.02294938,55.7636719 7.73584,54.5483398 C7.73584,54.5483398 8.37744109,51.6044922 9.78906218,48.9765625 C9.78906218,48.9765625 9.50537109,45.8325195 8.37744141,40.1362305 C7.24951172,34.4399414 2.09375,24.2797852 2.09375,24.2797852 L20.3208008,1.359375 L27.6035156,-0.395996094 Z\" id=\"neck-shadow\" fill-opacity=\"0.06\" fill=\"#000000\"></path>\n                    </g>\n                </g>\n                <g id=\"mobile-shape-2\" class=\"mobile-shape\">\n                    <rect class='rectbg' id=\"bg-2\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <g id=\"mobile-shape-2-right-earplug\" class=\"right-earplug\" transform=\"translate(211.000000, 254.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M25.5800781,0.677734375 C25.5800781,0.677734375 10.4570312,-1.51953125 6.0625,2.24804688 C1.66796875,6.015625 -2.03125,21.2441393 2.015625,38.5742188 C6.0625,55.9042982 4.43554616,54.8554675 17.6953125,60.4160156 C30.9550788,65.9765638 25.5800781,0.677734375 25.5800781,0.677734375 Z\" fill=\"#D0011B\" class=\"highlight\"></path>\n                        <path d=\"M25.5800781,0.677734375 C25.5800781,0.677734375 10.4570312,-1.51953125 6.0625,2.24804688 C1.66796875,6.015625 -2.03125,21.2441393 2.015625,38.5742188 C6.0625,55.9042982 4.43554616,54.8554675 17.6953125,60.4160156 C30.9550788,65.9765638 25.5800781,0.677734375 25.5800781,0.677734375 Z\" id=\"right-earplug-shadow\" fill-opacity=\"0.159999996\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-earplug-top\" class=\"earplug-top\" transform=\"translate(223.000000, 87.000000)\">\n                        <mask id=\"mask-14\" sketch:name=\"earplug-top\" fill=\"white\">\n                            <use xlink:href=\"#path-13\"></use>\n                        </mask>\n                        <use fill=\"#D0011B\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-13\" class=\"highlight\"></use>\n                        <path d=\"M259.754395,157.520508 C259.754395,157.520508 261.033691,162.486816 264.947754,163.359375 C268.861816,164.231934 271.499023,164.493652 271.499023,164.493652 C271.499023,164.493652 272.738281,101.276855 272.738281,96.5024414 C272.738281,91.7280273 269.912109,65.7939458 263.607422,58.2978521 C257.302734,50.8017583 226.286621,24.8120116 206.228516,18.5283199 C186.17041,12.2446282 185.061523,12.0166016 141.978027,8.68701174 C116.319119,6.70403334 93.0427588,8.73729298 73.8896484,15.8129883 C63.6859531,19.582519 53.6100665,23.263529 45.8466778,27.7900389 C29.154282,37.5226824 19.868164,47.8261717 19.868164,47.8261717 L15.6367187,52.4321288 C15.6367187,52.4321288 -2.56510263,108.464751 -0.0717773939,107.275883 C0.766792534,106.876035 -2.87916121,149.384954 -0.897460917,155.565922 C1.21312233,162.148878 9.04927438,132.177607 13.1943357,122.917484 C15.2598282,118.303146 14.8263299,95.2697434 18.4721677,75.0556677 C21.1680408,60.1086004 26.899507,54.5336957 29.5664063,50.7880858 C30.4739774,49.5134191 36.8144512,39.4365233 43.1142559,34.8149413 C49.4140606,30.1933592 73.7851871,18.893166 77.0302734,18.5283196 C96.5846983,16.3298075 114.263184,27.7900391 114.263184,27.7900391 L192.063965,37.78125 L246.211426,67.9824219 L256.211914,114.938477 L257.302734,152.177246 L259.754395,157.520508 Z\" id=\"earplug-top-shadow\" fill-opacity=\"0.190000013\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-14)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-head\" class=\"head\" transform=\"translate(220.000000, 134.000000)\">\n                        <mask id=\"mask-16\" sketch:name=\"head\" fill=\"white\">\n                            <use xlink:href=\"#path-15\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-15\"></use>\n                        <path d=\"M115.130859,0.513671875 C115.130859,0.513671875 13.1049753,137.502968 99.484375,228.070312 C117.613709,247.078614 152.630739,246.907621 189.085938,262.041016 C399.236328,349.279297 -39.1992188,252.96875 -39.1992188,252.96875 L-73.1289062,168.255859 L-13.1630859,87.1689453 L82.2001953,4.76367188 L115.130859,0.513671875 Z\" id=\"head-shadow\" fill-opacity=\"0.0599999987\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-16)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-body\" class=\"body\" transform=\"translate(141.000000, 458.000000)\">\n                        <mask id=\"mask-18\" sketch:name=\"body\" fill=\"white\">\n                            <use xlink:href=\"#path-17\"></use>\n                        </mask>\n                        <use fill=\"#999999\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-17\"></use>\n                        <path d=\"M19.4208984,228.688477 C19.4208984,228.688477 12.0551758,225.205078 9.72314453,224.07666 C7.39111328,222.948242 4.70117187,222.11377 3.44775391,222.11377 C2.19433594,222.11377 0.815917969,221.705322 2.72949219,223.553223 C4.64306641,225.401123 16.0361328,234.728027 16.0361328,234.728027 L19.4208984,228.688477 Z\" id=\"body-shadow-1\" fill-opacity=\"0.19\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-18)\"></path>\n                        <path d=\"M92.9693775,266.86377 C90.1815226,266.313339 87.3212891,264.967773 87.3212891,264.967773 L90.9243164,260.193359 C90.9243164,260.193359 97.6499023,264.232422 98.2983398,265.136719 C98.9467773,266.041016 98.6157227,266.86377 97.2255859,266.86377 C96.6839308,266.86377 94.7490931,267.215154 92.9693775,266.86377 Z\" id=\"body-shadow-2\" fill-opacity=\"0.19\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-18)\"></path>\n                        <path d=\"M380.643311,274.852783 C380.643311,274.852783 357.989624,280.054321 356.752319,280.456421 C355.515015,280.858521 354.204224,281.802856 356.236938,281.988159 C358.057464,282.154119 368.098861,279.397502 371.862297,278.334444 C372.30094,278.210541 380.595826,275.534815 380.840942,275.464233 C380.984985,275.534815 380.643311,274.852783 380.643311,274.852783 Z\" id=\"body-shadow-3\" fill-opacity=\"0.19\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-18)\"></path>\n                        <path d=\"M150.646484,9.7890625 C119.789459,17.6217818 89.2792969,40.6484375 83.0917969,43.765625 C76.9042969,46.8828125 72.8339844,48.8339844 69.9140625,54.7441406 C66.9941406,60.6542969 46.7324219,140.320312 46.7324219,147.181641 C46.7324219,154.042969 44.5097656,170.429687 44.5097656,173.279297 C44.5097656,176.128906 39.7724609,179.511719 38.4003906,179.511719 C37.0283203,179.511719 35.4238281,181.030273 36.9121094,183.000977 C38.4003906,184.97168 38.7685547,189.131836 35.9765625,192.922852 C33.1845703,196.713867 22.4775391,212.591797 17.0166016,215.720703 C11.5556641,218.849609 8.15429688,220.233398 8.15429688,220.233398 C8.15429688,220.233398 22.6943359,225.456055 27.1367188,228.323242 C31.5791016,231.19043 64.3046875,244.961914 67.8349609,246.782227 C71.3652344,248.602539 91.8027344,257.500977 94.9599609,260.344727 C98.1171875,263.188477 99.9140625,264.839844 99.9140625,264.839844 L109.125977,240.09375 L112.040039,209.147461 C112.040039,209.147461 112.686523,255.668945 110.90625,267.986328 C109.125977,280.303711 110.916016,287.112305 107.775391,298.441406 C104.634766,309.770508 99.9707031,344.578125 98.4990234,348.131836 C97.0273437,351.685547 98.0537109,397.31543 98.0537109,402.101562 C98.0537109,406.887695 95.5644531,430.924805 91.4238281,445.03418 C87.2832031,459.143555 81.2529297,477.19043 79.5947266,480.132812 C77.9365234,483.075195 75.1347656,483.708984 73.5,484.907227 C71.8652344,486.105469 75.4814453,492.451172 82.1123047,497.3125 C88.7431641,502.173828 118.079102,509.165039 121.631836,510.473633 C125.18457,511.782227 190.671875,524.875977 197.551758,526.43457 C204.431641,527.993164 244.671875,525.375977 250.219727,525.375977 C255.767578,525.375977 323.1875,512.475586 331.789062,509.084961 C340.390625,505.694336 346.201172,504.12793 346.201172,504.12793 C346.201172,504.12793 332.963867,498.306641 330.858398,480.18457 C328.75293,462.0625 301.03125,410.97168 301.03125,390.954102 C301.03125,370.936523 295.143555,300.560547 291.566406,278.076172 C287.989258,255.591797 279.035156,120.267578 281.142578,97.6972656 C283.25,75.1269531 296.617188,40.2617188 296.617188,40.2617188 C296.617188,40.2617188 277.098633,63.3222656 273.109375,65.8398438 C269.120117,68.3574219 247.537109,81.1699219 240.180664,81.1699219 C232.824219,81.1699219 206.692383,85.5722656 193.042969,75.1269531 C179.393555,64.6816406 170.768555,52.0673828 170.768555,52.0673828 C170.768555,52.0673828 155.601562,35.4814453 154.379883,25.6699219 C153.158203,15.8583984 153.686523,9.86230469 153.686523,9.86230469\" id=\"body-shadow-4\" fill-opacity=\"0.09\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-18)\"></path>\n                        <path d=\"M355.586914,281.894531 C355.586914,281.894531 351.032227,285.674805 347.857422,278.120117 C344.682617,270.56543 344.362305,219.40918 342.006836,200.176758 C339.651367,180.944336 334.049805,141.900391 332.317383,136.589844 C330.584961,131.279297 329.636719,128.051758 329.636719,128.051758 C329.636719,128.051758 333.723633,130.994141 336.602539,138.660156 C339.481445,146.326172 351.141602,196.412109 353.364258,205.548828 C355.586914,214.685547 357.50293,250.65625 358.811523,256.128906 C360.120117,261.601562 359.208008,269.930664 364.331055,271.924805 C369.454102,273.918945 384.004883,268.183594 391.669922,264.543945 C399.334961,260.904297 426.681641,244.026367 426.681641,244.026367 C426.681641,244.026367 401.744141,262.172852 396.707031,264.405273 C391.669922,266.637695 386.737305,270.820312 378.15918,273.4375 C369.581055,276.054688 365.854492,276.292969 358.811523,278.120117 C351.768555,279.947266 355.586914,281.894531 355.586914,281.894531 Z\" id=\"body-shadow-5\" fill-opacity=\"0.09\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-18)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-neck\" class=\"neck\" transform=\"translate(298.000000, 388.000000)\">\n                        <mask id=\"mask-20\" sketch:name=\"neck\" fill=\"white\">\n                            <use xlink:href=\"#path-19\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-19\"></use>\n                        <path d=\"M54.2763672,-4.63964844 C61.5791064,-4.63964844 80.6160626,-2.47290896 91.1669922,1.06542969 C98.8995783,3.6586143 99.7509766,7.921875 99.7509766,7.921875 C99.7509766,7.921875 81.0223477,10.8877114 74.8242188,19.1464844 C67.6287505,28.7341744 70.0897525,46.0328822 71.9863281,55.640625 C75.5166016,73.5244141 85.1298836,82.7607422 99.7509766,89.8154297 C114.37207,96.8701172 148.208984,100.696289 148.208984,100.696289 L132.331055,146.624023 L54.2763672,152.46875 L-6.15820312,115.080078 L-18.6220703,83.5351562 L-12.7773438,57.1015625 L19.390625,40.2880859 L24.59375,-2.78417969 C24.59375,-2.78417969 41.621582,-4.63964844 54.2763672,-4.63964844 Z\" id=\"neck-shadow\" fill-opacity=\"0.0599999987\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-20)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-left-arm\" class=\"left-arm\" transform=\"translate(494.000000, 700.000000)\">\n                        <mask id=\"mask-22\" sketch:name=\"left-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-21\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-21\"></use>\n                        <path d=\"M50.7109375,16.6777344 C50.7109375,16.6777344 73.7871094,110.720703 73.7871094,121.095703 C73.7871094,131.470703 65.5976562,167.957031 58.1542969,186.929688 C50.7109375,205.902344 10.7441406,274.679688 8.67382812,277.75 C6.60351563,280.820312 -5.98242188,260.080078 -5.98242188,260.080078 L28.390625,208.808594 L49.5253906,134.876953 L32.7988281,61.015625 L22.15625,26.9921875 L50.7109375,16.6777344 Z\" id=\"left-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-22)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-mobile\" class=\"mobile\" transform=\"translate(56.000000, 471.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M3.9069949,-0.0754937138 C1.19693645,-0.586084437 -0.723491731,1.21206615 -0.38037321,3.95701432 L12.3803732,106.042986 C12.7225836,108.780669 15.1868979,111.451265 17.8910815,112.009271 L71.1089185,122.990729 C73.8101882,123.548134 75.840197,121.762758 75.6433256,119.006558 L68.3566744,16.9934421 C68.1596886,14.2356402 65.8017391,11.5858349 63.0930051,11.0754937 L3.9069949,-0.0754937138 Z\" fill=\"#D0011B\" class=\"highlight\"></path>\n                        <path d=\"M3.8995249,3.95065409 C1.19359202,3.42562233 -0.712404238,5.21859588 -0.357456795,7.95676186 L12.3574568,106.043238 C12.7123236,108.780782 15.1890073,111.46651 17.8887715,112.041869 L69.1112285,122.958131 C71.8112225,123.533539 73.834745,121.769057 73.6301879,119.007537 L66.3698121,20.9924628 C66.1655705,18.2352017 63.8088821,15.5748577 61.1004751,15.0493459 L3.8995249,3.95065409 Z\" id=\"mobile-shadow\" fill-opacity=\"0.160000011\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-right-arm\" class=\"right-arm\" transform=\"translate(59.000000, 490.000000)\">\n                        <mask id=\"mask-24\" sketch:name=\"right-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-23\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-23\"></use>\n                        <path d=\"M117.527342,196.956055 L80.4628892,246.448242 C80.4628892,246.448242 83.5546861,256.499023 86.333983,265.210938 C89.1132799,273.922852 93.9882813,296.249023 93.9882813,299.989258 C93.9882813,303.729492 87.5156236,303.298828 87.5156236,303.298828 C87.5156236,303.298828 78.5107422,305.845703 72.0556641,288.933594 C65.6005859,272.021484 48.2285156,203.300781 48.2285156,196.956055 C48.2285156,190.611328 39.6035156,103.137695 41.2617188,96.4316406 C42.9199219,89.7255859 60.942383,75.2324219 63.2861328,71.8652344 C65.6298826,68.4980469 73.1845705,54.9658203 74.3828125,50.9755859 C75.5810545,46.9853516 73.6210938,43.53125 73.6210938,43.53125 L71.2619629,40.5275879 C71.2619629,40.5275879 68.8281252,46.4975586 67.7492676,48.3803711 C66.67041,50.2631836 61.9130861,58.8618164 59.8876953,60.5383301 C57.8623045,62.2148438 70.7473146,38.8537598 71.0046387,36.114502 C71.2619627,33.3752441 70.3127443,29.1411133 69.8547363,28.4462891 C69.3967283,27.7514648 67.3481445,25.0400391 67.3481445,25.0400391 L66.5280762,25.6040039 C66.5280762,25.6040039 55.492676,48.9909668 54.121582,50.751709 C52.7504881,52.5124512 55.2409668,46.7346191 55.2409668,46.7346191 C55.2409668,46.7346191 65.7075197,20.6491699 66.527832,18.1408691 C67.3481443,15.6325684 70.2138674,9.43310547 70.2138672,8.47924805 C70.213867,7.52539062 66.671631,1.8112793 66.1352539,1.8112793 C65.5988768,1.8112793 62.3085938,6.50024414 62.3085938,6.50024414 C62.3085938,6.50024414 38.5917971,33.1079102 35.5878906,35.1899414 C32.5839842,37.2719727 15.9711914,49.9042969 12.8771973,49.9042969 C9.78320313,49.9042969 4.00390625,47.9821777 3.26806641,47.6113281 C2.53222656,47.2404785 4.74389648,59.8713379 8.81054688,67.760498 C12.8771973,75.6496582 18.2109379,195.437988 17.4692383,201.58252 C16.7275386,207.727051 24.1342773,287.978027 24.1342773,287.978027 L28.1811523,323.416016 C28.1811523,323.416016 38.9169936,337.112305 43.5727539,339.723633 C48.2285142,342.334961 62.6596693,347.220703 65.0039062,347.220703 C67.3481432,347.220703 97.7812514,325.402344 103.303223,321.918457 C108.825194,318.43457 176.673828,226.018555 176.673828,226.018555 L117.527342,196.956055 Z\" id=\"right-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-24)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-earplug-string\" class=\"earplug-string\" transform=\"translate(123.000000, 339.000000)\" stroke=\"#D0011B\" stroke-width=\"4\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M351.976562,0.017578125 C351.976562,0.017578125 280.052734,257.621094 261.035156,284.783203 C253.722169,295.228074 249.096077,372.849656 224.527344,451.345703 C206.324219,509.503906 154.238281,532.908203 154.238281,532.908203 C154.238281,532.908203 123.728516,545.794922 105.304688,536.746094 C86.8808594,527.697266 59.6601563,500.853516 50.4375,471.761719 C41.7318298,444.300694 1.20117187,349.748291 1.20117187,349.371582 C1.20117187,348.994873 0.528497357,347.226858 0.103759766,347.382568\" id=\"earplug-string-left\" class=\"highlightStroke\"></path>\n                        <path d=\"M119.242676,7.8828125 C113.303376,12.2563738 136.974385,82.9378254 147.822266,104.949219 C159.837891,129.330078 212.310543,236.775391 229.455078,257.197266 C246.599613,277.619141 260.511723,286.609375 260.511723,286.609375\" id=\"earplug-string-right\" class=\"highlightStroke\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-left-earplug\" class=\"left-earplug\" transform=\"translate(450.000000, 242.000000)\">\n                        <mask id=\"mask-26\" sketch:name=\"left-earplug\" fill=\"white\">\n                            <use xlink:href=\"#path-25\"></use>\n                        </mask>\n                        <use fill=\"#D0011B\" sketch:type=\"MSShapeGroup\" transform=\"translate(32.985291, 50.412489) rotate(4.000000) translate(-32.985291, -50.412489) \" xlink:href=\"#path-25\" class=\"highlight\"></use>\n                        <path d=\"M34.6859112,2.07922363 C34.6859112,2.07922363 41.7304669,1.52270508 45.6445294,5.23852539 C49.5585919,8.9543457 45.8955078,10.9990234 45.8955078,10.9990234 C45.8955078,10.9990234 33.3662109,17.3769531 29.7792969,22.7753906 C26.1923828,28.1738281 17.765625,52.0537109 21.2148438,69.0136719 C24.6640625,85.9736328 24.1513672,84.9013672 28.1875,90.4619141 C32.2236328,96.0224609 41.5917969,96.171875 41.5917969,96.171875 C41.5917969,96.171875 34.5781249,100.295898 30.6464844,100.295898 C26.7148438,100.295898 2.96386796,99.6494141 1.40527344,96.2822266 C-0.153321089,92.9150391 0.893554688,47.4003906 0.893554688,47.4003906 L9.09375,11.2666016 L26.1923828,0.309570312 L34.6859112,2.07922363 Z\" id=\"left-earplug-shadow\" fill-opacity=\"0.160000011\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-26)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-2-hairs\" class=\"hairs\" transform=\"translate(254.000000, 131.000000)\" stroke=\"#999999\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M13.5,38.5 L13.5,32.5\" id=\"Line\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M16.5,36.5 L16.5,30.5\" id=\"Line-2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M18.5,37.5 L18.5,31.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M28.5,37.5 L28.5,31.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M31.5,27.5 L31.5,21.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M33.5,37.5 L33.5,31.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M23.5,32.5 L23.5,26.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M25.5,31.5 L25.5,25.5\" id=\"Line-2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M28.5,29.5 L28.5,23.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M30.5,30.5 L30.5,24.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M40.5,30.5 L40.5,24.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M43.5,20.5 L43.5,14.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M45.5,30.5 L45.5,24.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M35.5,25.5 L35.5,19.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M49.5,24.5 L49.5,18.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M52.5,22.5 L52.5,16.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M54.5,23.5 L54.5,17.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M64.5,23.5 L64.5,17.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M67.5,13.5 L67.5,7.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M69.5,23.5 L69.5,17.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M59.5,18.5 L59.5,12.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M113.5,22.5 L113.5,16.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M116.5,20.5 L116.5,14.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M118.5,21.5 L118.5,15.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M128.5,21.5 L128.5,15.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M131.5,11.5 L131.5,5.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M133.5,21.5 L133.5,15.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M123.5,16.5 L123.5,10.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M127.5,31.5 L127.5,25.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M130.5,29.5 L130.5,23.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M132.5,30.5 L132.5,24.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M142.5,30.5 L142.5,24.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M145.5,20.5 L145.5,14.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M147.5,30.5 L147.5,24.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M137.5,25.5 L137.5,19.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M147.5,41.5 L147.5,35.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M150.5,39.5 L150.5,33.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M152.5,40.5 L152.5,34.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M162.5,40.5 L162.5,34.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M165.5,30.5 L165.5,24.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M167.5,40.5 L167.5,34.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M157.5,35.5 L157.5,29.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M193.5,83.5 L193.5,77.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M196.5,81.5 L196.5,75.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M198.5,82.5 L198.5,76.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M208.5,82.5 L208.5,76.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M211.5,72.5 L211.5,66.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M213.5,82.5 L213.5,76.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M203.5,77.5 L203.5,71.5\" id=\"Line-13\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M201.5,101.5 L201.5,95.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M204.5,99.5 L204.5,93.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M206.5,100.5 L206.5,94.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M216.5,100.5 L216.5,94.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M219.5,90.5 L219.5,84.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M221.5,100.5 L221.5,94.5\" id=\"Line-13\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M211.5,95.5 L211.5,89.5\" id=\"Line-14\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M75.5,6.5 L75.5,1.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M78.5,8.5 L78.5,3.5\" id=\"Line-2\" stroke-linecap=\"square\"></path>\n                        <path d=\"M72.5,10.5 L72.5,5.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M76.5,13.5 L76.5,8.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M81.5,15.5 L81.5,10.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M87.5,12.5 L87.5,7.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M90.5,7.5 L90.5,1.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M94.5,16.5 L94.5,11.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M98.5,19.5 L98.5,14.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M103.5,21.5 L103.5,16.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M109.5,18.5 L109.5,13.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M112.5,13.5 L112.5,7.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M107.5,26.5 L107.5,21.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M111.5,29.5 L111.5,24.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M116.5,31.5 L116.5,26.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M122.5,28.5 L122.5,23.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M125.5,23.5 L125.5,17.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M156.5,43.5 L156.5,38.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M160.5,46.5 L160.5,41.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M165.5,48.5 L165.5,43.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M171.5,45.5 L171.5,40.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M174.5,40.5 L174.5,34.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M176.5,54.5 L176.5,49.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M180.5,57.5 L180.5,52.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M185.5,59.5 L185.5,54.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M191.5,56.5 L191.5,51.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M194.5,51.5 L194.5,45.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M169.5,44.5 L169.5,39.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M173.5,47.5 L173.5,42.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M178.5,49.5 L178.5,44.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M184.5,46.5 L184.5,41.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M187.5,41.5 L187.5,35.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M179.5,71.5 L179.5,66.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M183.5,74.5 L183.5,69.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M188.5,76.5 L188.5,71.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M194.5,73.5 L194.5,68.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M197.5,68.5 L197.5,62.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M192.5,88.5 L192.5,83.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M196.5,91.5 L196.5,86.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M201.5,93.5 L201.5,88.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M207.5,90.5 L207.5,85.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M210.5,85.5 L210.5,79.5\" id=\"Line-14\" stroke-linecap=\"square\"></path>\n                        <path d=\"M56.5,28.5 L56.5,23.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M60.5,31.5 L60.5,26.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M65.5,33.5 L65.5,28.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M71.5,30.5 L71.5,25.5\" id=\"Line-14\" stroke-linecap=\"square\"></path>\n                        <path d=\"M74.5,25.5 L74.5,19.5\" id=\"Line-15\" stroke-linecap=\"square\"></path>\n                        <path d=\"M104.5,5.5 L104.5,0.400980473\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M152.5,19.5 L152.5,14.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M157.5,22.5 L157.5,19.3377224\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M217.5,113.5 L217.5,108.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M213.5,111.5 L213.5,106.5\" id=\"Line-2\" stroke-linecap=\"square\"></path>\n                        <path d=\"M223.5,110.5 L223.5,105.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M219.5,109.5 L219.5,104.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M210.5,117.5 L210.5,112.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M193.5,61.5 L193.5,56.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M203.5,60.5 L203.5,55.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M199.5,59.5 L199.5,54.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M190.5,67.5 L190.5,62.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M80.5,27.5 L80.5,22.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M90.5,26.5 L90.5,21.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M86.5,25.5 L86.5,20.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M77.5,33.5 L77.5,28.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M95.5,27.5 L95.5,22.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M105.5,26.5 L105.5,21.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M101.5,25.5 L101.5,20.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M92.5,33.5 L92.5,28.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M4.5,46.5 L4.5,41.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M14.5,45.5 L14.5,40.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M10.5,44.5 L10.5,39.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M1.5,52.5 L1.5,47.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M55.5,12.5 L55.5,8.37689438\" id=\"Line\" stroke-linecap=\"square\"></path>\n                    </g>\n                </g>\n                <g id=\"mobile-shape-3\" class=\"mobile-shape\">\n                    <rect  class='rectbg' id=\"bg-3\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <g id=\"mobile-shape-3-hairs-back\" class=\"hairs-back\" transform=\"translate(152.000000, 383.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M96.3457031,4.81640625 L95.3222656,123.960938 L283.798828,217.304688 L295.138672,205.636719 C295.138672,205.636719 255.207031,99.7558594 255.207031,75.0253906 C255.207031,50.2949219 281.121094,-0.068359375 281.121094,-0.068359375 L96.3457031,4.81640625 Z\" fill=\"#222222\"></path>\n                        <path d=\"M-0.115234375,200.011719 C-0.115234375,200.011719 10.6933594,214.515625 34.7578125,225.833984 C58.8222656,237.152344 66.8808594,239.419922 66.8808594,239.419922 L69.4560547,227.658203 L-0.115234375,200.011719 Z\" id=\"hairs-back-2\" fill=\"#262626\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-left-arm\" class=\"left-arm\" transform=\"translate(384.000000, 584.000000)\">\n                        <mask id=\"mask-28\" sketch:name=\"left-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-27\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" transform=\"translate(74.500000, 97.000000) rotate(-4.000000) translate(-74.500000, -97.000000) \" xlink:href=\"#path-27\"></use>\n                        <path d=\"M98.1679688,41.1582031 C98.1679688,41.1582031 64.4707031,99.0859375 48.2910156,117.753906 C32.1113281,136.421875 18.0253906,144.949219 18.0253906,144.949219 L13.5136719,107.832031 L52.7460938,78.1933594 L86.9199219,40.8789062 L98.1679688,41.1582031 Z\" id=\"left-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-28)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-head\" class=\"head\" transform=\"translate(238.000000, 208.000000)\">\n                        <mask id=\"mask-30\" sketch:name=\"head\" fill=\"white\">\n                            <use xlink:href=\"#path-29\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-29\"></use>\n                        <path d=\"M100.314453,105.449219 C100.314453,105.449219 59.1386719,173.251953 100.314453,202.087891 C141.490234,230.923828 189.820312,207.367188 189.820312,207.367188 L154.949219,232.96875 L123.742188,239.076172 L95.7441406,239.076172 L56.4296875,234.458984 L27.140625,215.835938 L15.4511719,190.410156 L100.314453,105.449219 Z\" id=\"head-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-30)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-t-shirt\" class=\"t-shirt\" transform=\"translate(196.000000, 475.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M94.4960938,9.546875 C94.4960938,9.546875 68.3730469,21.8769531 63.40625,27.1914062 C58.4394531,32.5058594 46.5507813,36.484375 36.4316406,82.3828125 C26.3125,128.28125 11.3320313,195.302734 8.88867188,202.060547 C6.4453125,208.818359 3.8515625,213.158203 1.328125,216.181641 C-1.1953125,219.205078 1.88867188,223.392578 5.38867188,223.392578 C8.88867188,223.392578 19.671876,227.904297 41.5390625,227.904297 C63.406249,227.904297 70.7822266,220.092773 70.7822266,220.092773 L70.0615234,242.90332 L31.5556641,310.506836 C31.5556641,310.506836 29.8115226,352.904297 27.1943359,372.259766 C24.5771493,391.615234 16.8847657,439.334961 12.8867188,445.516602 C8.8886718,451.698242 3.3144532,453.355469 9.83398438,461.881836 C16.3535156,470.408203 57.9697314,490.162109 100.105469,490.162109 C142.241206,490.162109 215.25977,477.861328 230.688477,472.725586 C246.117183,467.589844 260.786138,459.912109 263.803711,458.179688 C266.821284,456.447266 268.879888,454.189453 264.355469,451.398438 C259.83105,448.607422 233.485356,404.975586 230.344727,389.37207 C227.204097,373.768555 211.922856,300.936523 212.969727,267.821289 C214.016597,234.706055 223.79688,189.098633 226.227539,183.8125 C228.658198,178.526367 246.179688,174.329102 239.986323,153.339844 C233.792959,132.350586 242.730469,136.716797 242.730464,135.716797 C242.730459,134.716797 239.986323,123.060547 239.986323,123.060547 C239.986323,123.060547 228.052739,55.34375 222.643555,41.2675781 C217.23437,27.1914062 214.320317,10.7695312 207.999023,7.37890625 C201.67773,3.98828125 175.750981,-0.374023438 171.848633,-0.374023438 C167.946284,-0.374023438 162.758789,0.672851562 162.758789,0.672851562 L94.4960938,9.546875 Z\" fill=\"#999999\"></path>\n                        <path d=\"M20.6330566,222.126953 C20.6330566,222.126953 14.5205078,222.129883 11.1794434,222.448242 C7.83837891,222.766602 6.49926758,222.772461 5.61376953,222.772461 C4.72827148,222.772461 6.09643555,223.15918 10.3027344,223.729248 C14.5090332,224.299316 20.5981445,225.86377 20.5981445,225.86377 L20.6330566,222.126953 Z\" id=\"t-shirt-shadow-1\" fill-opacity=\"0.22\" fill=\"#000000\"></path>\n                        <path d=\"M28.2695313,135.546875 C28.2695313,135.546875 25.8271484,152.133789 23.5703125,161.607422 C21.3134766,171.081055 18.0869141,190.972656 15.1201172,199.061523 C12.1533203,207.150391 10.1005859,210.925781 7.79199219,213.757812 C5.48339844,216.589844 2.81347656,217.462891 4.36035156,219.183594 C5.90722656,220.904297 12.6357417,219.845703 16.3408203,219.845703 C20.0458989,219.845703 43.8090806,217.814455 52.5473619,218.499025 C61.2856431,219.183595 69.8291001,219.183595 69.8291001,219.183595 C69.8291001,219.183595 51.3461914,216.209474 48.7641587,215.047365 C46.1821261,213.885256 28.507812,211.638672 31.2119141,194.954102 C33.9160161,178.269531 39.2382827,147.269531 44.2978516,137.162109 C49.3574205,127.054688 28.2695313,135.546875 28.2695313,135.546875 Z\" id=\"t-shirt-shadow-2\" fill-opacity=\"0.0899999961\" fill=\"#000000\"></path>\n                        <path d=\"M50.5488281,222.125 C50.5488281,222.125 45.5605469,300.861328 42.7675781,323.972656 C39.9746094,347.083984 33.6660156,395.845703 27.9082031,420.423828 C22.1503906,445.001953 18.578125,446.724609 15.3105469,450.515625 C12.0429688,454.306641 13.5878906,458.539062 17.9277344,462.832031 C22.2675781,467.125 69.1992199,493.142578 82.0410156,496.435547 C94.8828114,499.728516 204.095703,482.304688 204.095703,482.304688 C204.095703,482.304688 167.27929,481.734375 157.707031,467.625 C148.134772,453.515625 116.681642,458.925781 116.681641,359.496094 C116.681639,260.066406 122.023439,209.628906 127.361328,204.617188 C132.699218,199.605469 133.257806,186.4375 149.4375,186.4375 C165.617194,186.4375 208.246087,174.224609 208.246094,174.224609 C208.2461,174.224609 165.826173,186.785156 136.734375,181.726562 C107.642577,176.667969 109.724611,142.9375 113.203125,119.976562 C116.681639,97.015625 102.863282,61.2695313 94.1621094,48.0566406 C85.4609364,34.84375 82.8925793,25.515625 77.9257812,25.515625 C72.9589832,25.515625 62.234375,29.8535156 62.234375,29.8535156 C62.234375,29.8535156 79.2871105,105.623047 79.2871094,121.755859 C79.2871082,137.888672 81.5078136,209.566406 78.484375,221.091797 C75.4609364,232.617188 58.6308594,230.802734 58.6308594,230.802734 L50.5488281,222.125 Z\" id=\"t-shirt-shadow-3\" fill-opacity=\"0.0899999961\" fill=\"#000000\"></path>\n                        <path d=\"M198.992188,25.1328125 C198.992188,25.1328125 210.892578,65.1240234 217.824219,90.4394531 C224.755859,115.754883 230.391602,131.493164 230.391602,136.62207 C230.391602,141.750977 235.899414,137.051758 235.899414,137.051758 L238.02832,131.555664 C238.02832,131.555664 224.887695,78.4716797 216.864258,61.3349609 C208.84082,44.1982422 198.992188,25.1328125 198.992188,25.1328125 Z\" id=\"t-shirt-shadow-4\" fill-opacity=\"0.0899999961\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-mobile\" class=\"mobile\" transform=\"translate(454.000000, 470.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M15.9011552,17.1279771 C13.7466067,17.609582 11.8579327,19.78768 11.6836604,21.9806071 L0.316339634,165.019393 C0.141630079,167.217822 1.69790722,168.460665 3.81740262,167.787413 L81.1825974,143.212587 C83.2908906,142.542894 85.1495522,140.217836 85.3350514,138.007304 L96.6649486,2.99269584 C96.8499924,0.787590818 95.2441652,-0.607519276 93.0988448,-0.127977079 L15.9011552,17.1279771 Z\" fill=\"#D0011B\" class=\"highlight\"></path>\n                        <path d=\"M16.2457975,21.2674985 C14.0885988,21.7400048 12.1904775,23.900903 12.0049883,26.1087177 L0.334855512,165.014329 C0.149919919,167.215554 1.7030692,168.441109 3.79996437,167.752977 L80.5047252,142.581014 C82.6033876,141.892303 84.4560004,139.544915 84.6417913,137.34815 L95.5984417,7.79834144 C95.7846179,5.59702199 94.1895285,4.19494178 92.0295898,4.66804816 L16.2457975,21.2674985 Z\" id=\"mobile-shadow\" fill-opacity=\"0.16\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-neck\" class=\"neck\" transform=\"translate(289.000000, 432.000000)\">\n                        <mask id=\"mask-32\" sketch:name=\"neck\" fill=\"white\">\n                            <use xlink:href=\"#path-31\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-31\"></use>\n                        <path d=\"M60.1582031,8.72851562 C60.1582031,8.72851562 38.7939453,11.953125 36.9414063,19.3510742 C35.0888672,26.7490234 34.1455078,60.3999023 35.543457,65.878418 C36.9414063,71.3569336 53.5166033,108.866211 62.8393555,120.009277 C72.1621077,131.152344 88.1035156,141.641113 88.1035156,141.641113 L30.8056641,115.513184 L10.4848633,83.8691406 L-4.43017578,53.4194336 L8.4375,16.1743164 L10.1445312,-3.74804688 L54.3798828,-7.71142578 L65.9594727,-2.31445313 L64.3134766,8.74755859 L60.1582031,8.72851562 Z\" id=\"neck-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-32)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-right-arm\" class=\"right-arm\" transform=\"translate(215.000000, 541.000000)\">\n                        <mask id=\"mask-34\" sketch:name=\"right-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-33\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-33\"></use>\n                        <path d=\"M33.8896488,153.967773 C33.8896488,153.967773 32.4238281,194.964844 35.2148438,199.976563 C38.0058594,204.988281 47.0781242,207.304688 53.3359375,205.210938 C59.5937508,203.117188 131.154298,153.486328 147.111328,138.677734 C163.068358,123.869141 224.681642,69.4550781 226.376953,67.7104492 C228.072265,65.9658203 230.808595,58.4750977 230.808594,56.9165039 C230.808593,55.3579102 233.998536,38.7172852 235.083496,35.7949219 C236.168456,32.8725586 239.489747,21.6630859 240.486816,19.7929688 C241.483886,17.9228516 243.501954,14.3081055 243.501953,12.4501953 C243.501952,10.5922852 244.685547,6.79736328 244.685547,6.79736328 L249.041992,13.2470703 L248.405273,37.3134766 L249.175781,40.0615234 L266.48877,32.1464844 L284.017578,10.8720703 L288.499023,2.81396484 C288.499023,2.81396484 291.214845,1.63623047 291.732422,2.76464844 C292.249999,3.89306641 290.909669,10.6689453 289.333496,13.8032227 C287.757323,16.9375 277.594239,32.7783212 276.334961,34.2866211 C275.075683,35.794921 273.828126,40.4887704 274.563965,41.9165039 C275.299804,43.3442374 277.288575,42.8759775 278.018555,41.46875 C278.748534,40.0615225 285.933594,29.9389648 285.933594,29.9389648 L294.055176,15.8295898 L296.44873,10.6884766 C296.44873,10.6884766 299.109864,4.81738276 299.981934,7.29785156 C300.854003,9.77832036 299.426271,17.2861337 297.9375,20.1796875 C296.448729,23.0732413 291.581056,32.9277353 289.679199,35.1206055 C287.777343,37.3134757 281.824708,45.4990243 280.865234,46.7519531 C279.905761,48.0048819 278.728028,49.5986337 278.728027,50.6220703 C278.728026,51.6455069 280.56006,51.6513681 281.720215,50.7353516 C282.88037,49.819335 291.205566,40.8457031 291.205566,40.8457031 L296.608887,34.3461914 L300.784668,26.7363281 L303.221191,20.6357422 C303.221191,20.6357422 303.578614,18.2573242 304.171387,18.2573242 C304.764159,18.2573243 305.113282,19.0112314 305.113281,21.9477539 C305.11328,24.8842764 302.84131,32.4570322 301.411621,34.1259766 C299.981933,35.794921 297.392579,41.8842782 296.040527,43.3178711 C294.688476,44.7514639 288.109376,51.692872 286.063477,53.6816406 C284.017577,55.6704093 283.93213,59.5961923 283.932129,59.5961914 C283.932128,59.5961905 285.488282,61.0424814 286.993652,58.9794922 C288.499022,56.916503 298.7417,47.751954 298.741699,47.2519531 C298.741698,46.7519522 302.92334,40.746582 302.92334,40.746582 C302.92334,40.746582 305.478028,39.9956064 304.824707,41.6567383 C304.171386,43.3178702 298.670411,53.1108407 297.639648,54.6259766 C296.608886,56.1411124 284.765138,67.5688486 283.242676,69.0463867 C281.720214,70.5239249 268.309082,81.5126953 268.309082,81.5126953 L241.532715,99.8408203 L210.078125,125.723145 L177.450684,154.974121 L110.410156,210.320801 L59.0761719,247.373047 C59.0761719,247.373047 44.0395509,250.319337 40.8232422,251.26709 C37.6069335,252.214843 24.9453117,248.379395 21.2236328,249.341797 C17.501954,250.304198 5.45263672,243.099122 3.66455078,235.727539 C1.87646484,228.355956 3.94970703,174.265625 3.94970703,174.265625 L5.71142568,155.698241 L33.8896488,153.967773 Z\" id=\"right-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-34)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-3-hairs\" class=\"hairs\" transform=\"translate(151.000000, 140.000000)\">\n                        <mask id=\"mask-36\" sketch:name=\"hairs\" fill=\"white\">\n                            <use xlink:href=\"#path-35\"></use>\n                        </mask>\n                        <use fill=\"#333333\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-35\"></use>\n                        <path d=\"M141.484375,469.847662 C141.484375,469.847662 90.234375,465.167975 90.234375,428.019537 C90.234375,390.8711 68.4375,295.324225 99.9726562,241.050787 C131.507812,186.77735 201.550776,184.847662 217.953125,157.628912 C234.355474,130.410162 239.738281,94.6054672 233.808594,74.8554672 C227.878906,55.1054672 225.446753,42.0970093 205.335938,21.1132816 C193.726562,9.00000043 164.383534,10.9200279 148.410156,9.00000042 C120.509087,5.64624382 95.0910147,17.4149478 85.875,27.5625 C71.3828119,43.5195313 41.3476568,90.5781203 36.1601562,117.749997 C30.9726557,144.921873 50.0507812,214.578131 45.8632812,241.050781 C41.6757812,267.523431 33.3007813,398.425772 20.484375,411.894531 C7.66796875,425.36329 -16.7109375,447.394531 -16.7109375,447.394531 L49.2617188,477.054688 L99.9726562,479.054688 L141.484375,469.847662 Z\" id=\"hairs-shadow\" fill-opacity=\"0.12\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-36)\"></path>\n                        <path d=\"M284.140625,104.669922 C284.140625,104.669922 277.453125,126.976562 277.453125,130.722656 C277.453125,134.46875 276.410156,150.123047 278.603516,153.613281 C280.796875,157.103516 287.128906,164.107422 292.863281,168.595703 C298.597657,173.083984 300.984375,179.494141 304.251953,185.425781 C307.519532,191.357422 306.671875,197.044922 306.671875,197.044922 C306.671875,197.044922 312.753908,185.798828 312.753906,176.003906 C312.753905,166.208984 314.650392,129.535156 314.650391,119.962891 C314.650389,110.390625 310.829963,92.8730469 303.378906,89.7792969 C295.927849,86.6855469 284.140625,104.669922 284.140625,104.669922 Z\" id=\"hairs-shadow-2\" fill-opacity=\"0.12\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-36)\"></path>\n                    </g>\n                </g>\n                <g id=\"mobile-shape-4\" class=\"mobile-shape\">\n                    <rect  class='rectbg' id=\"bg-4\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M232.203125,415.902344 L437.339844,420.488281 L457.582031,374.425781 L432.457031,285.535156 L238.484375,256.222656 L220.339844,348.160156 L232.203125,415.902344 Z\" id=\"mobile-shape-4-hairs-back\" class=\"hairs-back\" fill=\"#222222\" sketch:type=\"MSShapeGroup\"></path>\n                    <g id=\"mobile-shape-4-t-shirt\" class=\"t-shirt\" transform=\"translate(129.000000, 402.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M126.296875,10.5195312 C126.296875,10.5195312 91.0507812,23.03125 76.4882812,32.8515625 C61.9257812,42.671875 58.6015625,45.0664062 53.8085937,54.9296875 C49.015625,64.7929688 16.125,210.816406 11.5859375,224.984375 C7.046875,239.152344 0.46484375,247.082031 0.46484375,247.082031 C0.46484375,247.082031 13.3320313,256.457031 31.3828125,264.484375 C49.4335937,272.511719 71.71875,277.488281 77.953125,277.488281 C84.1875,277.488281 104.285156,280.980469 104.285156,280.980469 C104.285156,280.980469 91.7695312,409.628906 87.5820312,437.960938 C83.3945312,466.292969 80.2539062,507.027344 80.2539062,507.027344 C80.2539062,507.027344 72.8320313,516.40625 92.375,526.523438 C111.917969,536.640625 204.484375,559.320312 280.160156,542.921875 C355.835938,526.523438 367.09375,528.011719 367.09375,517.519531 C367.09375,507.027344 356.765625,462.199219 356.765625,434.5625 C356.765625,406.925781 344.25,280.441406 344.25,280.441406 C344.25,280.441406 357.554687,277.648438 372.375,271.066406 C387.195312,264.484375 399.6875,261.996094 410.015625,257.203125 C420.34375,252.410156 423.396729,250.692139 423.396729,250.692139 C423.396729,250.692139 427.589085,246.272983 426.736572,243.740723 C421.595951,228.47127 404.092979,174.295699 398.105469,161.804688 C391.125,147.242188 373.421875,71.4726562 373.421875,61.1445312 C373.421875,50.8164062 363.09375,39.046875 356.464844,33.859375 C349.835938,28.671875 313.765625,0.28515625 290.855469,0.28515625 C267.945312,0.28515625 126.296875,10.5195312 126.296875,10.5195312 Z\" fill=\"#999999\"></path>\n                        <path d=\"M108.117188,14.0097656 C108.117188,14.0097656 86.0742187,34.8984375 78.5722656,39.9355469 C71.0703125,44.9726562 65.2421875,63.5839844 61.078125,77.0761719 C56.9140625,90.5683594 41.3378906,166.419922 37.5,180.703125 C33.6621094,194.986328 24.0429687,224.242188 20.5761719,230.626953 C17.109375,237.011719 12.1210938,242.072266 12.1210938,242.072266 C12.1210938,242.072266 34.8554688,250.851562 43.90625,255.039062 C52.9570313,259.226562 71.3769531,264.832031 74.9746094,268.625 C78.5722656,272.417969 63.0859375,247.330078 63.0859375,238.978516 C63.0859375,230.626953 74.4609375,173.931641 78.5722656,156.285156 C82.6835938,138.638672 90.2158203,109.105469 90.2158203,109.105469 C90.2158203,109.105469 90.8535156,122.640625 88.5605469,151.671875 C86.2675781,180.703125 84.8730469,240.667969 84.8730469,247.853516 C84.8730469,255.039062 85.4667969,268.417969 85.4667969,268.417969 C85.4667969,268.417969 85.9628906,271.713867 87.2617188,274.03418 C88.5605469,276.354492 90.2158203,283.210938 90.2158203,283.210938 L98.9072266,352.100586 C98.9072266,352.100586 97.8603516,384.415039 97.8603516,391.084961 C97.8603516,397.754883 88.0820313,475.762695 88.0820313,482.741211 C88.0820313,489.719727 85.8886719,507.831055 85.8886719,507.831055 C85.8886719,507.831055 83.25,509.126953 84.5693359,511.185547 C85.8886719,513.244141 85.8652344,516.873047 95.7001953,521.833984 C105.535156,526.794922 159.959961,539.782227 168.648438,541.614258 C177.336914,543.446289 278.444336,547.083984 294.80957,543.356445 C311.174805,539.628906 322.759766,539.328125 322.759766,539.328125 C322.759766,539.328125 208.875,516.296875 206.78125,498.5 C204.6875,480.703125 159.707031,360 177.875,305.773438 C196.042969,251.546875 178.875,235.923828 207.488281,238.998047 C236.101562,242.072266 269.787109,231.914062 269.787109,231.914062 L178.328125,206.441406 L195.423828,109.105469 L223.367188,101.662109 C223.367188,101.662109 238.022461,93.2119141 240.977539,89.2978516 C243.932617,85.3837891 246.950195,80.0966797 246.950195,80.0966797 C246.950195,80.0966797 232.672852,91.9150391 217.40625,89.8847656 C202.139648,87.8544922 146.15332,46.0830078 141.704102,36.9228516 C137.254883,27.7626953 126.762695,8.40722656 126.762695,8.40722656 L108.117188,14.0097656 Z\" id=\"t-shirt-shadow\" fill-opacity=\"0.0899999961\" fill=\"#000000\"></path>\n                        <path d=\"M29.3828125,254.978516 C29.3828125,254.978516 22.7060547,252.535156 17.390625,250.279297 C12.0751953,248.023438 7.609375,246.27832 7.609375,246.27832 C7.609375,246.27832 5.50390625,247.150391 11.4472656,251.064453 C17.390625,254.978516 21.1601565,258.257812 25.2714844,259.991211 C29.3828122,261.724609 30.0551758,262.277832 30.0551758,262.277832 L30.6035156,255.141846 L29.3828125,254.978516 Z\" id=\"t-shirt-shadow-2\" fill-opacity=\"0.22\" fill=\"#000000\"></path>\n                        <path d=\"M81.0983887,272.578613 L86.5273438,273.709717 C86.5273438,273.709717 86.9865723,276.261475 85.567627,276.757324 C84.1486816,277.253174 80.3190918,276.863525 80.3190918,276.863525 L81.0983887,272.578613 Z\" id=\"t-shirt-shadow-3\" fill-opacity=\"0.22\" fill=\"#000000\"></path>\n                        <path d=\"M404.260742,250.932617 L424.121094,243.214844 C424.121094,243.214844 421.848389,249.559326 417.913818,251.590576 C413.979248,253.621826 406.120605,256.430664 406.120605,256.430664 L404.260742,250.932617 Z\" id=\"t-shirt-shadow-4\" fill-opacity=\"0.22\" fill=\"#000000\"></path>\n                        <path d=\"M343.769775,276.602295 L340.907227,278.194092 C340.907227,278.194092 341.374023,278.788818 342.667969,279.238037 C343.961914,279.687256 345.327148,279.621826 345.327148,279.621826 L343.769775,276.602295 Z\" id=\"t-shirt-shadow-5\" fill-opacity=\"0.22\" fill=\"#000000\"></path>\n                        <path d=\"M308.500001,226.039062 C313.629394,224.330078 320.712891,220.794922 320.712891,220.794922 C320.712891,220.794922 324.320312,216.865722 323.697754,212.803222 C323.075195,208.740722 324.254393,208.943847 325.775391,214.553222 C327.296389,220.162597 329.832031,233.242188 329.832031,239.976563 C329.832031,246.710938 334.541016,273.765625 336.763672,273.765625 C338.986328,273.765625 371.472656,259.355469 371.472656,259.355469 C371.472656,259.355469 411.207031,240.511719 413.951172,240.511719 C416.695313,240.511719 375.265625,258.435547 361.830078,236.474609 C348.394531,214.513672 329.230469,167.410156 325.775391,154.743164 C322.320312,142.076172 316.708496,121.402832 313.629395,115.500001 C310.550293,109.597169 302.637207,101.556746 302.637207,110.189941 C302.637207,112.910156 305.855469,126.146484 305.855469,134.137695 C305.855469,148.778983 305.335938,178.617188 308.5,190.412109 C311.664062,202.20703 313.191895,221.807617 307.402344,224.483398 C301.612793,227.159179 303.370607,227.748047 308.500001,226.039062 Z\" id=\"t-shirt-shadow-6\" fill-opacity=\"0.0899999961\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-head\" class=\"head\" transform=\"translate(232.000000, 220.000000)\" sketch:type=\"MSShapeGroup\">\n                        <ellipse fill=\"#DADADA\" cx=\"109\" cy=\"99\" rx=\"109\" ry=\"99\"></ellipse>\n                        <path d=\"M122.15625,97.5585938 C122.15625,97.5585938 92.1445312,129.710938 102.660156,152.296875 C113.175781,174.882812 166.845704,174.990234 176.894531,172.396484 C186.943359,169.802734 192.550781,165.091797 192.550781,165.091797 C192.550781,165.091797 183.650391,181.470703 173.904297,187.378906 C164.158202,193.287109 103.091797,212.828125 103.091797,212.828125 L28.7871094,185.958984 L3.81445312,142.583984 L34.8710938,86.9257812 L122.15625,97.5585938 Z\" id=\"head-shadow\" fill-opacity=\"0.06\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-neck\" class=\"neck\" transform=\"translate(272.000000, 390.000000)\">\n                        <mask id=\"mask-38\" sketch:name=\"neck\" fill=\"white\">\n                            <use xlink:href=\"#path-37\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-37\"></use>\n                        <path d=\"M114.085109,2.96089999 C118.768439,3.35843671 125.567871,3.8359375 131.633789,2.96090007 C137.699707,2.08586264 140.316406,5.1875 140.316406,5.1875 C140.316406,5.1875 131.986328,18.6210938 120.669922,24.6816406 C109.353516,30.7421875 102.572266,50.609375 102.572266,55.796875 C102.572266,60.984375 98.5371094,76.4902344 113.494141,72.5234375 C128.451172,68.5566406 118.181641,83.3867188 118.181641,83.3867188 L83.9257812,106.173828 L33.8984375,98.671875 L12.7871094,55.0996094 L-10.2207031,34.1621094 L-5.50976562,15.1679688 L45.4140625,0.3359375 L97.6049805,1.56201172 L114.085109,2.96089999 Z\" id=\"neck-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-38)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-mobile\" class=\"mobile\" transform=\"translate(289.000000, 497.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M3.0011061,0 C1.34364097,0 0.08711721,1.35031676 0.193789974,3.00374459 L7.80621003,120.996255 C7.91323727,122.655178 9.34316503,124 11.0033731,124 L103.996627,124 C105.655344,124 107.128653,122.670581 107.289207,121.011525 L118.710793,2.9884746 C118.870518,1.33798565 117.663574,0 115.998894,0 L3.0011061,0 Z\" fill=\"#D0011B\" class=\"highlight\"></path>\n                        <path d=\"M2.95881693,3.73273111 C1.30475185,3.69750319 0.05274225,4.99973861 0.163515556,6.65843055 L7.80035162,121.010515 C7.91061437,122.661562 9.34316503,124 11.0033731,124 L103.996627,124 C105.655344,124 107.087659,122.655755 107.19581,120.99726 L114.49169,9.11504455 C114.599833,7.45667715 113.339373,6.08359264 111.69255,6.04851895 L2.95881693,3.73273111 Z\" id=\"mobile-shadow\" fill-opacity=\"0.16\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-right-arm\" class=\"right-arm\" transform=\"translate(169.000000, 549.000000)\">\n                        <mask id=\"mask-40\" sketch:name=\"right-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-39\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-39\"></use>\n                        <path d=\"M16.7929688,102.396484 C16.7929688,102.396484 8.48828125,191.890625 8.48828125,196.03125 C8.48828125,200.171875 11.0351562,210.736328 15.1992188,214.677734 C19.3632812,218.619141 28.4375,228.740234 32.9257812,228.740234 C37.4140625,228.740234 64.7148438,225.447266 64.7148438,225.447266 C64.7148438,225.447266 74.3789062,217.248047 76.7988281,210.664063 C79.21875,204.080078 107.810059,159.03125 112.171387,143.154297 C116.532715,127.277344 131.904297,108.761719 140.162109,99.3867188 C148.419922,90.0117188 172.591797,82.7363281 176.15625,80.4677734 C179.720703,78.1992188 191.210938,67.1708984 194.883789,59.8798828 C198.556641,52.5888672 205.75,38.5898438 207.408203,34.5771484 C209.066406,30.5644531 209.778076,29.0830078 209.778076,29.0830078 C209.778076,29.0830078 208.955566,27.855957 208.181885,28.4694824 C207.408203,29.0830078 201.288818,33.9597168 201.288818,33.9597168 C201.288818,33.9597168 208.278076,25.2795409 209.028076,24.0581055 C209.778076,22.8366701 208.096191,19.5087891 208.096191,19.5087891 C208.096191,19.5087891 206.722412,17.2683105 204.272461,18.5273438 C201.82251,19.786377 193.431641,25.5949707 193.431641,25.5949707 C193.431641,25.5949707 205.364502,14.3005372 205.623291,13.6491699 C205.88208,12.9978026 204.616943,8.92236328 203.48584,8.26806641 C202.354736,7.61376953 199.516602,8.98754883 199.516602,8.98754883 L189.381104,15.5095215 C189.381104,15.5095215 199.479004,6.43115241 199.479004,5.82617188 C199.479004,5.22119134 198.088867,3.01855469 196.714844,2.62890625 C195.34082,2.23925781 190.192627,1.37988281 190.192627,1.37988281 L170.789551,12.7553711 L146.033691,30.4553223 C146.033691,30.4553223 144.098389,32.4904785 138.689697,33.2250977 C133.281006,33.9597168 127.388184,31.7832031 126.527344,28.4243164 C125.666504,25.0654297 123.73584,13.9111328 123.136719,12.5703125 C122.537598,11.2294922 121.354492,6.54931641 116.922852,7.40869141 C112.491211,8.26806641 111.63623,11.1918945 111.63623,11.1918945 L112.171387,39.0351562 L114.572266,67.5561523 C114.572266,67.5561523 87.6240234,109.711914 84.0039062,114.422852 C80.3837891,119.133789 68.5507812,132.181641 64.0200195,135.060547 C59.4892578,137.939453 53.5541992,140.546875 49.3608398,143.154297 C45.1674805,145.761719 39.0668945,150.553223 39.0668945,150.553223 C39.0668945,150.553223 45.5229492,142.588379 46.5258789,140.418945 C47.5288086,138.249512 48.3837891,115.567383 48.3837891,115.567383 L16.7929688,102.396484 Z\" id=\"right-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-40)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-left-arm\" class=\"left-arm\" transform=\"translate(317.000000, 551.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M234.137695,97.8144556 C234.137695,97.8144556 239.25,112.982422 243.9375,123.183594 C248.625,133.384766 257.529297,169.365229 254.935547,177.320307 C252.341797,185.275386 239.342773,205.458003 234.137695,207.591792 C229.045021,209.679502 209.093706,218.340125 195.947266,215.560547 C181.527344,212.511714 168.25,216.5625 151.769531,194.369141 C135.289062,172.175781 70.9375,94.6210963 61.0273438,85.8808619 C51.1171875,77.1406275 44.328498,78.7424035 29.9941406,67.7587916 C24.5380859,63.5781237 6.31152344,26.4755859 3.95605469,22.1376953 C1.60058594,17.7998047 0.0302734375,15.8916016 0.0302734375,13.8095703 C0.0302734375,11.7275391 3.12402344,10.5068359 3.12402344,10.5068359 L6.28222656,11.0302734 C6.28222656,11.0302734 3.71191406,5.91796875 4.99707031,5.91796875 C6.28222656,5.91796875 8.70117187,1.55664062 10.7714844,3.73730469 C12.8417969,5.91796875 14.2900391,6.66796875 14.2900391,6.66796875 L18.0644531,10.1982422 L15.0576172,3.21386719 C15.0576172,3.21386719 17.3896484,-0.676757803 19.2216797,0.370117187 C21.0537109,1.41699218 28.8066406,7.09863315 32.0224609,9.85546875 C35.2382812,12.6123043 48.6728516,8.18652344 48.6728516,8.18652344 C48.6728516,8.18652344 58.921875,28.6035156 68.84375,39.0253893 C78.765625,49.447263 86.9296875,53.4560547 86.9296875,53.4560547 C86.9296875,53.4560547 87.171875,58.7451147 91.4707031,63.578125 C95.7695312,68.4111353 144.478516,105.276372 160.245117,118.972656 C176.011719,132.66894 180.325195,136.055664 180.325195,136.055664 L173.707031,123.592773 L234.137695,97.8144556 Z\" fill=\"#DADADA\"></path>\n                        <path d=\"M87.3281258,59.3413086 C87.3281258,59.3413086 90.9980457,49.8525391 90.9980457,42.2978516 C90.9980457,34.7431641 91.6220692,30.3144531 90.9980457,26.1220703 C90.6969275,24.0990651 89.5091805,17.6299091 89.9213856,14.1201172 C90.3252526,10.6813202 90.9980457,7.3125 90.9980457,7.3125 C90.9980457,7.3125 90.4335945,5.046875 87.3281258,5.046875 C84.222657,5.046875 81.7685547,5.87597656 81.7685547,5.87597656 L80.1562508,26.1220703 C80.1562508,26.1220703 76.5410156,33.4267578 69.7597656,33.4267578 C62.9785156,33.4267578 57.2558594,33.4501953 57.2558594,33.4501953 C57.2558594,33.4501953 51.9335938,45.1123047 65.0195313,52.0957031 C78.1054688,59.0791016 87.3281258,59.3413086 87.3281258,59.3413086 Z\" id=\"left-arm-thumb\" fill=\"#DADADA\"></path>\n                        <path d=\"M163.587891,134.298828 C163.587891,134.298828 180.063477,143.522461 186.083008,149.006836 C192.102539,154.491211 196.266602,158.957031 196.266602,158.957031 C196.266602,158.957031 183.574219,141.155273 180.395996,135.649902 C177.217773,130.144531 173.902832,123.535645 173.902832,123.535645 L214.543945,106.005859 C214.543945,106.005859 225.676758,129.766602 227.870117,136.635742 C230.063477,143.504883 239.30957,169.209961 235.733398,179.708008 C232.157227,190.206055 232.732422,200.871094 219.681641,207.990234 C206.630859,215.109375 194.181152,215.21875 194.181152,215.21875 C194.181152,215.21875 180.00961,214.002442 173.902832,212.022949 C168.930345,210.411133 160.943359,204.444824 160.943359,204.444824 C160.943359,204.444824 152.166584,194.899856 148.130859,189.970215 C139.753498,179.737259 123.704102,158.957031 123.704102,158.957031 L87.6318359,115.682617 L62.8588867,87.5185547 C62.8588867,87.5185547 56.5850743,81.923649 51.7792969,79.8037109 C47.6033214,77.9615929 42.0225194,75.6896263 37.4765625,73.1245117 C33.5631551,70.9163213 30.3393555,68.2509766 30.3393555,68.2509766 C30.3393555,68.2509766 25.4047852,62.4638672 22.9243164,58.1865234 C20.4438477,53.9091797 1.51074219,17.4179688 1.51074219,17.4179688 C1.51074219,17.4179688 1.10058594,13.1914062 2.26660156,13.1914062 C3.43261719,13.1914062 5.91894531,12.5869141 6.56738281,13.578125 C7.21582031,14.5693359 14.0644531,24.8579099 15.8466797,26.4282227 C17.6289062,27.9985354 19.2431641,28.8706055 19.2431641,28.8706055 L5.00878906,9.27148438 C5.00878906,9.27148438 7.72705078,5.73242188 9.07373047,5.73242188 C10.4204102,5.73242188 14.0263672,12.0131836 17.1318359,14.6943359 C20.2373047,17.3754883 28.3881836,22.5224609 30.3393555,23.4326172 C32.2905273,24.3427734 33.8491211,24.9912109 33.8491211,24.9912109 C33.8491211,24.9912109 19.0444336,11.5126953 16.6948242,8.62255859 C14.3452148,5.73242188 16.9829102,3.57421875 16.9829102,3.57421875 L18.9716797,2.19580078 C18.9716797,2.19580078 26.4189453,10.3032227 27.6401367,11.0825195 C28.3895548,11.5607567 34.8650945,11.7654576 40.0380869,10.6499023 C43.294587,9.94763844 46.3164072,9.4921875 46.3164072,9.4921875 L48.9421396,8.62255859 C48.9421396,8.62255859 51.7792978,13.578125 52.9421396,16.4394531 C54.1049814,19.3007812 64.35254,33.607666 64.35254,33.607666 C64.35254,33.607666 70.2558571,33.8934008 72.8017588,32.9655762 C74.4340794,32.3706957 77.4575205,30.0036621 77.4575205,30.0036621 C77.4575205,30.0036621 80.2727447,26.1091524 80.2895518,26.0183105 C80.7475773,23.5426853 80.6499021,20.6518294 80.8352061,17.9396973 C81.1019326,14.0358534 81.5371103,10.6499023 81.5371103,10.6499023 L81.8645029,5.89550781 C81.8645029,5.89550781 86.7709961,4.77929688 87.6318359,5.89550781 C88.4926758,7.01171875 88.4052734,9.4921875 88.4052734,9.4921875 C88.4052734,9.4921875 85.6142578,18.559082 86.6230469,22.996582 C87.6318359,27.434082 87.2456055,38.1323242 84.9394531,46.8706055 C82.6333008,55.6088867 79.5146484,60.5786133 82.2270508,63.0151367 C84.9394531,65.4516602 124.38916,99.8994141 131.356445,106.005859 C138.32373,112.112305 163.587891,134.298828 163.587891,134.298828 Z\" id=\"left-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\"></path>\n                    </g>\n                    <g id=\"mobile-shape-4-hairs\" class=\"hairs\" transform=\"translate(189.000000, 124.000000)\">\n                        <mask id=\"mask-42\" sketch:name=\"hairs-2\" fill=\"white\">\n                            <use xlink:href=\"#path-41\"></use>\n                        </mask>\n                        <use id=\"hairs-2\" fill=\"#333333\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-41\"></use>\n                        <path d=\"M101.664063,336.667969 C101.664063,336.667969 76.5605469,318.345703 69.9316406,300.921875 C63.3027344,283.498047 65.9667969,210.21875 70.0371094,204.53125 C74.1074219,198.84375 82.9824219,171.474609 82.9824219,171.474609 C82.9824219,171.474609 82.6851939,208.630371 83.2353516,215.92627 C83.7855093,223.222168 83.7529297,227.26709 83.7529297,227.26709 L129.373047,231.797363 L172.84082,230.575684 L188.171387,228.574707 C188.171387,228.574707 189.729984,210.795898 188.950684,200.693848 C188.171383,190.591797 187.223633,185.418457 187.223633,185.418457 C187.223633,185.418457 194.283687,212.813965 195.287109,220.040527 C196.290531,227.26709 196.869141,229.39502 196.869141,229.39502 L211.039551,225.993164 C211.039551,225.993164 217.209957,210.509277 217.209961,197.963867 C217.209965,185.418457 211.987305,160.933594 211.987305,160.933594 C211.987305,160.933594 222.579098,197.502441 223.788086,214.039063 C224.997074,230.575684 228.922852,247.735352 228.922852,247.735352 L231.882813,267.084961 L228.568359,290.191406 L205.385742,337.014648 L208.089844,339.259766 L229.847656,339.248047 C229.847656,339.248047 275.264644,325.964844 283.27832,319.445312 C291.291996,312.925781 291.629883,307.988281 291.629883,307.988281 C291.629883,307.988281 285.530269,162.512695 278.365234,147.681641 C271.200199,132.850586 254.96484,92.40625 237.785156,84.8242188 C220.605473,77.2421875 204.97266,55.8046875 179.673828,66.4472656 C154.374996,77.0898438 139.435547,81.2304688 134.404297,77.0664062 C129.373047,72.9023437 97.9843748,54.6289062 75.8964844,59.2929688 C53.8085939,63.9570313 39.2792967,63.7617184 30.2539063,82.3828125 C21.2285158,101.003907 9.11914063,156.683109 9.11914063,171.050781 C9.11914063,185.418454 3.78125,272.910167 11.2363281,308.419922 C18.6914063,343.929676 75.046875,338.195312 75.046875,338.195312 L101.664063,336.667969 Z\" id=\"hairs-shadow\" fill-opacity=\"0.12\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-42)\"></path>\n                    </g>\n                </g>\n                <g id=\"mobile-shape-5\" class=\"mobile-shape\">\n                    <rect  class='rectbg' id=\"bg-5\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <g id=\"mobile-shape-5-right-arm\" class=\"right-arm\" transform=\"translate(129.000000, 659.000000)\">\n                        <mask id=\"mask-44\" sketch:name=\"right-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-43\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-43\"></use>\n                        <path d=\"M76.5351562,8.40625 C76.5351562,8.40625 48.6992188,64.4589844 44.9550781,71.0996094 C41.2109375,77.7402344 33.90625,89.5371094 33.90625,95.1191406 C33.90625,100.701172 72.0703125,162.070312 88.4472656,186.798828 C104.824219,211.527344 179.232422,285.458984 179.232422,285.458984 L161.65625,285.458984 L69.7890625,202.455078 L8.91992187,133.757812 L-2.67578125,114.554688 L-3.54882812,96.4804688 L11.6074219,70.5527344 L43.6640625,-10.0078125 L76.5351562,8.40625 Z\" id=\"right-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-44)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-5-t-shirt\" class=\"t-shirt\" transform=\"translate(159.000000, 377.000000)\">\n                        <mask id=\"mask-46\" sketch:name=\"t-shirt\" fill=\"white\">\n                            <use xlink:href=\"#path-45\"></use>\n                        </mask>\n                        <use fill=\"#999999\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-45\"></use>\n                        <path d=\"M93.78125,36.5019531 L119.287109,26.6035156 C119.287109,26.6035156 125.244141,35.9003906 128.837891,38.7949219 C132.431641,41.6894531 143.75,52.9609375 152.472656,59.21875 C161.195312,65.4765625 183.054688,75.3398438 189.542969,78.4335938 C196.03125,81.5273438 205.603516,79.65625 208.150391,79.65625 C210.697266,79.65625 189.542969,126.621094 189.542969,178.566406 C189.542969,230.511719 196.626953,344.230469 196.626953,344.230469 C196.626953,344.230469 208.150391,423.417969 212.59375,453.449219 C217.037109,483.480469 217.390625,500.792969 221.578125,516.097656 C225.765625,531.402344 230.150391,545.505859 240.966797,549.042969 C251.783203,552.580078 262.361328,554.359375 295.394531,557.324219 C328.427734,560.289063 351.433594,557.324219 351.433594,557.324219 L311.443359,564.222656 L274.419922,567.863281 L240.966797,566.792969 L196.626953,562.257812 L174.863281,557.324219 L134.130859,541.320312 L120.695312,532.992188 C120.695312,532.992188 129.150391,527.876953 129.150391,525.107422 C129.150391,522.337891 142.189453,492.828125 142.189453,488.537109 C142.189453,484.246094 154.505859,419.117188 149.470703,398.449219 C144.435547,377.78125 135.433594,237.332031 135.433594,237.332031 C135.433594,237.332031 135.433594,202.660156 129.150391,205.929688 C120.695312,205.929688 88.546875,272.170898 86.3261719,281.035156 C84.1054688,289.899414 101.628906,314.015625 101.628906,314.015625 L75.9589844,315.259766 L21.21875,291.601562 L-0.54296875,277.015625 C-0.54296875,277.015625 5.0390625,270.386719 7.6328125,265.919922 C10.2265625,261.453125 21.1738281,189.988281 23.9648437,178.566406 C26.7558594,167.144531 44.3320312,69.2050781 44.3320312,69.2050781 L69.5605469,48.1171875 L93.78125,36.5019531 Z\" id=\"t-shirt-shadow\" fill-opacity=\"0.0899999961\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-46)\"></path>\n                        <path d=\"M285.845703,67.9628906 C285.845703,67.9628906 322.890625,186.757812 327.380859,196.109375 C331.871094,205.460938 336.615234,222.1875 336.615234,222.1875 L343.373047,208.253906 C343.373047,208.253906 323.484375,151.060547 314.609375,130.019531 C305.734375,108.978516 285.845703,67.9628906 285.845703,67.9628906 Z\" id=\"t-shirt-shadow-2\" fill-opacity=\"0.0899999961\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-46)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-5-head\" class=\"head\" transform=\"translate(167.000000, 87.000000)\">\n                        <mask id=\"mask-48\" sketch:name=\"head\" fill=\"white\">\n                            <use xlink:href=\"#path-47\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-47\"></use>\n                        <path d=\"M137.277344,20.6191406 C137.277344,20.6191406 93.4121094,27.5527344 87.0507812,30.3203125 C80.6894531,33.0878906 67.8828125,75.1816406 80.921875,110.054688 C93.9609375,144.927734 129.472656,202.560547 119.632813,187.044922 C119.632813,187.044922 125.486324,213.574219 162.113281,220.158203 C198.740238,226.742187 218.640625,221.927734 218.640625,221.927734 L199.867188,244.212891 L180.222656,246.830078 L129.472656,251.517578 L60.7988281,251.167969 L6.08398438,191.195312 L6.43359375,119.183594 L42.8515625,18.5800781 L96.0664062,0.78515625 L137.277344,20.6191406 Z\" id=\"head-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-48)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-5-neck\" class=\"neck\" transform=\"translate(283.000000, 306.000000)\">\n                        <mask id=\"mask-50\" sketch:name=\"neck\" fill=\"white\">\n                            <use xlink:href=\"#path-49\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-49\"></use>\n                        <path d=\"M73.1845703,4.2890625 C67.239502,3.93432615 56.0710449,2.75952148 56.0710449,2.75952148 L0.107421875,20.8691406 L14.0419922,73.5898438 L18.328125,77.8007812 C18.328125,77.8007812 21.2070312,86.4365234 19.1367188,89.0302734 C17.0664062,91.6240234 0.0498046875,97.1494141 0.0498046875,97.1494141 L13.921875,115.499023 L32.9921875,130.055664 L49.9042969,139.564453 L66.9394531,147.677734 L81.4091797,147.427734 L95.1748047,145.329102 C95.1748047,145.329102 72.1679688,135.605469 67.5556641,127.492188 C62.9433594,119.378906 47.4140625,97.5058594 44.8964844,74.2246094 C42.3789062,50.9433594 45.0947266,31.9765625 51.0556641,28.1386719 C57.0166016,24.3007812 71.1425781,21.9804687 71.1425781,21.9804687 C71.1425781,21.9804687 79.1296387,4.64379885 73.1845703,4.2890625 Z\" id=\"neck-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-50)\"></path>\n                    </g>\n                    <g id=\"mobile-shape-5-mobile\" class=\"mobile\" transform=\"translate(536.000000, 175.000000)\" sketch:type=\"MSShapeGroup\">\n                        <path d=\"M24.953334,48.2045941 C23.6363663,49.2094181 22.5811737,51.3729665 22.5964421,53.0312335 L23.838029,187.877524 C23.8533212,189.53838 24.9298558,190.07285 26.2502989,189.065374 L82.7904476,145.926201 C84.1074153,144.921377 85.162608,142.757829 85.1473396,141.099562 L83.9057527,6.25327089 C83.8904605,4.59241554 82.8139258,4.05794539 81.4934828,5.065421 L24.953334,48.2045941 Z\" fill=\"#D0011B\" transform=\"translate(54.051191, 97.375004) rotate(15.000000) translate(-54.051191, -97.375004) \" class=\"highlight\"></path>\n                        <path d=\"M29.5945755,50.7049778 C28.2787503,51.704769 27.2120632,53.8497879 27.2120632,55.5055521 L27.2120633,186.591114 C27.2120633,188.242607 28.2666501,188.753802 29.5712643,187.729985 L82.0835945,146.520089 C83.3865452,145.497578 84.4207219,143.320973 84.3936276,141.666741 L82.297677,13.6993618 C82.2705223,12.0414433 81.1738127,11.5140112 79.8659967,12.5077167 L29.5945755,50.7049778 Z\" id=\"mobile-shadow\" fill-opacity=\"0.16\" fill=\"#000000\" transform=\"translate(55.818958, 100.436866) rotate(15.000000) translate(-55.818958, -100.436866) \"></path>\n                    </g>\n                    <g id=\"mobile-shape-5-left-arm\" class=\"left-arm\" transform=\"translate(495.000000, 232.000000)\">\n                        <mask id=\"mask-52\" sketch:name=\"left-arm\" fill=\"white\">\n                            <use xlink:href=\"#path-51\"></use>\n                        </mask>\n                        <use fill=\"#DADADA\" sketch:type=\"MSShapeGroup\" xlink:href=\"#path-51\"></use>\n                        <path d=\"M16.0732422,460.12793 C16.0732422,460.12793 65.9384766,295.486328 67.6953125,289.763672 C69.4521484,284.041016 97.8017578,183.72168 99.5341797,180.167969 C101.266602,176.614258 111.598633,133.611328 113.592773,121.148438 C115.586914,108.685547 118.867188,79.3388672 118.867188,69.9521484 C118.867188,60.5654297 96.3876953,27.0390625 87.9375,15.7333984 C79.4873047,4.42773438 76.2763672,5.3359375 76.2763672,5.3359375 C76.2763672,5.3359375 71.1743164,6.95117191 69.953125,9.03320312 C68.7319336,11.1152343 67.6728516,14.2172847 67.0683594,15.5581055 C66.4638672,16.8989262 65.8530273,19.1611328 65.8530273,19.1611328 C65.8530273,19.1611328 68.8251953,24.0092769 70.1220703,25.2563477 C71.4189453,26.5034184 79.5693359,33.3022456 81.0844727,34.6108398 C82.5996094,35.919434 84.2949219,37.097168 84.2949219,37.097168 C84.2949219,37.097168 68.574707,25.4887691 67.2138672,25.4887695 C65.8530273,25.48877 64.9140625,27.0332027 63.9106445,29.4462891 C62.9072266,31.8593754 61.6860352,35.1689453 61.6860352,35.1689453 C61.6860352,35.1689453 63.5180664,38.1401363 67.3388672,40.3969727 C71.159668,42.653809 76.5620117,46.7602535 77.7719727,47.6088867 C78.9819336,48.45752 80.2641602,49.6411133 80.2641602,49.6411133 C80.2641602,49.6411133 63.4213867,38.8959956 62.2119141,39.6464844 C61.0024414,40.3969731 59.0712891,43.9614253 58.4287109,45.2207031 C57.7861328,46.4799809 57.1123047,48.8657222 57.1123047,50.0375977 C57.1123047,51.2094731 58.5458984,52.2939453 58.5458984,52.2939453 C58.5458984,52.2939453 64.3623047,57.7465816 65.8505859,59.5668945 C67.3388672,61.3872075 72.8759766,67.8920898 72.8759766,67.8920898 C72.8759766,67.8920898 61.0458984,56.2514644 59.7958984,55.7280273 C58.5458984,55.2045903 56.9780273,57.6733398 56.9780273,57.6733398 L55.1577148,60.6918945 L60.7094727,79.043457 L69.5463867,95.7875977 L74.6499023,103.15918 L76.1962891,126.796875 L71.9345703,149.463867 L61.2915039,177.824707 L34.7382812,255.158203 L26.0961914,279.10498 L3.29589844,334.758301 L-4.02636719,364.438477 L3.47607422,390.03125 L16.0732422,460.12793 Z\" id=\"left-arm-shadow\" fill-opacity=\"0.06\" fill=\"#000000\" sketch:type=\"MSShapeGroup\" mask=\"url(#mask-52)\"></path>\n                    </g>\n                    <path d=\"M221.222656,249.123052 C226.808594,240.095708 234.527341,214.277349 234.527341,214.277349 C234.527341,214.277349 238.660156,195.21875 225.378906,189.425781 C212.097656,183.632812 202.660156,185.84375 210.402344,161.394531 C218.144531,136.945312 232.941406,109.125 244.363281,109.125 C255.785157,109.125 288.048831,108.425779 304.470703,108.425779 C320.892575,108.425779 321.035159,102.9375 321.035156,96.75 C324.126953,92.9960953 339.050777,86.6679703 349.613281,92.9960953 C360.175786,99.3242203 370.460933,100.097654 375.601563,108.425779 C378.671875,108.425779 370.496089,87.998048 361.515625,78.2753922 C352.535161,68.5527364 333.384273,45.4531255 310.867187,45.453125 C288.350102,45.4531245 273.199219,38.4765625 241.800781,51.3398437 C210.402344,64.203125 184.546874,81.5390648 174.128906,103.03125 C163.710938,124.523435 157.386719,148.999998 157.386719,189.425787 C157.386719,229.851575 170.929688,253.214844 180.953125,267.101568 C190.976562,280.988292 197.230469,286.558599 197.230469,286.558599 C197.230469,286.558599 202.103528,269.603516 202.103516,263.228521 C202.103511,260.655992 196.956055,258.14649 192.070313,258.14649 C187.18457,258.14649 187.092091,246.486692 186.349609,240.793951 C185.076172,231.030279 187.016486,222.271487 192.070313,222.27149 C201.890626,222.271495 204.249024,224.900396 208.988281,231.030279 C213.727539,237.160162 215.636719,258.150396 221.222656,249.123052 Z\" id=\"mobile-shape-5-hairs\" class=\"hairs\" fill=\"#333333\" sketch:type=\"MSShapeGroup\"></path>\n                </g>\n            </g>\n            <g id=\"no-mobile\" sketch:type=\"MSShapeGroup\">\n                <g id=\"no-mobile-shape-1\" class=\"no-mobile-shape\">\n                    <rect class='rectbg' id=\"bg-1\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M269.328125,414.250001 C333.945441,414.250001 394.65625,352.349295 394.65625,279.999993 C394.65625,246.936072 400.375,216.507812 369.8125,172.210938 C339.25,127.914063 304.415069,127.914063 269.328125,127.914063 C204.710809,127.914063 144,207.650698 144,280 C144,352.349302 204.710809,414.250001 269.328125,414.250001 Z\" id=\"no-mobile-shape-1-head\" class=\"head\" fill=\"#DADADA\"></path>\n                    <path d=\"M109.015625,323.066392 C109.015625,323.066392 265.277338,242.51173 280.85351,195.755863 C296.429682,148.999996 325.82226,86.6269531 325.82226,86.6269531 C325.82226,86.6269531 320.570312,72.734375 289.914062,64.359375 C259.257812,55.984375 215.281247,47.796875 192.624997,64.359375 C169.968747,80.921875 93.7695325,125.648444 114.082032,206.839848 C134.394531,288.031251 109.015625,323.066392 109.015625,323.066392 Z\" id=\"no-mobile-shape-1-hairs-1\" class=\"hairs-1\" fill=\"#333333\"></path>\n                    <path d=\"M282.357422,196.869144 C282.357422,196.869144 313.28125,244.929688 336.734375,256.609375 C360.1875,268.289062 380.929688,266.18359 392.328125,266.18359 C403.726563,266.18359 423.726563,243.128903 423.726563,243.128903 C423.726563,243.128903 413.558594,232.312496 413.558594,205.187496 C413.558594,178.062496 422.054687,139.921875 392.328125,112.195313 C362.601562,84.46875 347.642579,82.3554688 343.8125,82.3554688 C339.982422,82.3554689 336.246094,62.8867204 311.074219,121.089845 C285.902344,179.29297 282.357422,196.869144 282.357422,196.869144 Z\" id=\"no-mobile-shape-1-hairs-2\" class=\"hairs-2\" fill=\"#333333\"></path>\n                    <path d=\"M326.257812,393.835938 C326.257812,393.835938 342.820312,411.476563 334.539062,428.734375 C326.257812,445.992188 308.203125,425.9375 308.203125,425.9375 C308.203125,425.9375 312.390625,453.617188 312.390625,497.726563 C312.390625,541.835938 331.234375,621.109375 331.234375,668.289062 C331.234375,715.46875 315.1875,907.203125 315.1875,907.203125 C315.1875,907.203125 459.234375,949.78125 496.921875,940.007812 C534.609375,930.234375 548.984375,921.257812 548.984375,921.257812 C548.984375,921.257812 513.296875,674.015625 513.296875,595.804688 C513.296875,517.59375 516.5,471.8125 493.148438,454.554688 C469.796875,437.296875 407.078125,417.242188 407.078125,417.242188 C407.078125,417.242188 388.083984,410.209961 383.023438,398.398438 C377.962891,386.586914 365.859375,343.734375 365.859375,343.734375 L326.257812,393.835938 Z\" id=\"no-mobile-shape-1-body\" class=\"body\" fill=\"#DADADA\"></path>\n                    <path d=\"M299.828125,572.130859 C296.553518,571.032879 284.21875,638.852922 284.21875,638.852922 C284.21875,638.852922 279.257324,659.913575 276.576172,663.328127 C273.89502,666.742679 297.734684,714.032392 305.507813,703.816405 C308.905762,699.350583 342.93457,659.611328 342.93457,659.611328 C342.93457,659.611328 310.613089,575.747072 299.828125,572.130859 Z\" id=\"no-mobile-shape-1-right-arm\" class=\"right-arm\" fill=\"#DADADA\"></path>\n                    <path d=\"M310.988281,418.476563 C310.988281,418.476563 358.440001,408.969959 409.578125,418.567383 C414.564106,419.503134 425.630686,423.618406 430.574219,425.072266 C487.050781,441.681641 494.117188,437.13672 501.539063,458.816406 C508.960938,480.496092 562.257813,617.050781 562.257813,617.050781 C562.257813,617.050781 574.492188,624.128908 558.164063,630.964844 C541.835938,637.80078 535.55078,649.29981 501.539061,649.299809 C467.527342,649.299807 490.799803,660.645512 490.799803,660.645512 L518.015625,668.414062 C518.015625,668.414062 535.367188,728.210939 542,760.171875 C548.632813,792.132811 558.402344,897.308595 558.402344,914.824219 C558.402344,932.339842 566.875,935.132814 542.445313,940.667969 C518.015625,946.203124 414.214844,975.808595 351.335938,948.890625 C288.457031,921.972655 292.507813,922.488283 298.484375,907.667969 C304.460938,892.847655 315.234375,836.222658 315.234375,820.40625 C315.234375,804.589842 317.328125,740.82422 317.328125,727.308594 C317.328125,713.792967 322.871094,612.437501 316.929688,597.875 C310.988281,583.312499 287.109375,585.714849 281.574219,578.875004 C276.039062,572.035159 281.574219,540.878908 281.574219,540.878906 C281.574219,540.878905 285.0625,474.816406 289.109375,458.902344 C293.15625,442.988282 295.52832,427.785156 295.52832,427.785156 L301.861328,420.539063 L308.416016,418.567383\" id=\"no-mobile-shape-1-t-shirt\" class=\"t-shirt\" fill=\"#999999\"></path>\n                    <path d=\"M478.641588,650.073241 L499.406246,700.464844 C499.406246,700.464844 493.369137,702.488281 461.662106,689.425781 C429.955074,676.363281 331.792969,666.066406 313.148438,658.041016 C294.503906,650.015625 277.940429,677.391602 296.027345,687.238281 C314.11426,697.08496 390.741205,718.33886 401.361324,724.333984 C411.981444,730.329108 466.33984,742.371094 481.40234,747.121094 C496.46484,751.871094 501.572265,753.688477 509.15625,757.474609 C516.740234,761.260742 531.011719,761.115234 531.011719,761.115234 C531.011719,761.115234 548.087904,762.447259 548.08789,740.027344 C548.087877,717.607429 552.302734,677.472656 548.08789,658.041016 C543.873047,638.609375 543.873047,631.927734 543.873047,631.927734 L478.641588,650.073241 Z\" id=\"no-mobile-shape-1-left-arm\" class=\"left-arm\" fill=\"#DADADA\"></path>\n                    <path d=\"M336.797851,415.062012 C336.797851,415.062012 327.644531,434.294922 327.644531,449.777344 C327.644531,465.259766 325.65625,483.357422 332.238281,486.998047 C338.820313,490.638672 356.142578,486.800781 377.486328,460.525391 C398.830078,434.25 416.306396,427.214355 416.306396,420.456543 C416.306396,419.456543 387.115234,411.042969 387.115234,411.042969 L336.797851,415.062012 Z\" id=\"no-mobile-shape-1-neck\" class=\"neck\" fill=\"#DADADA\"></path>\n                    <path d=\"M279.02832,657.723633 C279.02832,657.723633 253.804687,707.21289 280.310547,709.283203 C306.816406,711.353515 441.433592,706.466797 453.449219,706.466797 C465.464846,706.466797 496.265625,700.582031 496.265625,700.582031 C496.265625,700.582031 486.925779,677.447266 470.1875,673.457031 C453.449221,669.466797 444.619139,665.015625 433.826172,669.236328 C423.033205,673.457031 432.361326,677.564453 382.601563,677.564453 C332.841799,677.564454 279.02832,657.723633 279.02832,657.723633 Z\" id=\"no-mobile-shape-1-right-arm-2\" class=\"right-arm-2\" fill=\"#DADADA\"></path>\n                </g>\n                <g id=\"no-mobile-shape-2\" class=\"no-mobile-shape\">\n                    <rect class='rectbg' id=\"bg-2\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M281.53125,392.265625 C299.08169,400.813993 325.645287,403.992188 346.550781,403.992188 C419.176226,403.992188 473,342.020875 473,270.5 C473,238.95946 462.240641,205.216114 443.210938,182.753906 C419.089159,154.281134 382.097792,134.042969 341.5,134.042969 C268.874555,134.042969 210,198.979125 210,270.5 C210,321.433335 238.111664,371.117062 281.53125,392.265625 Z\" id=\"no-mobile-shape-2-head\" class=\"head\" fill=\"#DADADA\"></path>\n                    <path d=\"M142.265625,720.052734 C142.265625,720.052734 165.777344,780.078125 165.777344,786.914062 C165.777344,793.552272 178.208357,824.992437 173.853516,843.545898 C169.777344,860.912109 165.147461,888.90332 136.277344,937.472656 C128.715894,950.193582 123.15625,951.988281 123.15625,951.988281 C123.15625,951.988281 127.089376,964.992188 137.023438,976.066406 C146.957499,987.140625 164.751953,976.066406 164.751953,976.066406 C164.751953,976.066406 180.673828,954.038086 188.588867,942.168945 C196.503906,930.299805 220.623047,870.677734 229.033203,846.314453 C237.443359,821.951172 235.378906,814.488281 234.070312,809.615234 C232.761719,804.742188 227.893555,794.420898 226.84668,787.814453 C225.799805,781.208008 213.719727,722.186525 210.131348,712.311036 C206.542969,702.435547 202.603027,695.881348 202.603027,695.881348 C202.603027,695.881348 200.060547,697.804688 198.228516,699.188477 C196.396484,700.572266 185.644035,707.835938 181.711914,710.342773 C177.779793,712.849609 166.850586,708.795898 162.958984,710.342773 C159.067383,711.889648 142.265625,720.052734 142.265625,720.052734 Z\" id=\"no-mobile-shape-2-right-arm\" class=\"right-arm\" fill=\"#DADADA\" transform=\"translate(179.000000, 838.500000) scale(-1, 1) translate(-179.000000, -838.500000) \"></path>\n                    <path d=\"M287.416011,457.852539 C287.416011,457.852539 254.361328,474.691406 243.335937,480.425781 C232.310547,486.160156 199.507812,504.957031 199.507812,504.957031 C199.507812,504.957031 195.669922,506.830078 193.099609,513.785156 C190.529297,520.740234 170.939453,604.013672 167.671875,610.375 C164.404297,616.736328 161.306641,639.355469 158.933594,639.355469 C156.560547,639.355469 152.445313,641.298828 155.689453,645.892578 C158.933594,650.486328 158.609375,654.603516 155.166016,654.603516 C151.722656,654.603516 157.669923,659.173828 154.378906,663.640625 C151.08789,668.107422 143.929688,673.183594 143.929688,673.183594 C143.929688,673.183594 135.410156,680.109375 143.929688,686.601562 C152.44922,693.09375 171.386718,711.583984 192.777344,717.515625 C214.167969,723.447266 215.435546,721.273438 219.925781,723.970703 C224.416016,726.667969 230.277343,725.470703 230.277344,725.470703 C230.277344,725.470703 238.708984,708.408203 238.708984,708.408203 C238.708984,708.408203 235.568359,742.779297 235.568359,748.966797 C235.56836,755.154297 224.466796,801.873047 224.466797,812.271484 C224.466797,822.669922 224.292968,848.0625 224.292969,866.091797 C224.292969,884.121094 209.656883,931.564453 206.693359,936.775391 C203.729836,941.986328 194.423828,940.345703 198.041016,946.603516 C201.658204,952.861328 211.763671,959.933594 225.236328,963.027344 C238.708985,966.121094 316.083999,984.589844 364.796875,981.296875 C413.509751,978.003906 477.132827,958.556641 485.658203,954.462891 C494.183579,950.369141 517.238266,940.25 517.238281,940.25 C517.238297,940.25 506.07228,931.677734 502.582031,922.873047 C499.091782,914.068359 478.3535,798.912109 478.353516,781.464844 C478.353531,764.017578 480.271499,755.771484 480.271484,746.466797 C480.27147,737.162109 477.876953,735.242188 477.876953,735.242188 C477.876953,735.242188 481.865249,740.232422 487.576172,740.232422 C493.287095,740.232422 523.917984,731.191406 544.166016,717.630859 C564.414048,704.070312 571.417984,696.779297 573.964844,692.101562 C576.511704,687.423828 573.148452,684.703125 568.833984,680.109375 C564.519516,675.515625 538.332046,596.701172 531.703125,581.068359 C525.074204,565.435547 499.060562,502.228516 493.318359,495.017578 C487.576157,487.806641 488.025405,485.339844 476.650391,481.525391 C465.275376,477.710938 442.047877,464.573242 430.672862,461.356445 C419.297847,458.139648 418.970703,466.892578 418.970703,466.892578 L287.416011,457.852539 Z\" id=\"no-mobile-shape-2-t-shirt\" class=\"t-shirt\" fill=\"#999999\"></path>\n                    <path d=\"M316.097656,392.125 C316.097656,392.125 329.429688,416.046875 319.890625,433.210938 C310.351562,450.375 296.445312,459.355469 290.953125,459.355469 C285.460938,459.355469 287.445312,482.871094 294.328125,492.457031 C301.210938,502.042969 315.692383,516.979494 326.766602,525.260744 C337.840821,533.541994 357.766602,533.70508 361.976563,533.70508 C366.186524,533.70508 371.602539,534.251955 385.78711,529.110354 C399.97168,523.968752 415.413599,505.613795 420.160156,499.902344 C426.347656,492.457031 428.316984,478.13315 426.470947,467.337648 C426.133789,465.365969 425.202149,462.832529 425.202149,462.832529 C425.202149,462.832529 400.831386,460.293034 395.269531,449.632812 C389.175781,437.953125 388.476562,419.484375 388.476562,399.640625 C388.476563,379.796875 316.097656,392.125 316.097656,392.125 Z\" id=\"no-mobile-shape-2-neck\" class=\"neck\" fill=\"#DADADA\"></path>\n                    <path d=\"M511.660156,732.825195 C511.660156,732.825195 530.777344,787.078125 530.777344,793.914062 C530.777344,800.552272 539.208357,833.992437 534.853516,852.545898 C530.777344,869.912109 526.147461,897.90332 497.277344,946.472656 C489.715894,959.193582 484.15625,960.988281 484.15625,960.988281 C484.15625,960.988281 488.089376,973.992188 498.023438,985.066406 C507.957499,996.140625 509.732422,997.59668 509.732422,997.59668 C509.732422,997.59668 541.673828,963.038086 549.588867,951.168945 C557.503906,939.299805 581.623047,879.677734 590.033203,855.314453 C598.443359,830.951172 600.378906,821.488281 599.070312,816.615234 C597.761719,811.742188 592.893555,801.420898 591.84668,794.814453 C590.799805,788.208008 578.719727,729.186525 575.131348,719.311036 C571.542969,709.435547 567.603027,702.881348 567.603027,702.881348 C567.603027,702.881348 565.060547,704.804688 563.228516,706.188477 C561.396484,707.572266 550.644035,714.835938 546.711914,717.342773 C542.779793,719.849609 535.720703,723.461914 531.829102,725.008789 C527.9375,726.555664 511.660156,732.825195 511.660156,732.825195 Z\" id=\"no-mobile-shape-2-left-arm\" class=\"left-arm\" fill=\"#DADADA\"></path>\n                    <g id=\"no-mobile-shape-2-hairs\" class=\"hairs\" transform=\"translate(244.000000, 131.000000)\" stroke=\"#979797\">\n                        <path d=\"M13.5,38.5 L13.5,32.5\" id=\"Line\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M16.5,36.5 L16.5,30.5\" id=\"Line-2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M18.5,37.5 L18.5,31.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M28.5,37.5 L28.5,31.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M31.5,27.5 L31.5,21.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M33.5,37.5 L33.5,31.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M23.5,32.5 L23.5,26.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M25.5,31.5 L25.5,25.5\" id=\"Line-2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M28.5,29.5 L28.5,23.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M30.5,30.5 L30.5,24.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M40.5,30.5 L40.5,24.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M43.5,20.5 L43.5,14.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M45.5,30.5 L45.5,24.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M35.5,25.5 L35.5,19.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M49.5,24.5 L49.5,18.5\" id=\"Line-3\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M52.5,22.5 L52.5,16.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M54.5,23.5 L54.5,17.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M64.5,23.5 L64.5,17.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M67.5,13.5 L67.5,7.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M69.5,23.5 L69.5,17.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M59.5,18.5 L59.5,12.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M113.5,22.5 L113.5,16.5\" id=\"Line-4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M116.5,20.5 L116.5,14.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M118.5,21.5 L118.5,15.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M128.5,21.5 L128.5,15.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M131.5,11.5 L131.5,5.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M133.5,21.5 L133.5,15.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M123.5,16.5 L123.5,10.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M127.5,31.5 L127.5,25.5\" id=\"Line-5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M130.5,29.5 L130.5,23.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M132.5,30.5 L132.5,24.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M142.5,30.5 L142.5,24.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M145.5,20.5 L145.5,14.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M147.5,30.5 L147.5,24.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M137.5,25.5 L137.5,19.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M147.5,41.5 L147.5,35.5\" id=\"Line-6\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M150.5,39.5 L150.5,33.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M152.5,40.5 L152.5,34.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M162.5,40.5 L162.5,34.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M165.5,30.5 L165.5,24.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M167.5,40.5 L167.5,34.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M157.5,35.5 L157.5,29.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M193.5,83.5 L193.5,77.5\" id=\"Line-7\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M196.5,81.5 L196.5,75.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M198.5,82.5 L198.5,76.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M208.5,82.5 L208.5,76.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M211.5,72.5 L211.5,66.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M213.5,82.5 L213.5,76.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M203.5,77.5 L203.5,71.5\" id=\"Line-13\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M201.5,101.5 L201.5,95.5\" id=\"Line-8\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M204.5,99.5 L204.5,93.5\" id=\"Line-9\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M206.5,100.5 L206.5,94.5\" id=\"Line-10\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M216.5,100.5 L216.5,94.5\" id=\"Line-11\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M219.5,90.5 L219.5,84.5\" id=\"Line-12\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M221.5,100.5 L221.5,94.5\" id=\"Line-13\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M211.5,95.5 L211.5,89.5\" id=\"Line-14\" stroke-linecap=\"round\" stroke-linejoin=\"round\"></path>\n                        <path d=\"M75.5,6.5 L75.5,1.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M78.5,8.5 L78.5,3.5\" id=\"Line-2\" stroke-linecap=\"square\"></path>\n                        <path d=\"M72.5,10.5 L72.5,5.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M76.5,13.5 L76.5,8.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M81.5,15.5 L81.5,10.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M87.5,12.5 L87.5,7.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M90.5,7.5 L90.5,1.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M94.5,16.5 L94.5,11.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M98.5,19.5 L98.5,14.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M103.5,21.5 L103.5,16.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M109.5,18.5 L109.5,13.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M112.5,13.5 L112.5,7.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M107.5,26.5 L107.5,21.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M111.5,29.5 L111.5,24.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M116.5,31.5 L116.5,26.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M122.5,28.5 L122.5,23.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M125.5,23.5 L125.5,17.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M156.5,43.5 L156.5,38.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M160.5,46.5 L160.5,41.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M165.5,48.5 L165.5,43.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M171.5,45.5 L171.5,40.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M174.5,40.5 L174.5,34.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M176.5,54.5 L176.5,49.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M180.5,57.5 L180.5,52.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M185.5,59.5 L185.5,54.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M191.5,56.5 L191.5,51.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M194.5,51.5 L194.5,45.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M169.5,44.5 L169.5,39.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M173.5,47.5 L173.5,42.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M178.5,49.5 L178.5,44.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M184.5,46.5 L184.5,41.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M187.5,41.5 L187.5,35.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M179.5,71.5 L179.5,66.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M183.5,74.5 L183.5,69.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M188.5,76.5 L188.5,71.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M194.5,73.5 L194.5,68.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M197.5,68.5 L197.5,62.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M192.5,88.5 L192.5,83.5\" id=\"Line-10\" stroke-linecap=\"square\"></path>\n                        <path d=\"M196.5,91.5 L196.5,86.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M201.5,93.5 L201.5,88.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M207.5,90.5 L207.5,85.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M210.5,85.5 L210.5,79.5\" id=\"Line-14\" stroke-linecap=\"square\"></path>\n                        <path d=\"M56.5,28.5 L56.5,23.5\" id=\"Line-11\" stroke-linecap=\"square\"></path>\n                        <path d=\"M60.5,31.5 L60.5,26.5\" id=\"Line-12\" stroke-linecap=\"square\"></path>\n                        <path d=\"M65.5,33.5 L65.5,28.5\" id=\"Line-13\" stroke-linecap=\"square\"></path>\n                        <path d=\"M71.5,30.5 L71.5,25.5\" id=\"Line-14\" stroke-linecap=\"square\"></path>\n                        <path d=\"M74.5,25.5 L74.5,19.5\" id=\"Line-15\" stroke-linecap=\"square\"></path>\n                        <path d=\"M104.5,5.5 L104.5,0.400980473\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M152.5,19.5 L152.5,14.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M157.5,22.5 L157.5,19.3377224\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M217.5,113.5 L217.5,108.5\" id=\"Line\" stroke-linecap=\"square\"></path>\n                        <path d=\"M213.5,111.5 L213.5,106.5\" id=\"Line-2\" stroke-linecap=\"square\"></path>\n                        <path d=\"M223.5,110.5 L223.5,105.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M219.5,109.5 L219.5,104.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M210.5,117.5 L210.5,112.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M193.5,61.5 L193.5,56.5\" id=\"Line-3\" stroke-linecap=\"square\"></path>\n                        <path d=\"M203.5,60.5 L203.5,55.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M199.5,59.5 L199.5,54.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M190.5,67.5 L190.5,62.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M80.5,27.5 L80.5,22.5\" id=\"Line-4\" stroke-linecap=\"square\"></path>\n                        <path d=\"M90.5,26.5 L90.5,21.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M86.5,25.5 L86.5,20.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M77.5,33.5 L77.5,28.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M95.5,27.5 L95.5,22.5\" id=\"Line-5\" stroke-linecap=\"square\"></path>\n                        <path d=\"M105.5,26.5 L105.5,21.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M101.5,25.5 L101.5,20.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M92.5,33.5 L92.5,28.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M4.5,46.5 L4.5,41.5\" id=\"Line-6\" stroke-linecap=\"square\"></path>\n                        <path d=\"M14.5,45.5 L14.5,40.5\" id=\"Line-7\" stroke-linecap=\"square\"></path>\n                        <path d=\"M10.5,44.5 L10.5,39.5\" id=\"Line-8\" stroke-linecap=\"square\"></path>\n                        <path d=\"M1.5,52.5 L1.5,47.5\" id=\"Line-9\" stroke-linecap=\"square\"></path>\n                        <path d=\"M55.5,12.5 L55.5,8.37689438\" id=\"Line\" stroke-linecap=\"square\"></path>\n                    </g>\n                </g>\n                <g id=\"no-mobile-shape-3\" class=\"no-mobile-shape\">\n                    <rect class='rectbg' id=\"bg-3\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M181.884766,583.011719 C181.884766,583.011719 192.693359,597.515625 216.757812,608.833984 C240.822266,620.152344 248.880859,622.419922 248.880859,622.419922 L251.456055,610.658203 L181.884766,583.011719 Z\" id=\"no-mobile-shape-3-hairs-back\" class=\"hairs-back\" fill=\"#262626\"></path>\n                    <path d=\"M278.345703,387.816406 L277.322266,506.960938 L465.798828,600.304688 L477.138672,588.636719 C477.138672,588.636719 437.207031,482.755859 437.207031,458.025391 C437.207031,433.294922 463.121094,382.931641 463.121094,382.931641 L278.345703,387.816406 Z\" id=\"no-mobile-shape-3-hairs-back-2\" class=\"hairs-back-2\" fill=\"#222222\"></path>\n                    <path d=\"M290.84375,409.074219 C311.912477,429.703147 338.460873,443.925781 369.542969,443.925781 C401.685644,443.925781 436.859654,432.233275 459.527344,409.074219 C480.481728,387.665607 490.1875,355.978513 490.1875,326 C490.1875,263.591823 440.902767,208.03125 379.046875,208.03125 C317.190983,208.03125 267.90625,263.591823 267.90625,326 C267.90625,357.048562 269.984002,388.649906 290.84375,409.074219 Z\" id=\"no-mobile-shape-3-head\" class=\"head\" fill=\"#DADADA\"></path>\n                    <path d=\"M320.496094,484.546875 C320.496094,484.546875 294.373047,496.876953 289.40625,502.191406 C284.439453,507.505859 272.550781,511.484375 262.431641,557.382812 C252.3125,603.28125 237.332031,670.302734 234.888672,677.060547 C232.445313,683.818359 229.851563,688.158203 227.328125,691.181641 C224.804688,694.205078 227.888672,698.392578 231.388672,698.392578 C234.888672,698.392578 245.671876,702.904297 267.539062,702.904297 C289.406249,702.904297 296.782227,695.092773 296.782227,695.092773 L296.061523,717.90332 L257.555664,785.506836 C257.555664,785.506836 255.811523,827.904297 253.194336,847.259766 C250.577149,866.615234 242.884766,914.334961 238.886719,920.516602 C234.888672,926.698242 229.314453,928.355469 235.833984,936.881836 C242.353516,945.408203 283.969731,965.162109 326.105469,965.162109 C368.241206,965.162109 441.25977,952.861328 456.688477,947.725586 C472.117183,942.589844 486.786138,934.912109 489.803711,933.179688 C492.821284,931.447266 494.879888,929.189453 490.355469,926.398438 C485.83105,923.607422 459.485356,879.975586 456.344727,864.37207 C453.204097,848.768555 437.922856,775.936523 438.969727,742.821289 C440.016597,709.706055 449.79688,664.098633 452.227539,658.8125 C454.658198,653.526367 472.179688,649.329102 465.986323,628.339844 C459.792959,607.350586 468.730469,611.716797 468.730464,610.716797 C468.730459,609.716797 465.986323,598.060547 465.986323,598.060547 C465.986323,598.060547 454.052739,530.34375 448.643555,516.267578 C443.23437,502.191406 440.320317,485.769531 433.999023,482.378906 C427.67773,478.988281 401.750981,474.625977 397.848633,474.625977 C393.946284,474.625977 388.758789,475.672852 388.758789,475.672852 L320.496094,484.546875 Z\" id=\"no-mobile-shape-3-t-shirt\" class=\"t-shirt\" fill=\"#999999\"></path>\n                    <path d=\"M330.976562,431.541016 C330.976562,431.541016 332.023438,466.705078 332.023438,471.798828 C332.023438,476.892578 322.972656,481.998047 319.03125,485.068359 C315.089844,488.138672 344.216797,528.095703 357.953125,540.785156 C371.689453,553.474609 391.054685,563.441406 397.417969,567.384766 C403.781252,571.328125 406.875,573.271484 406.875,573.271484 C406.875,573.271484 400.848635,520.312988 395.683594,500.083984 C390.351032,479.198881 390.296877,475.845703 388.822266,475.845703 C385.963455,475.845703 379.138936,471.548811 378.644531,462.910156 C378.056341,452.632812 382.312498,431.541016 382.312498,431.541016 L330.976562,431.541016 Z\" id=\"no-mobile-shape-3-neck\" class=\"neck\" fill=\"#DADADA\"></path>\n                    <path d=\"M247.710938,698.039062 C247.710938,698.039062 249.628906,759.490234 249.628906,762.910156 C249.628906,766.330078 250.896484,782.175781 255.013672,787.09375 C259.130859,792.011719 274.056641,792.082029 276.953125,795.001951 C279.849609,797.921873 299.923828,785.509766 307.205078,782.392578 C314.486328,779.275391 462.9375,714.843749 462.9375,714.843749 C462.9375,714.843749 459.277273,671.876241 454.589844,675.593748 C422.592292,700.970376 308.044924,732.076174 303.671875,732.076173 C298.658203,732.076173 299.785156,725.11328 299.785156,714.843748 L299.785156,694.15625 L247.710938,698.039062 Z\" id=\"no-mobile-shape-3-right-arm\" class=\"right-arm\" fill=\"#DADADA\"></path>\n                    <path d=\"M291.828125,501.164063 C291.828125,450.960938 290.246094,433.144531 302.0625,414.300781 C313.878906,395.457031 367.59766,378.107422 392.976563,356.392578 C418.355465,334.677734 440.492191,307.740234 449.041016,288.267578 C457.58984,268.794922 459.880859,265.050781 459.880859,265.050781 C459.880859,265.050781 457.414066,278.464844 461.951172,290.978516 C466.488278,303.492188 474.037113,306.958984 480.271484,312.693359 C486.505856,318.427734 489.123051,324.859375 489.123047,333.734375 C489.123043,342.609375 499.218754,323.964844 502.359375,296.269531 C505.499996,268.574219 506.873051,241.611328 497.998047,228.095703 C489.123043,214.580078 485.414066,209.345703 480.470703,209.345703 C475.52734,209.345703 473.306641,212.765625 473.306641,212.765625 C473.306641,212.765625 477.548832,203.103516 463.294922,183.783203 C449.041012,164.462891 441.37582,147.863281 419.816406,144.746094 C398.256992,141.628906 347.136719,136.070312 325.994141,142.433594 C304.851563,148.796875 241.322265,181.785156 231.724609,239.412112 C222.126953,297.039068 227.1875,340.364716 231.724609,376.817828 C236.261719,413.270941 235.557078,474.619885 224.769531,522.826159 C219.964844,544.29685 194.154297,573.34375 190.839844,576.308581 C187.525391,579.273413 181.417969,582.554675 181.417969,582.554675 C181.417969,582.554675 181.685547,585.195312 188.175781,589.335925 C194.666016,593.476538 217.708984,604.275403 231.724609,607.740234 C245.740234,611.205066 251.251953,611.205078 251.251953,611.205078 C251.251953,611.205078 281.747559,614.816907 298.430176,612.580566 C315.112793,610.344226 325.994141,603.318848 325.994141,603.318848 C325.994141,603.318848 291.828125,551.367188 291.828125,501.164063 Z\" id=\"no-mobile-shape-3-hairs\" class=\"hairs\" fill=\"#333333\"></path>\n                    <path d=\"M465.646851,611.40271 C465.658808,611.42279 465.733358,611.834645 465.862151,612.595417 C468.017993,625.331991 485.295751,735.348391 478.800781,743.041016 C471.916016,751.195312 458.074219,745.681641 458.074219,745.681641 L311.583984,734.958984 L294.753906,734.0625 L293.660156,714.662109 C293.660156,714.662109 307.990234,700.449219 314.177734,700.449219 C320.365234,700.449219 340.234375,701.148438 347.886719,705.160156 C355.539062,709.171875 449.511719,714.185547 449.511719,714.185547 L447.117676,679.833008 L451.770508,658.869629 C451.770508,658.869629 463.733887,648.261963 464.897095,645.974854 C466.060303,643.687744 466.496338,642.238892 466.971069,639.838379 C467.445801,637.437866 466.561035,633.55127 466.561035,632.54834 C466.561035,631.54541 464.235474,623.378662 463.92041,621.149414 C463.275879,618.856079 463.540161,613.273315 465.135864,611.897827\" id=\"no-mobile-shape-3-left-arm\" class=\"left-arm\" fill=\"#DADADA\"></path>\n                </g>\n                <g id=\"no-mobile-shape-4\" class=\"no-mobile-shape\">\n                    <rect class='rectbg' id=\"bg-4\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M232.203125,415.902344 L437.339844,420.488281 L457.582031,374.425781 L432.457031,285.535156 L238.484375,256.222656 L220.339844,348.160156 L232.203125,415.902344 Z\" id=\"no-mobile-shape-4-hairs-back\" class=\"hairs-back\" fill=\"#222222\"></path>\n                    <path d=\"M143.261719,639.560547 C143.261719,639.560547 171.271484,693.253906 173.711914,701.058594 C176.152344,708.863281 189.117931,739.853516 183.089741,760.371094 C180.689261,768.541379 177.796875,802.591797 171.271484,828.890625 C164.746094,855.189453 150.669922,918.279297 150.669922,918.279297 L177.388672,918.279297 C177.388672,918.279297 190.228516,869.019531 197.246094,844.09375 C204.263672,819.167969 214.23156,773.740579 218.84668,760.371094 C227.256836,736.007813 226.550781,729.953125 225.242188,725.080078 C223.933594,720.207031 219.893555,711.420898 218.84668,704.814453 C217.799805,698.208008 200.834473,649.436036 197.246094,639.560547 C193.657715,629.685058 194.603027,618.881348 194.603027,618.881348 C194.603027,618.881348 192.060547,620.804688 190.228516,622.188477 C188.396484,623.572266 177.644035,630.835938 173.711914,633.342773 C169.779793,635.849609 158.850586,631.795898 154.958984,633.342773 C151.067383,634.889648 143.261719,639.560547 143.261719,639.560547 Z\" id=\"no-mobile-shape-4-right-arm\" class=\"right-arm\" fill=\"#DADADA\" transform=\"translate(184.500000, 768.500000) scale(-1, 1) translate(-184.500000, -768.500000) \"></path>\n                    <path d=\"M496.261719,634.560547 C496.261719,634.560547 521.271484,691.162109 523.711914,698.966797 C526.152344,706.771484 542.246094,735.511719 542.246094,763.617188 C542.246094,775.550361 536.089741,818.667969 534.089741,836.615234 C532.089741,854.5625 516.25,921.433594 516.25,921.433594 L543.603027,921.433594 C543.603027,921.433594 558.181641,868.835938 562.242188,845.130859 C566.302734,821.425781 572.256432,783.348616 574.242188,763.617188 C576.886719,737.339844 575.550781,729.953125 574.242187,725.080078 C572.933594,720.207031 568.893555,711.420898 567.84668,704.814453 C566.799805,698.208008 553.834473,644.436036 550.246094,634.560547 C546.657715,624.685058 547.603027,613.881348 547.603027,613.881348 C547.603027,613.881348 545.060547,615.804688 543.228516,617.188477 C541.396484,618.572266 530.644035,625.835938 526.711914,628.342773 C522.779793,630.849609 511.850586,626.795898 507.958984,628.342773 C504.067383,629.889648 496.261719,634.560547 496.261719,634.560547 Z\" id=\"no-mobile-shape-4-left-arm\" class=\"left-arm\" fill=\"#DADADA\"></path>\n                    <path d=\"M273.296875,408.519531 C273.296875,408.519531 238.050781,421.03125 223.488281,430.851563 C208.925781,440.671875 205.601562,443.066406 200.808594,452.929688 C196.015625,462.792969 163.125,608.816406 158.585937,622.984375 C154.046875,637.152344 147.464844,645.082031 147.464844,645.082031 C147.464844,645.082031 160.332031,654.457031 178.382812,662.484375 C196.433594,670.511719 218.71875,675.488281 224.953125,675.488281 C231.1875,675.488281 251.285156,678.980469 251.285156,678.980469 C251.285156,678.980469 238.769531,807.628906 234.582031,835.960938 C230.394531,864.292969 227.253906,905.027344 227.253906,905.027344 C227.253906,905.027344 219.832031,914.40625 239.375,924.523438 C258.917969,934.640625 351.484375,957.320312 427.160156,940.921875 C502.835938,924.523438 514.09375,926.011719 514.09375,915.519531 C514.09375,905.027344 503.765625,860.199219 503.765625,832.5625 C503.765625,804.925781 491.25,678.441406 491.25,678.441406 C491.25,678.441406 504.554687,675.648438 519.375,669.066406 C534.195312,662.484375 546.6875,659.996094 557.015625,655.203125 C567.34375,650.410156 576.066406,646.109375 576.066406,646.109375 C576.066406,646.109375 552.085938,574.367188 545.105469,559.804688 C538.125,545.242188 520.421875,469.472656 520.421875,459.144531 C520.421875,448.816406 510.09375,437.046875 503.464844,431.859375 C496.835938,426.671875 460.765625,398.285156 437.855469,398.285156 C414.945312,398.285156 273.296875,408.519531 273.296875,408.519531 Z\" id=\"no-mobile-shape-4-t-shirt\" class=\"t-shirt\" fill=\"#999999\"></path>\n                    <ellipse id=\"no-mobile-shape-4-head\" class=\"head\" fill=\"#DADADA\" cx=\"341\" cy=\"319\" rx=\"109\" ry=\"99\"></ellipse>\n                    <path d=\"M288.113281,404.121094 L272.15625,407.960938 C272.15625,407.960938 272.949219,427.804688 289,448.996094 C305.050781,470.1875 326.589844,485.285156 337.664062,491.078125 C348.738281,496.871094 370.682103,485.963465 383.539062,472.933594 C390.074219,466.310547 413.457031,433.453125 413.457031,416.496094 C413.457031,399.539062 405.285156,389.769531 390.074219,389.769531 C374.863281,389.769531 288.113281,404.121094 288.113281,404.121094 Z\" id=\"no-mobile-shape-4-neck\" class=\"neck\" fill=\"#DADADA\"></path>\n                    <path d=\"M199.796875,426.964844 C199.796875,426.964844 207.949219,445.785156 250.277344,452.613281 C292.605469,459.441406 299.910156,460.859375 299.910156,460.859375 C299.910156,460.859375 263.246094,420.382812 263.246094,393.908203 C263.246094,367.433594 268.654297,345.298828 272.841797,339.564453 C277.029297,333.830078 346.576172,288.583984 346.576172,288.583984 L394.685547,308.625 C394.685547,308.625 415.099609,329.583984 417.890625,355.535156 C420.681641,381.486328 427.613281,393.550781 416.667969,423.082031 C405.722656,452.613281 397.371094,461.605469 397.371094,461.605469 C397.371094,461.605469 421.798828,465.546875 447.923828,457.021484 C474.048828,448.496094 491.958984,435.771484 491.958984,435.771484 C491.958984,435.771484 500.833984,353.359375 497.716797,302.658203 C494.599609,251.957031 486.726562,200.714844 456.716797,174.857422 C426.707031,149 374.794922,124.353516 359.185547,124.353516 C343.576172,124.353516 331.015625,129.738281 328.816406,129.738281 C326.617188,129.738281 321.927734,130.34375 309.460938,130.34375 C296.994141,130.34375 286.175781,126.576172 272.066406,134.205078 C257.957031,141.833984 226.876953,154.769531 209.603516,201.482422 C192.330078,248.195312 179.304687,346.542969 199.796875,426.964844 Z\" id=\"no-mobile-shape-4-hairs\" class=\"hairs\" fill=\"#333333\"></path>\n                    <path d=\"M268.242188,274.251953 L272.580078,347.207031 C272.580078,347.207031 312.90625,353.488281 334.623047,353.488281 C356.339844,353.488281 378.3125,351.720703 391.78125,348.080078 C405.25,344.439453 411.263672,341.542969 411.263672,341.542969 L417.439453,261.306641 L268.242188,274.251953 Z\" id=\"no-mobile-shape-4-hairs-2\" class=\"hairs-2\" fill=\"#333333\"></path>\n                </g>\n                <g id=\"no-mobile-shape-5\" class=\"no-mobile-shape\">\n                    <rect class='rectbg' id=\"bg-5\" stroke-opacity=\"0.01\" stroke=\"#FFFFFF\" x=\"0\" y=\"0\" width=\"700\" height=\"1000\"></rect>\n                    <path d=\"M171.222656,659.292969 C171.222656,659.292969 146.054688,728.082031 140.214844,740.203125 C134.375,752.324219 125.191406,762.839844 129.980469,771.074219 C134.769531,779.308594 209.257815,859.726562 226.566406,879.175781 C243.874997,898.625 280.421875,929.980469 280.421875,929.980469 L295.308599,941.691406 L336.937505,941.691406 L298.773438,901.953125 C298.773438,901.953125 260.531253,850.957031 248.316406,829.8125 C236.10156,808.667969 200.160156,757.464844 200.160156,757.464844 C200.160156,757.464844 194.636719,750.664062 205.707028,732.355469 C216.777338,714.046875 229.425781,682.929688 229.425781,682.929688 L171.222656,659.292969 Z\" id=\"no-mobile-shape-5-right-arm\" class=\"right-arm\" fill=\"#DADADA\"></path>\n                    <path d=\"M317.556645,394.607422 C304.900395,394.607422 294.710938,391.695313 271.472656,405.164063 C248.234375,418.632813 225.808594,432.636719 225.808594,432.636719 C225.808594,432.636719 213.246094,436.03125 208.011719,455.574219 C202.777344,475.117187 175.863281,602.828118 171.371094,616.695312 C166.878906,630.562507 159.042969,647.21875 159.042969,647.21875 C159.042969,647.21875 157.507812,654.195305 176.699219,663.222656 C195.890625,672.250007 232.230472,689.347649 242.90625,689.347656 C253.582028,689.347663 264.46875,688.601562 264.46875,688.601562 C264.46875,688.601562 264.464847,676.74218 270.398438,659.734375 C276.332028,642.72657 288.195308,605.785149 288.195312,605.785156 C288.195317,605.785163 292.570308,600.226555 296.78125,614.347656 C300.992192,628.468757 308.765621,721.691399 308.765625,766.234375 C308.765629,810.777351 292.062503,882.316399 287.875,893.039063 C283.687497,903.761726 272.472652,906.507805 297.597656,916.976563 C322.72266,927.44532 348.917965,942.496087 421.382812,942.496094 C493.84766,942.496101 505.363277,926.445305 525.601562,918.464844 C545.839848,910.484382 543.742183,840.671868 534.671875,784.585938 C525.601567,728.500007 502.343746,613.894524 496.808594,603.613281 C491.273442,593.332038 500.808594,587.191406 500.808594,587.191406 C500.808594,587.191406 506.042965,585.191407 496.273438,550.691406 C486.50391,516.191406 467.359371,445.648437 454.097656,420.71875 C440.835942,395.789063 435.554683,383.871094 424.132812,383.871094 C412.710942,383.871093 379.017582,363.447266 317.556645,394.607422 Z\" id=\"no-mobile-shape-5-t-shirt\" class=\"t-shirt\" fill=\"#999999\"></path>\n                    <path d=\"M217.617188,312.218753 C237.454423,330.900928 283.903952,334.339847 310.898438,334.339847 C369.440621,334.339847 413.050781,301.033194 413.050781,231.445316 C413.050781,187.317801 395.482011,121.490561 366.589844,98.984375 C349.919857,85.9989239 327.419036,87 306,87 C279.389522,87 242.578728,95.1085855 223.964844,114.359375 C201.62879,137.459695 166.855468,148.523916 166.855468,186.480472 C166.855468,223.980566 194.433967,290.38542 217.617188,312.218753 Z\" id=\"no-mobile-shape-5-head\" class=\"head\" fill=\"#DADADA\"></path>\n                    <path d=\"M293.265625,327.3125 C293.265625,327.3125 303.640625,349.738281 303.640625,367.046875 C303.640625,384.355469 302.152344,396.523438 295.359375,396.523438 C288.566406,396.523438 282.519531,400.011719 282.519531,400.011719 C282.519531,400.011719 290.546875,416.621094 314.972656,431.578125 C339.398438,446.535156 345.378906,452.328125 359.847656,452.328125 C374.316406,452.328125 387.179688,447.652344 392.414062,435.578125 C397.648438,423.503906 393.855469,398.617188 393.855469,388.542969 C393.855469,378.46875 381.621094,377.421875 381.621094,377.421875 C381.621094,377.421875 366.152344,383.3125 359.964844,369.492188 C353.777344,355.671875 346.636719,327.058594 355.871094,310.449219 C365.105469,293.839844 293.265625,327.3125 293.265625,327.3125 Z\" id=\"no-mobile-shape-5-neck\" class=\"neck\" fill=\"#DADADA\"></path>\n                    <path d=\"M221.222656,249.123052 C226.808594,240.095708 234.527341,214.277349 234.527341,214.277349 C234.527341,214.277349 238.660156,195.21875 225.378906,189.425781 C212.097656,183.632812 202.660156,185.84375 210.402344,161.394531 C218.144531,136.945312 232.941406,109.125 244.363281,109.125 C255.785157,109.125 288.048831,108.425779 304.470703,108.425779 C320.892575,108.425779 321.035159,102.9375 321.035156,96.75 C324.126953,92.9960953 339.050777,86.6679703 349.613281,92.9960953 C360.175786,99.3242203 370.460933,100.097654 375.601563,108.425779 C378.671875,108.425779 370.496089,87.998048 361.515625,78.2753922 C352.535161,68.5527364 333.384273,45.4531255 310.867188,45.453125 C288.350102,45.4531245 273.199219,38.4765625 241.800781,51.3398437 C210.402344,64.203125 184.546874,81.5390648 174.128906,103.03125 C163.710938,124.523435 157.386719,148.999998 157.386719,189.425787 C157.386719,229.851575 170.929688,253.214844 180.953125,267.101568 C190.976562,280.988292 197.230469,286.558599 197.230469,286.558599 C197.230469,286.558599 200.342785,265.536133 200.342774,259.161138 C200.342769,256.58861 198.894531,254.288091 194.008789,254.288091 C189.123047,254.288091 187.092091,246.486692 186.349609,240.793951 C185.076172,231.030279 187.016486,222.271487 192.070313,222.27149 C201.890626,222.271495 204.249024,224.900396 208.988281,231.030279 C213.727539,237.160162 215.636719,258.150396 221.222656,249.123052 Z\" id=\"no-mobile-shape-5-hairs\" class=\"hairs\" fill=\"#333333\"></path>\n                </g>\n            </g>\n        </g>\n    </g>\n    </defs>\n\n</svg>"

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<svg id=\"browser-defs\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n    <defs>\n\n        <!-- Android -->\n        <g class=\"browser-shape\" id=\"browser-shape-android\">\n            <g>\n                <path d=\"M5,8.978c-1.104,0-2,0.896-2,2v8c0,1.104,0.896,2,2,2s2-0.896,2-2v-8C7,9.873,6.104,8.978,5,8.978z\" fill=\"#85C808\" class=\"highlight\"/>\n                <path d=\"M27,8.978c-1.104,0-2,0.896-2,2v8c0,1.104,0.896,2,2,2s2-0.896,2-2v-8C29,9.873,28.104,8.978,27,8.978z\" fill=\"#85C808\" class=\"highlight\"/>\n                <path d=\"M8,24.978h2v5c0,1.104,0.896,2,2,2s2-0.896,2-2v-5h4v5c0,1.104,0.896,2,2,2s2-0.896,2-2v-5h2v-15H8V24.978z\" fill=\"#85C808\" class=\"highlight\"/>\n                <path d=\"M20.723,2.53l1.027-1.779c0.139-0.24,0.057-0.545-0.184-0.684c-0.238-0.139-0.545-0.057-0.683,0.184 l-1.001,1.734C18.732,1.345,17.41,0.978,16,0.978c-1.409,0-2.731,0.367-3.882,1.008L11.116,0.25   c-0.139-0.239-0.443-0.321-0.684-0.183c-0.238,0.138-0.32,0.443-0.183,0.683l1.028,1.78C9.294,3.986,8,6.328,8,8.978h16 C24,6.328,22.706,3.986,20.723,2.53z M13,5.978c-0.553,0-1-0.447-1-1s0.447-1,1-1s1,0.447,1,1S13.553,5.978,13,5.978z M19,5.978 c-0.553,0-1-0.447-1-1s0.447-1,1-1s1,0.447,1,1S19.553,5.978,19,5.978z\" fill=\"#85C808\" class=\"highlight\"/>\n            </g>\n        </g>\n\n        <!-- Apple -->\n        <g class=\"browser-shape\" id=\"browser-shape-apple\">\n            <g>\n                <rect style=\"fill:#4086cd;fill-opacity:1;fill-rule:nonzero;stroke:none\" x=\"0\" y=\"5.6843419e-014\" class=\"highlight\"/>\n                <path d=\"M 276.644,86.29783 C 291.00847,69.40891 315.28852,56.84445 335.32411,56 c 2.55556,23.46226 -6.84891,46.95564 -20.75115,63.88456 -13.92447,16.8978 -36.71563,30.06227 -59.08455,28.30671 -3.04001,-22.95559 8.23112,-46.89341 21.15559,-61.89344 z m 113.98243,320.045 c -16.62669,24.38228 -33.82229,48.61787 -60.96901,49.12454 -26.71559,0.50667 -35.28006,-15.87559 -65.769,-15.87559 -30.52006,0 -40.07119,15.36892 -65.29344,16.38226 -26.20894,0.98666 -46.1423,-26.33338 -62.8979,-50.60899 -34.23561,-49.63119 -60.377881,-140.33802 -25.23115,-201.55146 17.40447,-30.40005 48.59565,-49.63119 82.38682,-50.1423 25.74226,-0.47556 50.05785,17.40892 65.77344,17.40892 15.75114,0 45.26674,-21.47115 76.28902,-18.32004 12.98669,0.53778 49.43564,5.2489 72.84902,39.60895 -1.85333,1.21778 -43.50675,25.53338 -43.00453,76.18236 0.50667,60.50233 52.85344,80.60903 53.46232,80.88458 -0.47999,1.42224 -8.37334,28.71116 -27.59559,56.90677 z\" id=\"Apple\" style=\"fill:#ffffff;fill-opacity:1\" class=\"highlight\"/>\n            </g>\n        </g>\n\n        <!-- Chrome -->\n        <g class=\"browser-shape\" id=\"browser-shape-chrome\">\n            <g>\n                <path d=\"M16,24.188c-1.625,0-3.104-0.438-4.438-1.312c-1.334-0.875-2.334-2-3-3.375L2,8c-1.375,2.459-2,5.209-2,8   c0,4,1.302,7.49,3.906,10.469c2.604,2.979,5.844,4.76,9.719,5.344l4.641-8.031C17.799,23.919,17.02,24.188,16,24.188z\" fill=\"#4AAE48\" class=\"highlight\"/>\n                <path d=\"M10.969,9.531C12.447,8.386,14.125,8,16,8c0.25,0,13.75,0,13.75,0c-1.417-2.416-3.344-4.458-5.781-5.875   C21.531,0.709,18.875,0,16,0c-2.5,0-4.834,0.531-7,1.594C6.833,2.656,4.828,4.203,3.359,6.188L8,14   C8.458,12.209,9.489,10.678,10.969,9.531z\" fill=\"#EA3939\" class=\"highlight\"/>\n                <path d=\"M30.797,10H21.5c1.625,1.625,2.688,3.709,2.688,6c0,1.709-0.479,3.271-1.438,4.688L16.188,32   c4.375-0.042,8.104-1.625,11.188-4.75C30.458,24.125,32,20.375,32,16C32,13.959,31.656,11.812,30.797,10z\" fill=\"#FED14B\" class=\"highlight\"/>\n                <circle cx=\"16\" cy=\"16\" fill=\"#188FD1\" r=\"6\" class=\"highlight\"/>\n            </g>\n        </g>\n\n        <!-- Firefox -->\n        <g class=\"browser-shape\" id=\"browser-shape-firefox\">\n            <g>\n                <path d=\"M32,11.105c0,0.396-0.031,1.168-0.094,2.315c-0.063,1.146-0.198,2.273-0.406,3.379   c-0.209,1.105-0.594,2.346-1.156,3.723c-0.563,1.376-1.25,2.618-2.063,3.723c-0.812,1.104-1.927,2.148-3.343,3.128   c-1.417,0.979-3.021,1.68-4.812,2.096c-0.959,0.251-1.938,0.396-2.938,0.438c-0.041,0-0.124,0.021-0.249,0.062   c-0.835,0.041-1.667,0.041-2.5,0c-5.167-0.416-9.104-2.961-11.812-7.633c-1.25-2.212-1.96-4.317-2.125-6.319   c-0.125,0.584-0.21,1.085-0.25,1.501c-0.125-2.377,0.062-4.316,0.562-5.818C0.438,12.326,0.165,12.909,0,13.452   c0.333-1.877,0.771-3.358,1.312-4.442c0.04-0.25,0.29-0.71,0.75-1.376c0-0.084,0-0.146,0-0.188   C1.978,6.277,2.094,5.224,2.406,4.286s0.571-1.523,0.781-1.752c0.208-0.229,0.375-0.406,0.5-0.531   C3.728,3.003,4.25,3.962,5.25,4.88C5.5,4.921,5.728,4.943,5.938,4.943c1.04-0.209,2.125-0.188,3.25,0.062   c0.665-0.835,1.688-1.398,3.062-1.689l1.188-0.062c-1.21,0.709-1.938,1.73-2.188,3.065c0.458,0.959,1.062,1.439,1.812,1.439   c0.625,0,1.083,0,1.375,0c0.708,0,1.083,0.062,1.125,0.188v0.062v0.062c0.04,0.041,0.04,0.104,0,0.188v0.062v0.062   c-0.042,0.417-0.188,0.729-0.438,0.939c-0.042,0-0.062,0.01-0.062,0.031c0,0.021-0.022,0.031-0.062,0.031   c0,0.041-0.188,0.166-0.562,0.375c-0.5,0.333-0.897,0.604-1.188,0.813c-0.542,0.333-0.812,0.562-0.812,0.688v0.062h-0.062   c0.125,0.25,0.208,0.562,0.25,0.938c0.083,0.375,0.103,0.604,0.062,0.688c0,0.209,0,0.396,0,0.563c-0.5-0.25-0.979-0.417-1.438-0.5   c-0.585,0.25-0.917,0.521-1,0.812c-0.042,0.167-0.085,0.334-0.125,0.501c0,0.792,0.562,1.523,1.688,2.189   c0.458,0.292,0.927,0.46,1.406,0.501c0.478,0.042,0.853,0.021,1.125-0.062c0.271-0.084,0.603-0.209,1-0.376   c0.396-0.166,0.677-0.271,0.844-0.312c1.25-0.334,2.271-0.041,3.062,0.876c0.251,0.25,0.303,0.491,0.157,0.72   c-0.146,0.229-0.365,0.303-0.657,0.219c-0.124,0.041-0.208,0.053-0.249,0.031c-0.042-0.021-0.136,0-0.282,0.062   c-0.146,0.062-0.249,0.104-0.312,0.125c-0.063,0.021-0.167,0.084-0.312,0.188c-0.146,0.105-0.261,0.179-0.345,0.22   c-0.083,0.041-0.218,0.135-0.406,0.281c-0.188,0.146-0.343,0.24-0.468,0.281c-0.5,0.376-1.219,0.647-2.156,0.813   s-1.719,0.166-2.344,0c0.5,0.376,0.896,0.647,1.188,0.813c0.29,0.167,0.771,0.429,1.438,0.782c0.665,0.354,1.239,0.585,1.719,0.688   c0.478,0.104,1.083,0.156,1.812,0.156c0.729,0,1.396-0.125,2-0.376c0.604-0.25,1.249-0.677,1.938-1.282   c0.687-0.604,1.343-1.365,1.969-2.283c0.125-0.21,0.208-0.335,0.249-0.376c0.084,0-0.021,0.563-0.312,1.689   c-0.125,0.585-0.166,0.876-0.125,0.876c0.709-0.501,1.198-1.461,1.469-2.878c0.271-1.418,0.303-2.794,0.094-4.13   c0.5,0.209,0.854,0.604,1.062,1.189l0.126,0.125c0.249-0.793,0.396-1.825,0.438-3.098c0.041-1.272-0.084-2.325-0.375-3.159   c0.541,0.166,1.041,0.709,1.5,1.627c-0.125-0.668-0.313-1.283-0.562-1.846c-0.251-0.563-0.531-1.043-0.845-1.439   c-0.312-0.396-0.646-0.772-1-1.126c-0.354-0.354-0.718-0.647-1.093-0.876c-0.376-0.229-0.74-0.438-1.094-0.626   c-0.354-0.188-0.688-0.334-1-0.438c-0.313-0.104-0.595-0.188-0.844-0.25c-0.251-0.062-0.438-0.105-0.562-0.126   c-0.125-0.021-0.167-0.031-0.125-0.031c1.041-0.292,2.104-0.438,3.188-0.438C24,3.044,23.76,2.856,23.406,2.69   c-0.354-0.167-0.74-0.312-1.157-0.438c-0.416-0.125-0.822-0.229-1.218-0.312c-0.396-0.085-0.865-0.188-1.406-0.313h-0.062h0.124   c1.167-0.334,3-0.084,5.5,0.751c0.917,0.291,1.751,0.823,2.5,1.596c0.751,0.771,1.22,1.345,1.407,1.721   c0.187,0.375,0.322,0.688,0.406,0.938V6.381c0.041-0.209,0.01-0.531-0.094-0.97c-0.104-0.438-0.261-0.907-0.469-1.407   c0.041,0,0.104,0.031,0.188,0.094c0.083,0.062,0.239,0.291,0.469,0.688c0.229,0.396,0.489,0.97,0.78,1.72   c0.459,1.127,0.854,3.149,1.188,6.069l0.375-2.378C31.979,10.407,32,10.708,32,11.105z\" fill=\"#EA7015\" class=\"highlight\" />\n            </g>\n        </g>\n\n        <!-- Internet explorer -->\n        <g class=\"browser-shape\" id=\"browser-shape-ie\">\n            <g>\n                <path d=\"M11.466,18.942v0.064c0,1.051,0.24,2.06,0.725,3.022c0.569,1.008,1.349,1.806,2.336,2.397   c0.987,0.59,2.084,0.886,3.29,0.886s2.305-0.296,3.292-0.886c0.986-0.592,1.765-1.39,2.335-2.397h7.833   c-1.011,2.847-2.765,5.179-5.265,6.994c-2.502,1.817-5.311,2.726-8.425,2.726c-2.325,0-4.519-0.503-6.581-1.511   c-4.607,2.234-7.92,2.343-9.938,0.329c-0.703-0.656-1.053-1.751-1.053-3.284c0-1.532,0.296-3.24,0.889-5.123   c0.592-1.882,1.579-3.952,2.962-6.207c1.381-2.255,3.016-4.302,4.902-6.141c1.097-1.139,1.799-1.84,2.105-2.102   c-2.721,1.312-5.178,3.35-7.37,6.107c0.789-3.196,2.49-5.823,5.1-7.882c2.61-2.058,5.605-3.087,8.984-3.087   c0.351,0,0.701,0.022,1.052,0.065c2.458-1.095,4.695-1.707,6.714-1.839c2.018-0.132,3.443,0.197,4.277,0.985   c1.667,1.708,1.821,4.379,0.461,8.013C31.363,12.308,32,14.717,32,17.3c0,0.613-0.022,1.16-0.065,1.643h-7.767H11.466z    M10.085,29.714c-2.939-1.795-5.003-4.312-6.188-7.554c-1.974,3.854-2.237,6.503-0.79,7.948   C4.38,31.378,6.705,31.246,10.085,29.714z M23.642,15.133c-0.088-1.577-0.724-2.923-1.908-4.04   c-1.185-1.116-2.578-1.675-4.179-1.675c-1.603,0-2.995,0.559-4.179,1.675c-1.186,1.117-1.822,2.463-1.91,4.04H23.642z    M22.918,3.901c2.807,1.138,5.045,2.977,6.712,5.517c1.01-2.715,0.965-4.619-0.131-5.715C28.314,2.478,26.12,2.544,22.918,3.901z\" fill=\"#188FD1\" class=\"highlight\" />\n            </g>\n        </g>\n\n        <!-- Opera -->\n        <g class=\"browser-shape\" id=\"browser-shape-opera\">\n            <g>\n                <path d=\"M26.737,4.375c2.842,2.917,4.264,6.75,4.264,11.5c0,4.334-1.422,8.104-4.264,11.312   C23.895,30.396,20.295,32,15.938,32c-4.316,0-7.885-1.604-10.706-4.812C2.41,23.979,1,20.209,1,15.875   c0-4.75,1.39-8.583,4.171-11.5C7.95,1.459,11.54,0,15.938,0C20.295,0,23.895,1.459,26.737,4.375z M21.291,11.062   c-0.124-1.291-0.373-2.552-0.747-3.781c-0.373-1.229-0.944-2.177-1.711-2.844c-0.769-0.666-1.733-1-2.895-1   c-1.162,0-2.116,0.323-2.863,0.969C12.328,5.053,11.778,6,11.426,7.25S10.835,9.75,10.71,11c-0.124,1.25-0.187,2.771-0.187,4.562   c0,1.125,0.021,2.073,0.062,2.844c0.04,0.771,0.113,1.709,0.218,2.812c0.103,1.104,0.27,2.031,0.498,2.781   c0.228,0.75,0.538,1.49,0.934,2.219c0.394,0.729,0.902,1.281,1.524,1.656s1.348,0.562,2.179,0.562c0.829,0,1.565-0.188,2.21-0.562   c0.643-0.375,1.161-0.927,1.556-1.656C20.098,25.49,20.42,24.75,20.669,24s0.436-1.677,0.56-2.781   c0.125-1.104,0.197-2.052,0.219-2.844c0.02-0.791,0.03-1.729,0.03-2.812C21.478,13.854,21.416,12.354,21.291,11.062z\" fill=\"#EA3939\" class=\"highlight\" />\n            </g>\n        </g>\n\n        <!-- Safari -->\n        <g class=\"browser-shape\" id=\"browser-shape-safari\">\n            <g>\n                <path d=\"M26.594,6.406C23.656,3.469,20.125,2,16,2c-0.75,0-1.479,0.062-2.188,0.188   c-0.042-0.041-0.062-0.083-0.062-0.125c0.458-0.333,0.625-0.708,0.5-1.125C14.125,0.312,13.646,0,12.812,0   c-0.167,0-0.334,0.021-0.5,0.062c-0.459,0.084-0.823,0.281-1.094,0.594c-0.271,0.312-0.365,0.636-0.281,0.969   c0.083,0.459,0.396,0.75,0.938,0.875v0.062C8.708,3.479,6.104,5.271,4.062,7.938C2.021,10.604,1,13.625,1,17   c0,4.125,1.469,7.656,4.406,10.594S11.875,32,16,32s7.656-1.469,10.594-4.406S31,21.125,31,17S29.531,9.344,26.594,6.406z    M24.062,25.062c-1.375,1.375-3,2.334-4.875,2.875l-1.312-2.188l-0.375,2.5c-0.5,0.084-1,0.125-1.5,0.125   c-3.125,0-5.812-1.104-8.062-3.312c-1.375-1.375-2.334-3-2.875-4.875l2.188-1.312L4.75,18.5c-0.084-0.5-0.125-1-0.125-1.5   c0-3.125,1.104-5.812,3.312-8.062c1.375-1.375,3-2.333,4.875-2.875l1.312,2.188l0.375-2.5c0.5-0.083,1-0.125,1.5-0.125   c3.125,0,5.812,1.104,8.062,3.312c1.375,1.375,2.333,3,2.875,4.875l-2.188,1.312l2.5,0.375c0.083,0.5,0.125,1,0.125,1.5   C27.375,20.125,26.271,22.812,24.062,25.062z\" fill=\"#E6E6E6\" />\n                <path d=\"M13.5,15.375c-0.459,0.709-0.604,1.459-0.438,2.25c0.041,0.167,0.104,0.354,0.188,0.562l1.688-2.25l2.25-1.688   c-0.25-0.125-0.521-0.208-0.812-0.25c-0.125,0-0.25,0-0.375,0c-0.209,0-0.417,0.021-0.625,0.062   C14.583,14.229,13.958,14.667,13.5,15.375z\" />\n                <path d=\"M18.75,18.188C19,17.604,19.062,17,18.938,16.375c-0.042-0.166-0.104-0.354-0.188-0.562l-1.688,2.25l-2.25,1.688   c0.25,0.125,0.521,0.209,0.812,0.25c0.125,0,0.25,0,0.375,0c0.208,0,0.416-0.021,0.625-0.062c0.333-0.083,0.646-0.208,0.938-0.375   C18.104,19.229,18.5,18.771,18.75,18.188z\" />\n                <path d=\"M27.25,15.484l-2.5-0.375l2.188-1.312c-0.542-1.875-1.5-3.5-2.875-4.875   C21.812,6.714,19.125,5.609,16,5.609c-0.5,0-1,0.042-1.5,0.125l-0.375,2.5l-1.312-2.188c-1.875,0.542-3.5,1.5-4.875,2.875   c-2.209,2.25-3.312,4.938-3.312,8.062c0,0.5,0.041,1,0.125,1.5l2.5,0.375l-2.188,1.312c0.541,1.875,1.5,3.5,2.875,4.875   c2.25,2.209,4.938,3.312,8.062,3.312c0.5,0,1-0.041,1.5-0.125l0.375-2.5l1.312,2.188c1.875-0.541,3.5-1.5,4.875-2.875   c2.208-2.25,3.312-4.938,3.312-8.062C27.375,16.484,27.333,15.984,27.25,15.484z\" fill=\"#188FD1\" class=\"highlight\" />\n                <path d=\"M20.698,18.71l-2.202-1.748c0-0.029-0.007-0.057-0.009-0.086l3.856-2.834l-4.646,1.132   c-0.021-0.019-0.043-0.034-0.063-0.053l0.076-2.819l-1.748,2.202c-0.029,0-0.057,0.007-0.086,0.009l-2.835-3.856l1.133,4.646   c-0.019,0.021-0.035,0.043-0.053,0.064l-2.819-0.077l2.202,1.749c0,0.029,0.007,0.057,0.009,0.086l-3.857,2.834l4.647-1.133   c0.021,0.019,0.043,0.035,0.064,0.053l-0.077,2.82l1.747-2.203c0.029,0,0.057-0.007,0.086-0.009l2.834,3.857l-1.131-4.647   c0.019-0.021,0.034-0.043,0.053-0.063L20.698,18.71z M16,19c-1.104,0-2-0.896-2-2s0.896-2,2-2s2,0.896,2,2S17.104,19,16,19z\" opacity=\"0.2\" />\n                <polygon fill=\"#EA3939\" points=\"17,18 23.777,9.222 15,16  \" />\n                <polygon fill=\"#FFFFFF\" points=\"15,16 8.221,24.777 17,18  \" />\n            </g>\n        </g>\n\n    </defs>\n</svg>\n"

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = "<svg id=\"screen-defs\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:sketch=\"http://www.bohemiancoding.com/sketch/ns\">\n    <defs>\n\n    <!-- Desktop -->\n    <g class=\"screen-shape\" id=\"screen-desktop-shape\" stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\" sketch:type=\"MSPage\">\n        <g sketch:type=\"MSLayerGroup\">\n            <rect id=\"Rectangle-1\" fill=\"#CCCCCC\" sketch:type=\"MSShapeGroup\" x=\"0\" y=\"0\" width=\"1171\" height=\"710\" rx=\"30\"></rect>\n            <rect id=\"Rectangle-4\" fill=\"#333333\" sketch:type=\"MSShapeGroup\" x=\"25\" y=\"25\" width=\"1121\" height=\"625\" rx=\"30\"></rect>\n            <path d=\"M465,709 L448,837 L718,837 L701,709 L465,709 Z\" id=\"Rectangle-2\" fill=\"#CCCCCC\" sketch:type=\"MSShapeGroup\"></path>\n            <path d=\"M412.53063,836.503906 C405.349113,836.503906 403.68105,840.573929 408.816006,845.605433 L448,884 L718,884 L758.505792,845.465462 C763.708309,840.516131 762.101986,836.503906 754.922495,836.503906 L412.53063,836.503906 Z\" id=\"Rectangle-3\" fill=\"#CCCCCC\" sketch:type=\"MSShapeGroup\" transform=\"translate(584.000000, 860.500000) scale(1, -1) translate(-584.000000, -860.500000) \"></path>\n        </g>\n    </g>\n\n    </defs>\n</svg>"

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/**
	Provides
	@module ChartEngine
	@submodule Layer
	@class OrdinalLegendLabelLayer
	*/

	var Formatter = __webpack_require__(26);

	var OrdinalLegendLabelLayer = {

		modes: ["large", "medium", "small"],

		dataBind: function(data) {
			return this.selectAll(".ordinalLegendLabel").data(data.lines, function(line) {
				return line.id;
			});
		},

		insert: function() {
			return this.append("text").classed('ordinalLegendLabel', true);
		},

		events: {
			enter: function() {
				this
					.attr('text-anchor', 'middle')
					.attr('font-size', 18);
			},
			merge: function() {
				var chart = this.chart();
				this
					.attr('x', function(line) {
						return chart.options.scale(line.offset + line.sum / 2);
					})
					.html(function(line) {
						var rawText = chart.options.text(line)
						if (chart.options.formatter) {
							return Formatter.format(rawText, chart.options.formatter)
						} else {
							return rawText;
						}
					})
					.attr('y', function(line) {
						var font = +d3.select(this).attr('font-size');
						return 2 * font;
					});
				return this;
			}
		}
	};

	module.exports = OrdinalLegendLabelLayer;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(){
		return [{
			numerator: 0,
			denominator: 1
		}, {
			numerator: 5,
			denominator: 5
		}, {
			numerator: 1,
			denominator: 2
		}, {
			numerator: 1,
			denominator: 4
		}, {
			numerator: 3,
			denominator: 4
		}, {
			numerator: 1,
			denominator: 3
		}, {
			numerator: 2,
			denominator: 3
		}, {
			numerator: 1,
			denominator: 5
		}, {
			numerator: 2,
			denominator: 5
		}, {
			numerator: 3,
			denominator: 5
		}, {
			numerator: 4,
			denominator: 5
		}];
	}


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	module.exports = require('./lib/schema')

	// Patterns
	require('./lib/patterns/reference')
	require('./lib/patterns/nothing')
	require('./lib/patterns/anything')
	require('./lib/patterns/object')
	require('./lib/patterns/or')
	require('./lib/patterns/equality')
	require('./lib/patterns/regexp')
	require('./lib/patterns/class')
	require('./lib/patterns/schema')

	// Extensions
	require('./lib/extensions/Boolean')
	require('./lib/extensions/Number')
	require('./lib/extensions/String')
	require('./lib/extensions/Object')
	require('./lib/extensions/Array')
	require('./lib/extensions/Function')
	require('./lib/extensions/Schema')

	},{"./lib/extensions/Array":3,"./lib/extensions/Boolean":4,"./lib/extensions/Function":5,"./lib/extensions/Number":6,"./lib/extensions/Object":7,"./lib/extensions/Schema":8,"./lib/extensions/String":9,"./lib/patterns/anything":10,"./lib/patterns/class":11,"./lib/patterns/equality":12,"./lib/patterns/nothing":13,"./lib/patterns/object":14,"./lib/patterns/or":15,"./lib/patterns/reference":16,"./lib/patterns/regexp":17,"./lib/patterns/schema":18,"./lib/schema":19}],2:[function(require,module,exports){
	var Schema = module.exports = function() {}

	Schema.prototype = {
	  wrap: function() {
	    if (this.wrapped) return this.validate
	    this.wrapped = true

	    var publicFunctions = [ 'toJSON', 'unwrap', 'errors' ]
	    publicFunctions = publicFunctions.concat(this.publicFunctions || [])

	    for (var i = 0; i < publicFunctions.length; i++) {
	      if (!this[publicFunctions[i]]) continue
	      this.validate[publicFunctions[i]] = this[publicFunctions[i]].bind(this)
	    }

	    return this.validate
	  },

	  unwrap: function() {
	    return this
	  },

	  toJSON: session(function(makeReference) {
	    var json, session = Schema.session

	    // Initializing session if it isnt
	    if (!session.serialized) session.serialized = { objects: [], jsons: [], ids: [] }

	    var index = session.serialized.objects.indexOf(this)
	    if (makeReference && index !== -1) {
	      // This was already serialized, returning a JSON schema reference ($ref)
	      json = session.serialized.jsons[index]

	      // If there was no id given, generating one now
	      if (json.id == null) {
	        do {
	          json.id = 'id-' + Math.floor(Math.random() * 100000)
	        } while (session.serialized.ids.indexOf(json.id) !== -1)
	        session.serialized.ids.push(json.id)
	      }

	      json = { '$ref': json.id }

	    } else {
	      // This was not serialized yet, serializing now
	      json = {}

	      if (this.doc != null) json.description = this.doc

	      // Registering that this was serialized and storing the json
	      session.serialized.objects.push(this)
	      session.serialized.jsons.push(json)
	    }

	    return json
	  })
	}

	Schema.extend = function(descriptor) {
	  if (!descriptor.validate) {
	    throw new Error('Schema objects must have a validate function.')
	  }

	  var constructor = function() {
	    var self = this;
	    if (this.initialize)
	      this.initialize.apply(this, arguments)

	    this.validate = this.validate.bind(this)
	    this.validate.schema = this.validate
	  }

	  var prototype = Object.create(Schema.prototype)
	  for (var key in descriptor) prototype[key] = descriptor[key]
	  constructor.prototype = prototype

	  return constructor
	}


	var active = false
	function session(f) {
	  return function() {
	    if (active) {
	      // There's an active session, just forwarding to the original function
	      return f.apply(this, arguments)

	    } else {
	      // The initiator is the one who handles the active flag, and clears the session when it's over
	      active = true

	      var result = f.apply(this, arguments)

	      // Cleanup
	      for (var i in session) delete session[i]
	      active = false

	      return result
	    }
	  }
	}
	Schema.session = session

	function lastDefinedResult(functions, arg) {
	  var i = functions.length, result;
	  while (i--) {
	    result = functions[i](arg)
	    if (result != null) return result
	  }
	}

	var fromJSdefs = []
	Schema.fromJS = lastDefinedResult.bind(null, fromJSdefs)
	Schema.fromJS.def = Array.prototype.push.bind(fromJSdefs)

	var fromJSONdefs = []
	Schema.fromJSON = session(lastDefinedResult.bind(null, fromJSONdefs))
	Schema.fromJSON.def = Array.prototype.push.bind(fromJSONdefs)

	Schema.patterns = {}
	Schema.extensions = {}

	},{}],3:[function(require,module,exports){
	var Schema          = require('../BaseSchema')
	  , EqualitySchema  = require('../patterns/equality')
	  , anything        = require('../patterns/anything').instance

	var ArraySchema = module.exports = Schema.extensions.ArraySchema = Schema.extend({
	  initialize: function(itemSchema, max, min) {
	    this.itemSchema = itemSchema || anything
	    this.min = min || 0
	    this.max = max || Infinity
	  },
	  errors: function(instance) {
	    var self = this
	    // Instance must be an instance of Array
	    if (!(instance instanceof Array))
	      return ( instance + ' is not an instance of Array')

	    // Checking length
	    if (this.min === this.max) {
	      if (instance.length !== this.min)
	        return ( 'Array length should be equal to ' + this.min + ' and is ' + instance.length )

	    } else {
	      if (this.min > 0 && instance.length < this.min)
	        return ( 'Array length should not be less than ' + this.min + ' and is ' + instance.length )
	      if (this.max < Infinity && instance.length > this.max)
	        return ( 'Array length should not be more than ' + this.max + ' and is ' + instance.length )
	    }

	    // Checking conformance to the given item schema
	    var results = {}
	    for (var i = 0; i < instance.length; i++) {
	      var errs = this.itemSchema.errors(instance[i])
	      if (errs) {
	        results[i] = errs
	      }
	    }
	    var resultKeysArray = Object.keys(results)
	    if (resultKeysArray.length > 0) {
	      return results
	    }

	    return false
	  },
	  validate: function(instance) {
	    // Instance must be an instance of Array
	    if (!(instance instanceof Array)) return false

	    // Checking length
	    if (this.min === this.max) {
	      if (instance.length !== this.min) return false

	    } else {
	      if (this.min > 0 && instance.length < this.min) return false
	      if (this.max < Infinity && instance.length > this.max) return false
	    }

	    // Checking conformance to the given item schema
	    for (var i = 0; i < instance.length; i++) {
	      if (!this.itemSchema.validate(instance[i])) return false
	    }

	    return true
	  },

	  toJSON: Schema.session(function() {
	    var json = Schema.prototype.toJSON.call(this, true)

	    if (json['$ref'] != null) return json

	    json.type = 'array'

	    if (this.min > 0) json.minItems = this.min
	    if (this.max < Infinity) json.maxItems = this.max
	    if (this.itemSchema !== anything) json.items = this.itemSchema.toJSON()

	    return json
	  })
	})


	Schema.fromJSON.def(function(sch) {
	  if (!sch || sch.type !== 'array') return

	  // Tuple typing is not yet supported
	  if (sch.items instanceof Array) return

	  return new ArraySchema(Schema.fromJSON(sch.items), sch.maxItems, sch.minItems)
	})

	Array.of = function() {
	  // Possible signatures : (schema)
	  //                       (length, schema)
	  //                       (minLength, maxLength, schema)
	  var args = Array.prototype.slice.call(arguments).reverse()
	  if (args.length === 2) args[2] = args[1]
	  return new ArraySchema(Schema.fromJS(args[0]), args[1], args[2]).wrap()
	}

	Array.like = function(other) {
	  return new EqualitySchema(other).wrap()
	}

	Array.schema = new ArraySchema().wrap()

	},{"../BaseSchema":2,"../patterns/anything":10,"../patterns/equality":12}],4:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var BooleanSchema = module.exports = Schema.extensions.BooleanSchema = new Schema.extend({
	  errors: function(instance) {
	    if (!this.validate(instance)) {
	      return ( instance + ' is not Boolean' )
	    }
	    return false
	  },

	  validate: function(instance) {
	    return Object(instance) instanceof Boolean
	  },

	  toJSON: function() {
	    return {
	      type: 'boolean'
	    }
	  }
	})

	var booleanSchema = module.exports = new BooleanSchema().wrap()

	Schema.fromJSON.def(function(sch) {
	  if (!sch || sch.type !== 'boolean') return

	  return booleanSchema
	})

	Boolean.schema = booleanSchema

	},{"../BaseSchema":2}],5:[function(require,module,exports){
	var ReferenceSchema = require('../patterns/reference')

	Function.reference = function(f) {
	  return new ReferenceSchema(f).wrap()
	}

	},{"../patterns/reference":16}],6:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var NumberSchema = module.exports = Schema.extensions.NumberSchema = Schema.extend({
	  initialize: function(minimum, exclusiveMinimum, maximum, exclusiveMaximum, divisibleBy) {
	    this.minimum = minimum != null ? minimum : -Infinity
	    this.exclusiveMinimum = exclusiveMinimum
	    this.maximum = minimum != null ? maximum : Infinity
	    this.exclusiveMaximum = exclusiveMaximum
	    this.divisibleBy = divisibleBy || 0
	  },

	  min: function(minimum) {
	    return new NumberSchema( minimum, false
	                           , this.maximum
	                           , this.exclusiveMaximum
	                           , this.divisibleBy
	                           ).wrap()
	  },

	  above: function(minimum) {
	    return new NumberSchema( minimum, true
	                           , this.maximum
	                           , this.exclusiveMaximum
	                           , this.divisibleBy
	                           ).wrap()
	  },

	  max: function(maximum) {
	    return new NumberSchema( this.minimum
	                           , this.exclusiveMinimum
	                           , maximum
	                           , false
	                           , this.divisibleBy
	                           ).wrap()
	  },

	  below: function(maximum) {
	    return new NumberSchema( this.minimum
	                           , this.exclusiveMinimum
	                           , maximum
	                           , true
	                           , this.divisibleBy
	                           ).wrap()
	  },

	  step: function(divisibleBy) {
	    return new NumberSchema( this.minimum
	                           , this.exclusiveMinimum
	                           , this.maximum
	                           , this.exclusiveMaximum
	                           , divisibleBy
	                           ).wrap()
	  },

	  publicFunctions: ['min', 'above', 'max', 'below', 'step'],

	  errors: function(instance) {
	    var message
	    if (!(Object(instance) instanceof Number)) {
	      message = instance + ' is not Number'
	    } else if (instance < this.minimum) {
	      message = 'number = ' + instance + ' is smaller than required minimum = ' + this.minimum
	    } else if (instance > this.maximum) {
	      message = 'number = ' + instance + ' is bigger than required maximum = ' + this.maximum
	    } else if (this.divisibleBy !== 0 && instance % this.divisibleBy !== 0) {
	      message = 'number = ' + instance + ' is not divisibleBy ' + this.divisibleBy
	    }

	    if (message != null) {
	      return message
	    }
	    return false
	  },

	  validate: function(instance) {
	    return (Object(instance) instanceof Number) &&
	      (this.exclusiveMinimum ? instance >  this.minimum
	                             : instance >= this.minimum) &&
	      (this.exclusiveMaximum ? instance <  this.maximum
	                             : instance <= this.maximum) &&
	      (this.divisibleBy === 0 || instance % this.divisibleBy === 0)
	  },

	  toJSON: function() {
	    var json = Schema.prototype.toJSON.call(this)

	    json.type = ( this.divisibleBy !== 0 && this.divisibleBy % 1 === 0) ? 'integer' : 'number'

	    if (this.divisibleBy !== 0 && this.divisibleBy !== 1) json.divisibleBy = this.divisibleBy

	    if (this.minimum !== -Infinity) {
	      json.minimum = this.minimum
	      if (this.exclusiveMinimum === true) json.exclusiveMinimum = true
	    }

	    if (this.maximum !== Infinity) {
	      json.maximum = this.maximum
	      if (this.exclusiveMaximum === true) json.exclusiveMaximum = true
	    }

	    return json
	  }
	})

	Schema.fromJSON.def(function(sch) {
	  if (!sch || (sch.type !== 'number' && sch.type !== 'integer')) return

	  return new NumberSchema(sch.minimum, sch.exclusiveMinimum, sch.maximum, sch.exclusiveMaximum, sch.divisibleBy || (sch.type === 'integer' ? 1 : 0))
	})

	Number.schema     = new NumberSchema().wrap()
	Number.min        = Number.schema.min
	Number.above      = Number.schema.above
	Number.max        = Number.schema.max
	Number.below      = Number.schema.below
	Number.step       = Number.schema.step

	Number.Integer    = Number.step(1)

	},{"../BaseSchema":2}],7:[function(require,module,exports){
	var ReferenceSchema = require('../patterns/reference')
	  , EqualitySchema = require('../patterns/equality')
	  , ObjectSchema = require('../patterns/object')

	Object.like = function(other) {
	  return new EqualitySchema(other).wrap()
	}

	Object.reference = function(o) {
	  return new ReferenceSchema(o).wrap()
	}

	Object.schema = new ObjectSchema().wrap()

	},{"../patterns/equality":12,"../patterns/object":14,"../patterns/reference":16}],8:[function(require,module,exports){
	var Schema = require('../BaseSchema')
	  , schema = require('../schema')

	var SchemaReference = module.exports = Schema.extensions.SchemaReference = Schema.extend({
	  validate: function() {
	    throw new Error('Trying to validate unresolved schema reference.')
	  },

	  resolve: function(schemaDescriptor) {
	    var schemaObject = Schema.fromJS(schemaDescriptor)

	    for (var key in schemaObject) {
	      if (schemaObject[key] instanceof Function) {
	        this[key] = schemaObject[key].bind(schemaObject)
	      } else {
	        this[key] = schemaObject[key]
	      }
	    }

	    delete this.resolve
	  },

	  publicFunctions: [ 'resolve' ]
	})

	schema.reference = function(schemaDescriptor) {
	  return new SchemaReference()
	}

	function renewing(ref) {
	  ref.resolve = function() {
	    Schema.self = schema.self = renewing(new SchemaReference())
	    return SchemaReference.prototype.resolve.apply(this, arguments)
	  }
	  return ref
	}

	Schema.self = schema.self = renewing(new SchemaReference())

	Schema.fromJSON.def(function(sch) {
	  if (sch.id == null && sch['$ref'] == null) return

	  var id, session = Schema.session

	  if (!session.deserialized) session.deserialized = { references: {}, subscribers: {} }

	  if (sch.id != null) {
	    // This schema can be referenced in the future with the given ID
	    id = sch.id

	    // Deserializing:
	    delete sch.id
	    var schemaObject = Schema.fromJSON(sch)
	    sch.id = id

	    // Storing the schema object and notifying subscribers
	    session.deserialized.references[id] = schemaObject
	    ;(session.deserialized.subscribers[id] || []).forEach(function(callback) {
	      callback(schemaObject)
	    })

	    return schemaObject

	  } else {
	    // Referencing a schema given somewhere else with the given ID
	    id = sch['$ref']

	    // If the referenced schema is already known, we are ready
	    if (session.deserialized.references[id]) return session.deserialized.references[id]

	    // If not, returning a reference, and when the schema gets known, resolving the reference
	    if (!session.deserialized.subscribers[id]) session.deserialized.subscribers[id] = []
	    var reference = new SchemaReference()
	    session.deserialized.subscribers[id].push(reference.resolve.bind(reference))

	    return reference
	  }
	})

	},{"../BaseSchema":2,"../schema":19}],9:[function(require,module,exports){
	var RegexpSchema = require('../patterns/regexp')

	String.of = function() {
	  // Possible signatures : (charset)
	  //                       (length, charset)
	  //                       (minLength, maxLength, charset)
	  var args = Array.prototype.slice.call(arguments).reverse()
	    , charset = args[0] ? ('[' + args[0] + ']') : '[a-zA-Z0-9]'
	    , max = args[1]
	    , min = (args.length > 2) ? args[2] : args[1]
	    , regexp = '^' + charset + '{' + (min || 0) + ',' + (max || '') + '}$'

	  return new RegexpSchema(RegExp(regexp)).wrap()
	}

	String.schema = new RegexpSchema().wrap()

	},{"../patterns/regexp":17}],10:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var AnythingSchema = module.exports = Schema.patterns.AnythingSchema = Schema.extend({
	  errors: function(instance) {
	    if (instance == null)
	      return 'anything cannot be null'

	    return false
	  },
	  validate: function(instance) {
	    return instance != null
	  },

	  toJSON: function() {
	    return { type: 'any' }
	  }
	})

	var anything = AnythingSchema.instance = new AnythingSchema()

	Schema.fromJS.def(function(sch) {
	  if (sch === undefined) return anything
	})

	Schema.fromJSON.def(function(sch) {
	  if (sch.type === 'any') return anything
	})

	},{"../BaseSchema":2}],11:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var ClassSchema = module.exports = Schema.patterns.ClassSchema = Schema.extend({
	  initialize: function(constructor) {
	    this.constructor = constructor
	  },
	  getName: function(obj) {
	    if (!obj) return obj
	    if (obj instanceof Object) {
	      return obj.constructor.name
	    } else {
	      return typeof obj + ' = ' + obj
	    }
	  },
	  errors: function(instance) {
	    var middleMessage = ' is not instance of '

	    if (instance == null) {
	      return this.getName(instance) + middleMessage + this.getName(this.constructor)
	    }
	    if (!(instance instanceof this.constructor)) {
	      return this.getName(instance) + middleMessage + this.getName(this.constructor);
	    }
	    return false
	  },
	  validate: function(instance) {
	    return instance instanceof this.constructor
	  }
	})


	Schema.fromJS.def(function(constructor) {
	  if (!(constructor instanceof Function)) return

	  if (constructor.schema instanceof Function) {
	    return constructor.schema.unwrap()
	  } else {
	    return new ClassSchema(constructor)
	  }
	})

	},{"../BaseSchema":2}],12:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	// Object deep equality
	var equal = function(a, b) {
	  // if a or b is primitive, simple comparison
	  if (Object(a) !== a || Object(b) !== b) return a === b

	  // both a and b must be Array, or none of them
	  if ((a instanceof Array) !== (b instanceof Array)) return false

	  // they must have the same number of properties
	  if (Object.keys(a).length !== Object.keys(b).length) return false

	  // and every property should be equal
	  for (var key in a) {
	    if (!equal(a[key], b[key])) return false
	  }

	  // if every check succeeded, they are deep equal
	  return true
	}

	var EqualitySchema = module.exports = Schema.patterns.EqualitySchema = Schema.extend({
	  initialize: function(object) {
	    this.object = object
	  },
	  errors: function(instance) {
	    if (!equal(instance, this.object)) {
	      return ( instance + ' is not equal to ' + this.object )
	    }
	    return false
	  },
	  validate: function(instance) {
	    return equal(instance, this.object)
	  },

	  toJSON: function() {
	    var json = Schema.prototype.toJSON.call(this)

	    json['enum'] = [this.object]

	    return json
	  }
	})


	Schema.fromJS.def(function(sch) {
	  if (sch instanceof Array && sch.length === 1) return new EqualitySchema(sch[0])
	})

	},{"../BaseSchema":2}],13:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var NothingSchema = module.exports = Schema.patterns.NothingSchema = Schema.extend({
	  errors: function(instance) {
	    return false
	  },
	  validate: function(instance) {
	    return instance == null
	  },

	  toJSON: function() {
	    return { type: 'null' }
	  }
	})

	var nothing = NothingSchema.instance = new NothingSchema()

	Schema.fromJS.def(function(sch) {
	  if (sch === null) return nothing
	})

	Schema.fromJSON.def(function(sch) {
	  if (sch.type === 'null') return nothing
	})

	},{"../BaseSchema":2}],14:[function(require,module,exports){
	var Schema    = require('../BaseSchema')
	  , anything  = require('./anything').instance
	  , nothing   = require('./nothing').instance

	var ObjectSchema = module.exports = Schema.patterns.ObjectSchema = Schema.extend({
	  initialize: function(properties, other) {
	    var self = this

	    this.other = other || anything
	    this.properties = properties || []

	    // Sorting properties into two groups
	    this.stringProps = {}, this.regexpProps = []
	    this.properties.forEach(function(property) {
	      if (typeof property.key === 'string') {
	        self.stringProps[property.key] = property
	      } else {
	        self.regexpProps.push(property)
	      }
	    })
	  },

	  errors: function(instance) {
	    var self = this
	    if (instance == null)
	      return ( instance + ' is not Object' )

	    var errors = {}

	    // Simple string properties
	    Object.keys(this.stringProps).forEach(function(key) {
	      var result = self.stringProps[key].value.errors(instance[key])
	      if (result) {
	        errors[key] = result
	      }
	    })
	    if (Object.keys(errors).length > 0) {
	      return errors
	    }
	    return false
	  },
	  validate: function(instance) {
	    var self = this

	    if (instance == null) return false

	    // Simple string properties
	    var stringPropsValid = Object.keys(this.stringProps).every(function(key) {
	      return (self.stringProps[key].min === 0 && !(key in instance)) ||
	             (self.stringProps[key].value.validate(instance[key]))
	    })
	    if (!stringPropsValid) return false

	    // If there are no RegExp and other validator, that's all
	    if (!this.regexpProps.length && this.other === anything) return true

	    // Regexp and other properties
	    var checked
	    for (var key in instance) {

	      // Checking the key against every key regexps
	      checked = false
	      var regexpPropsValid = Object.keys(this.regexpProps).every(function(key) {
	        return (!self.regexpProps[key].key.test(key) ||
	                ((checked = true) && self.regexpProps[key].value.validate(instance[key]))
	               )
	      })
	      if (!regexpPropsValid) return false

	      // If the key is not matched by regexps and by simple string checks
	      // then check it against this.other
	      if (!checked && !(key in this.stringProps) && !this.other.validate(instance[key])) return false

	    }

	    // If all checks passed, the instance conforms to the schema
	    return true
	  },

	  toJSON: Schema.session(function() {
	    var i, property, regexp, json = Schema.prototype.toJSON.call(this, true)

	    if (json['$ref'] != null) return json

	    json.type = 'object'

	    for (i in this.stringProps) {
	      property = this.stringProps[i]
	      json.properties = json.properties || {}
	      json.properties[property.key] = property.value.toJSON()
	      if (property.min === 1) json.properties[property.key].required = true
	      if (property.title) json.properties[property.key].title = property.title
	    }

	    for (i = 0; i < this.regexpProps.length; i++) {
	      property = this.regexpProps[i]
	      json.patternProperties = json.patternProperties || {}
	      regexp = property.key.toString()
	      regexp = regexp.substr(2, regexp.length - 4)
	      json.patternProperties[regexp] = property.value.toJSON()
	      if (property.title) json.patternProperties[regexp].title = property.title
	    }

	    if (this.other !== anything) {
	      json.additionalProperties = (this.other === nothing) ? false : this.other.toJSON()
	    }

	    return json
	  })
	})

	// Testing if a given string is a real regexp or just a single string escaped
	// If it is just a string escaped, return the string. Otherwise return the regexp
	var regexpString = (function() {
	  // Special characters that should be escaped when describing a regular string in regexp
	  var shouldBeEscaped = '[](){}^$?*+.'.split('').map(function(element) {
	    return RegExp('(\\\\)*\\' + element, 'g')
	  })
	  // Special characters that shouldn't be escaped when describing a regular string in regexp
	  var shouldntBeEscaped = 'bBwWdDsS'.split('').map(function(element) {
	    return RegExp('(\\\\)*' + element, 'g')
	  })

	  return function(string) {
	    var i, j, match

	    for (i = 0; i < shouldBeEscaped.length; i++) {
	      match = string.match(shouldBeEscaped[i])
	      if (!match) continue
	      for (j = 0; j < match.length; j++) {
	        // If it is not escaped, it must be a regexp (e.g. [, \\[, \\\\[, etc.)
	        if (match[j].length % 2 === 1) return RegExp('^' + string + '$')
	      }
	    }
	    for (i = 0; i < shouldntBeEscaped.length; i++) {
	      match = string.match(shouldntBeEscaped[i])
	      if (!match) continue
	      for (j = 0; j < match.length; j++) {
	        // If it is escaped, it must be a regexp (e.g. \b, \\\b, \\\\\b, etc.)
	        if (match[j].length % 2 === 0) return RegExp('^' + string + '$')
	      }
	    }

	    // It is not a real regexp. Removing the escaping.
	    for (i = 0; i < shouldBeEscaped.length; i++) {
	      string = string.replace(shouldBeEscaped[i], function(match) {
	        return match.substr(1)
	      })
	    }

	    return string
	  }
	})()

	Schema.fromJS.def(function(object) {
	  if (!(object instanceof Object)) return

	  var other, property, properties = []
	  for (var key in object) {
	    property = {
	      value: Schema.fromJS(object[key])
	    }

	    // '*' as property name means 'every other property should match this schema'
	    if (key === '*') {
	      other = property.value
	      continue
	    }

	    // Handling special chars at the beginning of the property name
	    property.min = (key[0] === '*' || key[0] === '?') ? 0 : 1
	    property.max = (key[0] === '*' || key[0] === '+') ? Infinity : 1
	    key = key.replace(/^[*?+]/, '')

	    // Handling property title that looks like: { 'a : an important property' : Number }
	    key = key.replace(/\s*:[^:]+$/, function(match) {
	      property.title = match.replace(/^\s*:\s*/, '')
	      return ''
	    })

	    // Testing if it is regexp-like or not. If it is, then converting to a regexp object
	    property.key = regexpString(key)

	    properties.push(property)
	  }

	  return new ObjectSchema(properties, other)
	})

	Schema.fromJSON.def(function(json) {
	  if (!json || json.type !== 'object') return

	  var key, properties = []
	  for (key in json.properties) {
	    properties.push({
	      min: json.properties[key].required ? 1 : 0,
	      max: 1,
	      key: key,
	      value: Schema.fromJSON(json.properties[key]),
	      title: json.properties[key].title
	    })
	  }
	  for (key in json.patternProperties) {
	    properties.push({
	      min: 0,
	      max: Infinity,
	      key: RegExp('^' + key + '$'),
	      value: Schema.fromJSON(json.patternProperties[key]),
	      title: json.patternProperties[key].title
	    })
	  }

	  var other
	  if (json.additionalProperties !== undefined) {
	    other = json.additionalProperties === false ? nothing : Schema.fromJSON(json.additionalProperties)
	  }

	  return new ObjectSchema(properties, other)
	})

	},{"../BaseSchema":2,"./anything":10,"./nothing":13}],15:[function(require,module,exports){
	var Schema = require('../BaseSchema')
	  , EqualitySchema = require('../patterns/equality')

	var OrSchema = module.exports = Schema.patterns.OrSchema = Schema.extend({
	  initialize: function(schemas) {
	    this.schemas = schemas
	  },
	  errors: function(instance) {
	    var self = this

	    var errors = []
	    if (!this.validate(instance)) {
	      this.schemas.forEach(function(sch) {
	        var result = sch.errors(instance)
	        if (result) {
	          errors.push(result)
	        }
	      })
	      if (errors.length > 0) {
	        return errors.join('   OR   ')
	      }
	    }
	    return false
	  },
	  validate: function(instance) {
	    return this.schemas.some(function(sch) {
	      return sch.validate(instance)
	    })
	  },

	  toJSON: Schema.session(function() {
	    var json = Schema.prototype.toJSON.call(this, true)
	      , subjsons = this.schemas.map(function(sch) {
	          return sch.toJSON()
	        })
	      , onlyEquality = subjsons.every(function(json) {
	          return json['enum'] instanceof Array && json['enum'].length === 1
	        })

	    if (json['$ref'] != null) return json

	    if (onlyEquality) {
	      json['enum'] = subjsons.map(function(json) {
	        return json['enum'][0]
	      })

	    } else {
	      json['type'] = subjsons.map(function(json) {
	        var simpleType = typeof json.type === 'string' && Object.keys(json).length === 1
	        return simpleType ? json.type : json
	      })
	    }

	    return json
	  })
	})


	Schema.fromJS.def(function(schemas) {
	  if (schemas instanceof Array) return new OrSchema(schemas.map(function(sch) {
	    return sch === undefined ? Schema.self : Schema.fromJS(sch)
	  }))
	})

	Schema.fromJSON.def(function(sch) {
	  if (!sch) return

	  if (sch['enum'] instanceof Array) {
	    return new OrSchema(sch['enum'].map(function(object) {
	      return new EqualitySchema(object)
	    }))
	  }

	  if (sch['type'] instanceof Array) {
	    return new OrSchema(sch['type'].map(function(type) {
	      return Schema.fromJSON(typeof type === 'string' ? {
	        type: type
	      } : type)
	    }))
	  }
	})

	},{"../BaseSchema":2,"../patterns/equality":12}],16:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var ReferenceSchema = module.exports = Schema.patterns.ReferenceSchema = Schema.extend({
	  initialize: function(value) {
	    this.value = value
	  },
	  getName: function(obj) {
	    if (obj instanceof Object) {
	      return obj.constructor.name + ' = ' + obj
	    } else {
	      return typeof obj + ' = ' + obj
	    }
	  },
	  errors: function(instance) {
	    if (instance == null) {
	      return ( instance + ' is not a reference' )
	    }
	    if (instance !== this.value) {
	      var middleMessage = ' is not reference to '
	      return ( this.getName(instance) + middleMessage + this.getName(this.value) )
	    }
	    return false
	  },
	  validate: function(instance) {
	    return instance === this.value
	  },

	  toJSON: function() {
	    var json = Schema.prototype.toJSON.call(this)

	    json['enum'] = [this.value]

	    return json
	  }
	})


	Schema.fromJS.def(function(value) {
	  return new ReferenceSchema(value)
	})

	},{"../BaseSchema":2}],17:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	var RegexpSchema = module.exports = Schema.patterns.RegexpSchema = Schema.extend({
	  initialize: function(regexp) {
	    this.regexp = regexp
	  },
	  errors: function(instance) {
	    var message
	    if (!(Object(instance) instanceof String)) {
	      message = instance + ' is not a String'
	    } else if (this.regexp && !this.regexp.test(instance)) {
	      message = instance + ' is not matched with RegExp -> ' + this.regexp
	    }

	    if (message)
	      return message
	    return false
	  },
	  validate: function(instance) {
	    return Object(instance) instanceof String && (!this.regexp || this.regexp.test(instance))
	  },

	  toJSON: function() {
	    var json = Schema.prototype.toJSON.call(this)

	    json.type = 'string'

	    if (this.regexp) {
	      json.pattern = this.regexp.toString()
	      json.pattern = json.pattern.substr(1, json.pattern.length - 2)
	    }

	    return json
	  }
	})

	Schema.fromJSON.def(function(sch) {
	  if (!sch || sch.type !== 'string') return

	  if ('pattern' in sch) {
	    return new RegexpSchema(RegExp('^' + sch.pattern + '$'))
	  } else if ('minLength' in sch || 'maxLength' in sch) {
	    return new RegexpSchema(RegExp('^.{' + [sch.minLength || 0, sch.maxLength].join(',') + '}$'))
	  } else {
	    return new RegexpSchema()
	  }
	})

	Schema.fromJS.def(function(regexp) {
	  if (regexp instanceof RegExp) return new RegexpSchema(regexp)
	})

	},{"../BaseSchema":2}],18:[function(require,module,exports){
	var Schema = require('../BaseSchema')

	Schema.fromJS.def(function(sch) {
	  if (sch instanceof Schema) return sch
	})

	},{"../BaseSchema":2}],19:[function(require,module,exports){
	var Schema = require('./BaseSchema')

	schema = module.exports = function(schemaDescription) {
	  var doc, schemaObject

	  if (arguments.length === 2) {
	    doc = schemaDescription
	    schemaDescription = arguments[1]
	  }

	  if (this instanceof schema) {
	    // When called with new, create a schema object and then return the schema function
	    var constructor = Schema.extend(schemaDescription)
	    schemaObject = new constructor()
	    if (doc) schemaObject.doc = doc
	    return schemaObject.wrap()

	  } else {
	    // When called as simple function, forward everything to fromJS
	    // and then resolve schema.self to the resulting schema object
	    schemaObject = Schema.fromJS(schemaDescription)
	    schema.self.resolve(schemaObject)
	    if (doc) schemaObject.doc = doc
	    return schemaObject.wrap()
	  }
	}

	schema.Schema = Schema

	schema.toJSON = function(sch) {
	  return Schema.fromJS(sch).toJSON()
	}

	schema.fromJS = function(sch) {
	  return Schema.fromJS(sch).wrap()
	}

	schema.fromJSON = function(sch) {
	  return Schema.fromJSON(sch).wrap()
	}

	},{"./BaseSchema":2}]},{},[1]);


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * numeral.js
	 * version : 1.5.3
	 * author : Adam Draper
	 * license : MIT
	 * http://adamwdraper.github.com/Numeral-js/
	 */

	(function () {

	    /************************************
	        Constants
	    ************************************/

	    var numeral,
	        VERSION = '1.5.3',
	        // internal storage for language config files
	        languages = {},
	        currentLanguage = 'en',
	        zeroFormat = null,
	        defaultFormat = '0,0',
	        // check for nodeJS
	        hasModule = (typeof module !== 'undefined' && module.exports);


	    /************************************
	        Constructors
	    ************************************/


	    // Numeral prototype object
	    function Numeral (number) {
	        this._value = number;
	    }

	    /**
	     * Implementation of toFixed() that treats floats more like decimals
	     *
	     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
	     * problems for accounting- and finance-related software.
	     */
	    function toFixed (value, precision, roundingFunction, optionals) {
	        var power = Math.pow(10, precision),
	            optionalsRegExp,
	            output;
	            
	        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
	        // Multiply up by precision, round accurately, then divide and use native toFixed():
	        output = (roundingFunction(value * power) / power).toFixed(precision);

	        if (optionals) {
	            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
	            output = output.replace(optionalsRegExp, '');
	        }

	        return output;
	    }

	    /************************************
	        Formatting
	    ************************************/

	    // determine what type of formatting we need to do
	    function formatNumeral (n, format, roundingFunction) {
	        var output;

	        // figure out what kind of format we are dealing with
	        if (format.indexOf('$') > -1) { // currency!!!!!
	            output = formatCurrency(n, format, roundingFunction);
	        } else if (format.indexOf('%') > -1) { // percentage
	            output = formatPercentage(n, format, roundingFunction);
	        } else if (format.indexOf(':') > -1) { // time
	            output = formatTime(n, format);
	        } else { // plain ol' numbers or bytes
	            output = formatNumber(n._value, format, roundingFunction);
	        }

	        // return string
	        return output;
	    }

	    // revert to number
	    function unformatNumeral (n, string) {
	        var stringOriginal = string,
	            thousandRegExp,
	            millionRegExp,
	            billionRegExp,
	            trillionRegExp,
	            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	            bytesMultiplier = false,
	            power;

	        if (string.indexOf(':') > -1) {
	            n._value = unformatTime(string);
	        } else {
	            if (string === zeroFormat) {
	                n._value = 0;
	            } else {
	                if (languages[currentLanguage].delimiters.decimal !== '.') {
	                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
	                }

	                // see if abbreviations are there so that we can multiply to the correct number
	                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
	                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

	                // see if bytes are there so that we can multiply to the correct number
	                for (power = 0; power <= suffixes.length; power++) {
	                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

	                    if (bytesMultiplier) {
	                        break;
	                    }
	                }

	                // do some math to create our number
	                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

	                // round if we are talking about bytes
	                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
	            }
	        }
	        return n._value;
	    }

	    function formatCurrency (n, format, roundingFunction) {
	        var symbolIndex = format.indexOf('$'),
	            openParenIndex = format.indexOf('('),
	            minusSignIndex = format.indexOf('-'),
	            space = '',
	            spliceIndex,
	            output;

	        // check for space before or after currency
	        if (format.indexOf(' $') > -1) {
	            space = ' ';
	            format = format.replace(' $', '');
	        } else if (format.indexOf('$ ') > -1) {
	            space = ' ';
	            format = format.replace('$ ', '');
	        } else {
	            format = format.replace('$', '');
	        }

	        // format the number
	        output = formatNumber(n._value, format, roundingFunction);

	        // position the symbol
	        if (symbolIndex <= 1) {
	            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
	                output = output.split('');
	                spliceIndex = 1;
	                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
	                    // the symbol appears before the "(" or "-"
	                    spliceIndex = 0;
	                }
	                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
	                output = output.join('');
	            } else {
	                output = languages[currentLanguage].currency.symbol + space + output;
	            }
	        } else {
	            if (output.indexOf(')') > -1) {
	                output = output.split('');
	                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
	                output = output.join('');
	            } else {
	                output = output + space + languages[currentLanguage].currency.symbol;
	            }
	        }

	        return output;
	    }

	    function formatPercentage (n, format, roundingFunction) {
	        var space = '',
	            output,
	            value = n._value * 100;

	        // check for space before %
	        if (format.indexOf(' %') > -1) {
	            space = ' ';
	            format = format.replace(' %', '');
	        } else {
	            format = format.replace('%', '');
	        }

	        output = formatNumber(value, format, roundingFunction);
	        
	        if (output.indexOf(')') > -1 ) {
	            output = output.split('');
	            output.splice(-1, 0, space + '%');
	            output = output.join('');
	        } else {
	            output = output + space + '%';
	        }

	        return output;
	    }

	    function formatTime (n) {
	        var hours = Math.floor(n._value/60/60),
	            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
	            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
	        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
	    }

	    function unformatTime (string) {
	        var timeArray = string.split(':'),
	            seconds = 0;
	        // turn hours and minutes into seconds and add them all up
	        if (timeArray.length === 3) {
	            // hours
	            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
	            // minutes
	            seconds = seconds + (Number(timeArray[1]) * 60);
	            // seconds
	            seconds = seconds + Number(timeArray[2]);
	        } else if (timeArray.length === 2) {
	            // minutes
	            seconds = seconds + (Number(timeArray[0]) * 60);
	            // seconds
	            seconds = seconds + Number(timeArray[1]);
	        }
	        return Number(seconds);
	    }

	    function formatNumber (value, format, roundingFunction) {
	        var negP = false,
	            signed = false,
	            optDec = false,
	            abbr = '',
	            abbrK = false, // force abbreviation to thousands
	            abbrM = false, // force abbreviation to millions
	            abbrB = false, // force abbreviation to billions
	            abbrT = false, // force abbreviation to trillions
	            abbrForce = false, // force abbreviation
	            bytes = '',
	            ord = '',
	            abs = Math.abs(value),
	            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
	            min,
	            max,
	            power,
	            w,
	            precision,
	            thousands,
	            d = '',
	            neg = false;

	        // check if number is zero and a custom zero format has been set
	        if (value === 0 && zeroFormat !== null) {
	            return zeroFormat;
	        } else {
	            // see if we should use parentheses for negative number or if we should prefix with a sign
	            // if both are present we default to parentheses
	            if (format.indexOf('(') > -1) {
	                negP = true;
	                format = format.slice(1, -1);
	            } else if (format.indexOf('+') > -1) {
	                signed = true;
	                format = format.replace(/\+/g, '');
	            }

	            // see if abbreviation is wanted
	            if (format.indexOf('a') > -1) {
	                // check if abbreviation is specified
	                abbrK = format.indexOf('aK') >= 0;
	                abbrM = format.indexOf('aM') >= 0;
	                abbrB = format.indexOf('aB') >= 0;
	                abbrT = format.indexOf('aT') >= 0;
	                abbrForce = abbrK || abbrM || abbrB || abbrT;

	                // check for space before abbreviation
	                if (format.indexOf(' a') > -1) {
	                    abbr = ' ';
	                    format = format.replace(' a', '');
	                } else {
	                    format = format.replace('a', '');
	                }

	                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
	                    // trillion
	                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
	                    value = value / Math.pow(10, 12);
	                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
	                    // billion
	                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
	                    value = value / Math.pow(10, 9);
	                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
	                    // million
	                    abbr = abbr + languages[currentLanguage].abbreviations.million;
	                    value = value / Math.pow(10, 6);
	                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
	                    // thousand
	                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
	                    value = value / Math.pow(10, 3);
	                }
	            }

	            // see if we are formatting bytes
	            if (format.indexOf('b') > -1) {
	                // check for space before
	                if (format.indexOf(' b') > -1) {
	                    bytes = ' ';
	                    format = format.replace(' b', '');
	                } else {
	                    format = format.replace('b', '');
	                }

	                for (power = 0; power <= suffixes.length; power++) {
	                    min = Math.pow(1024, power);
	                    max = Math.pow(1024, power+1);

	                    if (value >= min && value < max) {
	                        bytes = bytes + suffixes[power];
	                        if (min > 0) {
	                            value = value / min;
	                        }
	                        break;
	                    }
	                }
	            }

	            // see if ordinal is wanted
	            if (format.indexOf('o') > -1) {
	                // check for space before
	                if (format.indexOf(' o') > -1) {
	                    ord = ' ';
	                    format = format.replace(' o', '');
	                } else {
	                    format = format.replace('o', '');
	                }

	                ord = ord + languages[currentLanguage].ordinal(value);
	            }

	            if (format.indexOf('[.]') > -1) {
	                optDec = true;
	                format = format.replace('[.]', '.');
	            }

	            w = value.toString().split('.')[0];
	            precision = format.split('.')[1];
	            thousands = format.indexOf(',');

	            if (precision) {
	                if (precision.indexOf('[') > -1) {
	                    precision = precision.replace(']', '');
	                    precision = precision.split('[');
	                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
	                } else {
	                    d = toFixed(value, precision.length, roundingFunction);
	                }

	                w = d.split('.')[0];

	                if (d.split('.')[1].length) {
	                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
	                } else {
	                    d = '';
	                }

	                if (optDec && Number(d.slice(1)) === 0) {
	                    d = '';
	                }
	            } else {
	                w = toFixed(value, null, roundingFunction);
	            }

	            // format number
	            if (w.indexOf('-') > -1) {
	                w = w.slice(1);
	                neg = true;
	            }

	            if (thousands > -1) {
	                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
	            }

	            if (format.indexOf('.') === 0) {
	                w = '';
	            }

	            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
	        }
	    }

	    /************************************
	        Top Level Functions
	    ************************************/

	    numeral = function (input) {
	        if (numeral.isNumeral(input)) {
	            input = input.value();
	        } else if (input === 0 || typeof input === 'undefined') {
	            input = 0;
	        } else if (!Number(input)) {
	            input = numeral.fn.unformat(input);
	        }

	        return new Numeral(Number(input));
	    };

	    // version number
	    numeral.version = VERSION;

	    // compare numeral object
	    numeral.isNumeral = function (obj) {
	        return obj instanceof Numeral;
	    };

	    // This function will load languages and then set the global language.  If
	    // no arguments are passed in, it will simply return the current global
	    // language key.
	    numeral.language = function (key, values) {
	        if (!key) {
	            return currentLanguage;
	        }

	        if (key && !values) {
	            if(!languages[key]) {
	                throw new Error('Unknown language : ' + key);
	            }
	            currentLanguage = key;
	        }

	        if (values || !languages[key]) {
	            loadLanguage(key, values);
	        }

	        return numeral;
	    };
	    
	    // This function provides access to the loaded language data.  If
	    // no arguments are passed in, it will simply return the current
	    // global language object.
	    numeral.languageData = function (key) {
	        if (!key) {
	            return languages[currentLanguage];
	        }
	        
	        if (!languages[key]) {
	            throw new Error('Unknown language : ' + key);
	        }
	        
	        return languages[key];
	    };

	    numeral.language('en', {
	        delimiters: {
	            thousands: ',',
	            decimal: '.'
	        },
	        abbreviations: {
	            thousand: 'k',
	            million: 'm',
	            billion: 'b',
	            trillion: 't'
	        },
	        ordinal: function (number) {
	            var b = number % 10;
	            return (~~ (number % 100 / 10) === 1) ? 'th' :
	                (b === 1) ? 'st' :
	                (b === 2) ? 'nd' :
	                (b === 3) ? 'rd' : 'th';
	        },
	        currency: {
	            symbol: '$'
	        }
	    });

	    numeral.zeroFormat = function (format) {
	        zeroFormat = typeof(format) === 'string' ? format : null;
	    };

	    numeral.defaultFormat = function (format) {
	        defaultFormat = typeof(format) === 'string' ? format : '0.0';
	    };

	    /************************************
	        Helpers
	    ************************************/

	    function loadLanguage(key, values) {
	        languages[key] = values;
	    }

	    /************************************
	        Floating-point helpers
	    ************************************/

	    // The floating-point helper functions and implementation
	    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

	    /**
	     * Array.prototype.reduce for browsers that don't support it
	     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
	     */
	    if ('function' !== typeof Array.prototype.reduce) {
	        Array.prototype.reduce = function (callback, opt_initialValue) {
	            'use strict';
	            
	            if (null === this || 'undefined' === typeof this) {
	                // At the moment all modern browsers, that support strict mode, have
	                // native implementation of Array.prototype.reduce. For instance, IE8
	                // does not support strict mode, so this check is actually useless.
	                throw new TypeError('Array.prototype.reduce called on null or undefined');
	            }
	            
	            if ('function' !== typeof callback) {
	                throw new TypeError(callback + ' is not a function');
	            }

	            var index,
	                value,
	                length = this.length >>> 0,
	                isValueSet = false;

	            if (1 < arguments.length) {
	                value = opt_initialValue;
	                isValueSet = true;
	            }

	            for (index = 0; length > index; ++index) {
	                if (this.hasOwnProperty(index)) {
	                    if (isValueSet) {
	                        value = callback(value, this[index], index, this);
	                    } else {
	                        value = this[index];
	                        isValueSet = true;
	                    }
	                }
	            }

	            if (!isValueSet) {
	                throw new TypeError('Reduce of empty array with no initial value');
	            }

	            return value;
	        };
	    }

	    
	    /**
	     * Computes the multiplier necessary to make x >= 1,
	     * effectively eliminating miscalculations caused by
	     * finite precision.
	     */
	    function multiplier(x) {
	        var parts = x.toString().split('.');
	        if (parts.length < 2) {
	            return 1;
	        }
	        return Math.pow(10, parts[1].length);
	    }

	    /**
	     * Given a variable number of arguments, returns the maximum
	     * multiplier that must be used to normalize an operation involving
	     * all of them.
	     */
	    function correctionFactor() {
	        var args = Array.prototype.slice.call(arguments);
	        return args.reduce(function (prev, next) {
	            var mp = multiplier(prev),
	                mn = multiplier(next);
	        return mp > mn ? mp : mn;
	        }, -Infinity);
	    }        


	    /************************************
	        Numeral Prototype
	    ************************************/


	    numeral.fn = Numeral.prototype = {

	        clone : function () {
	            return numeral(this);
	        },

	        format : function (inputString, roundingFunction) {
	            return formatNumeral(this, 
	                  inputString ? inputString : defaultFormat, 
	                  (roundingFunction !== undefined) ? roundingFunction : Math.round
	              );
	        },

	        unformat : function (inputString) {
	            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
	                return inputString; 
	            }
	            return unformatNumeral(this, inputString ? inputString : defaultFormat);
	        },

	        value : function () {
	            return this._value;
	        },

	        valueOf : function () {
	            return this._value;
	        },

	        set : function (value) {
	            this._value = Number(value);
	            return this;
	        },

	        add : function (value) {
	            var corrFactor = correctionFactor.call(null, this._value, value);
	            function cback(accum, curr, currI, O) {
	                return accum + corrFactor * curr;
	            }
	            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
	            return this;
	        },

	        subtract : function (value) {
	            var corrFactor = correctionFactor.call(null, this._value, value);
	            function cback(accum, curr, currI, O) {
	                return accum - corrFactor * curr;
	            }
	            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
	            return this;
	        },

	        multiply : function (value) {
	            function cback(accum, curr, currI, O) {
	                var corrFactor = correctionFactor(accum, curr);
	                return (accum * corrFactor) * (curr * corrFactor) /
	                    (corrFactor * corrFactor);
	            }
	            this._value = [this._value, value].reduce(cback, 1);
	            return this;
	        },

	        divide : function (value) {
	            function cback(accum, curr, currI, O) {
	                var corrFactor = correctionFactor(accum, curr);
	                return (accum * corrFactor) / (curr * corrFactor);
	            }
	            this._value = [this._value, value].reduce(cback);            
	            return this;
	        },

	        difference : function (value) {
	            return Math.abs(numeral(this._value).subtract(value).value());
	        }

	    };

	    /************************************
	        Exposing Numeral
	    ************************************/

	    // CommonJS module is defined
	    if (hasModule) {
	        module.exports = numeral;
	    }

	    /*global ender:false */
	    if (typeof ender === 'undefined') {
	        // here, `this` means `window` in the browser, or `global` on the server
	        // add `numeral` as a global object via a string identifier,
	        // for Closure Compiler 'advanced' mode
	        this['numeral'] = numeral;
	    }

	    /*global define:false */
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return numeral;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	}).call(this);


/***/ }
/******/ ])
});
